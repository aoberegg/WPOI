<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyMediaLite</name>
    </assembly>
    <members>
        <member name="T:MyMediaLite.IItemAttributeAwareRecommender">
            <summary>Interface for recommenders that take binary item attributes into account</summary>
            <remarks></remarks>
        </member>
        <member name="P:MyMediaLite.IItemAttributeAwareRecommender.NumItemAttributes">
            <value>an integer stating the number of attributes</value>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:MyMediaLite.IItemAttributeAwareRecommender.ItemAttributes">
            <value>the binary item attributes</value>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:MyMediaLite.IItemRelationAwareRecommender">
            <summary>Interface for recommenders that take a binary relation over items into account</summary>
            <remarks></remarks>
        </member>
        <member name="P:MyMediaLite.IItemRelationAwareRecommender.ItemRelation">
            <value>The binary item relation</value>
            <remarks></remarks>
        </member>
        <member name="P:MyMediaLite.IItemRelationAwareRecommender.NumItems">
            <value>Number of items</value>
            <remarks></remarks>
        </member>
        <member name="T:MyMediaLite.IIterativeModel">
            <summary>Interface representing iteratively trained models</summary>
        </member>
        <member name="P:MyMediaLite.IIterativeModel.NumIter">
            <summary>Number of iterations to run the training</summary>
        </member>
        <member name="M:MyMediaLite.IIterativeModel.Iterate">
            <summary>Run one iteration (= pass over the training data)</summary>
        </member>
        <member name="M:MyMediaLite.IIterativeModel.ComputeObjective">
            <summary>Compute the current optimization objective (usually loss plus regularization term) of the model</summary>
            <returns>the current objective; -1 if not implemented</returns>
        </member>
        <member name="T:MyMediaLite.IRecommender">
             \mainpage MyMediaLite API Documentation
             You can browse the documentation by class name, class hierarchy, and member name.
             Just click on the "Classes" tab.
            
             Please report problems and missing information to the MyMediaLite authors: http://mymedialite.net/contact.html
            
             If you want to contribute to MyMediaLite have a look at http://mymedialite.net/contribute.html
            <summary>Generic interface for simple recommenders</summary>
            <remarks></remarks>
        </member>
        <member name="M:MyMediaLite.IRecommender.Predict(System.Int32,System.Int32)">
            <summary>Predict rating or score for a given user-item combination</summary>
            <remarks></remarks>
            <param name="user_id">the user ID</param>
            <param name="item_id">the item ID</param>
            <returns>the predicted score/rating for the given user-item combination</returns>
        </member>
        <member name="M:MyMediaLite.IRecommender.Recommend(System.Int32,System.Int32,System.Collections.Generic.ICollection{System.Int32},System.Collections.Generic.ICollection{System.Int32})">
            <summary>Recommend items for a given user</summary>
            <param name='user_id'>the user ID</param>
            <param name='n'>the number of items to recommend, -1 for as many as possible</param>
            <param name='ignore_items'>collection if items that should not be returned; if null, use empty collection</param>
            <param name='candidate_items'>the candidate items to choose from; if null, use all items</param>
            <returns>a sorted list of (item_id, score) tuples</returns>
        </member>
        <member name="M:MyMediaLite.IRecommender.CanPredict(System.Int32,System.Int32)">
            <summary>Check whether a useful prediction (i.e. not using a fallback/default answer) can be made for a given user-item combination</summary>
            <remarks>
            It is up to the recommender implementor to decide when a prediction is useful,
            and to document it accordingly.
            </remarks>
            <param name="user_id">the user ID</param>
            <param name="item_id">the item ID</param>
            <returns>true if a useful prediction can be made, false otherwise</returns>
        </member>
        <member name="M:MyMediaLite.IRecommender.Train">
            <summary>Learn the model parameters of the recommender from the training data</summary>
            <remarks></remarks>
        </member>
        <member name="M:MyMediaLite.IRecommender.SaveModel(System.String)">
            <summary>Save the model parameters to a file</summary>
            <remarks></remarks>
            <param name="filename">the name of the file to write to</param>
        </member>
        <member name="M:MyMediaLite.IRecommender.LoadModel(System.String)">
            <summary>Get the model parameters from a file</summary>
            <remarks></remarks>
            <param name="filename">the name of the file to read from</param>
        </member>
        <member name="M:MyMediaLite.IRecommender.ToString">
            <summary>Return a string representation of the recommender</summary>
            <remarks>
            The ToString() method of recommenders should list the class name and all hyperparameters, separated by space characters.
            </remarks>
        </member>
        <member name="T:MyMediaLite.IUserAttributeAwareRecommender">
            <summary>Interface for recommenderss that take binary user attributes into account</summary>
            <remarks></remarks>
        </member>
        <member name="P:MyMediaLite.IUserAttributeAwareRecommender.NumUserAttributes">
            <value>Number of binary user attributes</value>
            <remarks></remarks>
        </member>
        <member name="P:MyMediaLite.IUserAttributeAwareRecommender.UserAttributes">
            <value>The binary user attributes</value>
            <remarks></remarks>
        </member>
        <member name="T:MyMediaLite.IUserRelationAwareRecommender">
            <summary>Interface for recommenders that take a binary relation over users into account</summary>
            <remarks></remarks>
        </member>
        <member name="P:MyMediaLite.IUserRelationAwareRecommender.UserRelation">
            <value>The binary user relation</value>
            <remarks></remarks>
        </member>
        <member name="P:MyMediaLite.IUserRelationAwareRecommender.NumUsers">
            <value>Number of users</value>
            <remarks></remarks>
        </member>
        <member name="T:MyMediaLite.IItemSimilarityProvider">
            <summary>Interface for classes that provide item similarities</summary>
        </member>
        <member name="M:MyMediaLite.IItemSimilarityProvider.GetItemSimilarity(System.Int32,System.Int32)">
            <summary>get the similarity between two items</summary>
            <returns>the item similarity; higher means more similar</returns>
            <param name='item_id1'>the ID of the first item</param>
            <param name='item_id2'>the ID of the second item</param>
        </member>
        <member name="M:MyMediaLite.IItemSimilarityProvider.GetMostSimilarItems(System.Int32,System.UInt32)">
            <summary>get the most similar items</summary>
            <returns>the items most similar to a given item</returns>
            <param name='item_id'>the ID of the item</param>
            <param name='n'>the number of similar items to return</param>
        </member>
        <member name="T:MyMediaLite.IUserSimilarityProvider">
            <summary>Interface for classes that provide user similarities</summary>
        </member>
        <member name="M:MyMediaLite.IUserSimilarityProvider.GetUserSimilarity(System.Int32,System.Int32)">
            <summary>get the similarity between two users</summary>
            <returns>the user similarity; higher means more similar</returns>
            <param name='user_id1'>the ID of the first user</param>
            <param name='user_id2'>the ID of the second user</param>
        </member>
        <member name="M:MyMediaLite.IUserSimilarityProvider.GetMostSimilarUsers(System.Int32,System.UInt32)">
            <summary>get the most similar users</summary>
            <returns>the users most similar to a given user</returns>
            <param name='user_id'>the ID of the user</param>
            <param name='n'>the number of similar users to return</param>
        </member>
        <member name="T:MyMediaLite.Correlation.BinaryCosine">
            <summary>Class for storing cosine similarities</summary>
            <remarks>
            http://en.wikipedia.org/wiki/Cosine_similarity
            </remarks>
        </member>
        <member name="M:MyMediaLite.Correlation.BinaryCosine.#ctor(System.Int32)">
            <summary>Creates an object of type Cosine</summary>
            <param name="num_entities">the number of entities</param>
        </member>
        <member name="M:MyMediaLite.Correlation.BinaryCosine.ComputeCorrelationFromOverlap(System.Single,System.Single,System.Single)">
            
        </member>
        <member name="T:MyMediaLite.Correlation.Jaccard">
             <summary>Class for storing and computing the Jaccard index (Tanimoto coefficient)</summary>
             <remarks>
             The Jaccard index is often also called the Tanimoto coefficient.
            
             http://en.wikipedia.org/wiki/Jaccard_index
             </remarks>
        </member>
        <member name="M:MyMediaLite.Correlation.Jaccard.#ctor(System.Int32)">
            <summary>Creates an object of type Jaccard</summary>
            <param name="num_entities">the number of entities</param>
        </member>
        <member name="M:MyMediaLite.Correlation.Jaccard.ComputeCorrelationFromOverlap(System.Single,System.Single,System.Single)">
            
        </member>
        <member name="T:MyMediaLite.Correlation.Pearson">
            <summary>Shrunk Pearson correlation for rating data</summary>
            <remarks>
              <para>
                The correlation values are shrunk towards zero, depending on the number of ratings the estimate is based on.
                Otherwise, we would give too much weight to similarities estimated from just a few examples.
              </para>
              <para>
                http://en.wikipedia.org/wiki/Pearson_correlation
              </para>
              <para>
                We apply shrinkage as in formula (5.16) of chapter 5 of the Recommender Systems Handbook.
                Note that the shrinkage formula has changed betweem the two publications.
                It is now based on the assumption that the true correlations are normally distributed;
                the shrunk estimate is the posterior mean of the empirical estimate.
              </para>
              <para>
                Literature:
                <list type="bullet">
                  <item><description>
                    Yehuda Koren: Factor in the Neighbors: Scalable and Accurate Collaborative Filtering,
                    Transactions on Knowledge Discovery from Data (TKDD), 2009.
                    http://public.research.att.com/~volinsky/netflix/factorizedNeighborhood.pdf
                  </description></item>
                  <item><description>
                    Yehuda Koren, Robert Bell: Advances in Collaborative Filtering,
                    Chapter 5 of the Recommender Systems Handbook, Springer, 2011.
                    http://research.yahoo.net/files/korenBellChapterSpringer.pdf
                  </description></item>
                </list>
              </para>
            </remarks>
        </member>
        <member name="P:MyMediaLite.Correlation.Pearson.Shrinkage">
            <summary>shrinkage parameter, if set to 0 we have the standard Pearson correlation without shrinkage</summary>
        </member>
        <member name="M:MyMediaLite.Correlation.Pearson.#ctor(System.Int32,System.Single)">
            <summary>Constructor. Create a Pearson correlation matrix</summary>
            <param name="num_entities">the number of entities</param>
            <param name="shrinkage">shrinkage parameter</param>
        </member>
        <member name="M:MyMediaLite.Correlation.Pearson.ComputeCorrelation(MyMediaLite.Data.IRatings,MyMediaLite.Taxonomy.EntityType,System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.Correlation.Pearson.ComputeCorrelation(MyMediaLite.Data.IRatings,MyMediaLite.Taxonomy.EntityType,System.Collections.Generic.IList{System.Tuple{System.Int32,System.Single}},System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.Correlation.Pearson.ComputeCorrelations(MyMediaLite.Data.IRatings,MyMediaLite.Taxonomy.EntityType)">
            
        </member>
        <member name="T:MyMediaLite.Correlation.RatingCosine">
            <summary>Rating cosine similarity for rating data</summary>
            <remarks>
              Similarity is computed between common ratings values.
              https://en.wikipedia.org/wiki/Cosine_similarity#Definition
            
              This is very similar to Pearson correlation, except that the ratings are not centered.
            </remarks>
        </member>
        <member name="M:MyMediaLite.Correlation.RatingCosine.#ctor(System.Int32,System.Single)">
            
        </member>
        <member name="T:MyMediaLite.Correlation.ConditionalProbability">
            <summary>Class for storing and computing conditional probabilities</summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:MyMediaLite.Correlation.ConditionalProbability.#ctor(System.Int32)">
            <summary>Creates an object of type ConditionalProbability</summary>
            <param name="num_entities">the number of entities</param>
        </member>
        <member name="M:MyMediaLite.Correlation.ConditionalProbability.ComputeCorrelationFromOverlap(System.Single,System.Single,System.Single)">
            
        </member>
        <member name="T:MyMediaLite.Correlation.ICorrelationMatrix">
            <summary>Interface representing correlation and similarity matrices</summary>
        </member>
        <member name="P:MyMediaLite.Correlation.ICorrelationMatrix.NumEntities">
            <summary>size of the matrix (number of entities)</summary>
        </member>
        <member name="M:MyMediaLite.Correlation.ICorrelationMatrix.AddEntity(System.Int32)">
            <summary>Add an entity to the ICorrelationMatrix by growing it to the requested size.</summary>
            <remarks>
            Note that you still have to correctly compute and set the entity's correlation values
            </remarks>
            <param name="entity_id">the numerical ID of the entity</param>
        </member>
        <member name="M:MyMediaLite.Correlation.ICorrelationMatrix.Write(System.IO.StreamWriter)">
            <summary>Write out the correlations to a StreamWriter</summary>
            <param name="writer">
            A <see cref="T:System.IO.StreamWriter"/>
            </param>
        </member>
        <member name="M:MyMediaLite.Correlation.ICorrelationMatrix.Resize(System.Int32)">
            <summary>Resize to the given size</summary>
            <param name="size">the size</param>
        </member>
        <member name="T:MyMediaLite.Correlation.SymmetricCorrelationMatrix">
            <summary>Class for computing and storing correlations and similarities</summary>
        </member>
        <member name="P:MyMediaLite.Correlation.SymmetricCorrelationMatrix.NumEntities">
            <summary>Number of entities the correlation is defined over</summary>
        </member>
        <member name="P:MyMediaLite.Correlation.SymmetricCorrelationMatrix.IsSymmetric">
            <value>returns true if the matrix is symmetric, which is generally the case for similarity matrices</value>
        </member>
        <member name="M:MyMediaLite.Correlation.SymmetricCorrelationMatrix.#ctor(System.Int32)">
            <summary>Creates a CorrelationMatrix object for a given number of entities</summary>
            <param name="num_entities">number of entities</param>
        </member>
        <member name="M:MyMediaLite.Correlation.SymmetricCorrelationMatrix.Write(System.IO.StreamWriter)">
            <summary>Write out the correlations to a StreamWriter</summary>
            <param name="writer">
            A <see cref="T:System.IO.StreamWriter"/>
            </param>
        </member>
        <member name="M:MyMediaLite.Correlation.SymmetricCorrelationMatrix.Resize(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.Correlation.SymmetricCorrelationMatrix.AddEntity(System.Int32)">
            
        </member>
        <member name="T:MyMediaLite.Correlation.AsymmetricCorrelationMatrix">
            <summary>Class for computing and storing correlations and similarities</summary>
        </member>
        <member name="P:MyMediaLite.Correlation.AsymmetricCorrelationMatrix.NumEntities">
            
        </member>
        <member name="F:MyMediaLite.Correlation.AsymmetricCorrelationMatrix.num_entities">
            <summary>Number of entities, e.g. users or items</summary>
        </member>
        <member name="P:MyMediaLite.Correlation.AsymmetricCorrelationMatrix.IsSymmetric">
            <value>returns false</value>
        </member>
        <member name="M:MyMediaLite.Correlation.AsymmetricCorrelationMatrix.#ctor(System.Int32)">
            <summary>Creates a CorrelationMatrix object for a given number of entities</summary>
            <param name="num_entities">number of entities</param>
        </member>
        <member name="M:MyMediaLite.Correlation.AsymmetricCorrelationMatrix.Write(System.IO.StreamWriter)">
            <summary>Write out the correlations to a StreamWriter</summary>
            <param name="writer">
            A <see cref="T:System.IO.StreamWriter"/>
            </param>
        </member>
        <member name="M:MyMediaLite.Correlation.AsymmetricCorrelationMatrix.AddEntity(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.Correlation.AsymmetricCorrelationMatrix.Resize(System.Int32)">
            
        </member>
        <member name="T:MyMediaLite.Correlation.IRatingCorrelationMatrix">
            <summary>CorrelationMatrix that computes correlations over rating data</summary>
        </member>
        <member name="M:MyMediaLite.Correlation.IRatingCorrelationMatrix.ComputeCorrelations(MyMediaLite.Data.IRatings,MyMediaLite.Taxonomy.EntityType)">
            <summary>Compute the correlations for a given entity type from a rating dataset</summary>
            <param name="ratings">the rating data</param>
            <param name="entity_type">the EntityType - either USER or ITEM</param>
        </member>
        <member name="M:MyMediaLite.Correlation.IRatingCorrelationMatrix.ComputeCorrelation(MyMediaLite.Data.IRatings,MyMediaLite.Taxonomy.EntityType,System.Int32,System.Int32)">
            <summary>Computes the correlation of two rating vectors</summary>
            <param name="ratings">the rating data</param>
            <param name="entity_type">the entity type, either USER or ITEM</param>
            <param name="i">the ID of the first entity</param>
            <param name="j">the ID of the second entity</param>
            <returns>the correlation of the two vectors</returns>
        </member>
        <member name="M:MyMediaLite.Correlation.IRatingCorrelationMatrix.ComputeCorrelation(MyMediaLite.Data.IRatings,MyMediaLite.Taxonomy.EntityType,System.Collections.Generic.IList{System.Tuple{System.Int32,System.Single}},System.Int32)">
            <summary>Compute correlation between two entities for given ratings</summary>
            <param name="ratings">the rating data</param>
            <param name="entity_type">the entity type, either USER or ITEM</param>
            <param name="entity_ratings">ratings identifying the first entity</param>
            <param name="j">the ID of second entity</param>
        </member>
        <member name="T:MyMediaLite.Correlation.IBinaryDataCorrelationMatrix">
            <summary>CorrelationMatrix that computes correlations over binary data</summary>
        </member>
        <member name="P:MyMediaLite.Correlation.IBinaryDataCorrelationMatrix.Weighted">
            <summary>If set to true, give a lower weight to evidence coming from very frequent entities</summary>
        </member>
        <member name="M:MyMediaLite.Correlation.IBinaryDataCorrelationMatrix.ComputeCorrelations(MyMediaLite.DataType.IBooleanMatrix)">
            <summary>Compute the correlations from an implicit feedback, positive-only dataset</summary>
            <param name="entity_data">the implicit feedback set, rows contain the entities to correlate</param>
        </member>
        <member name="M:MyMediaLite.Correlation.IBinaryDataCorrelationMatrix.ComputeCorrelation(System.Collections.Generic.ICollection{System.Int32},System.Collections.Generic.ICollection{System.Int32})">
            <summary>Computes the correlation of two binary vectors</summary>
            <param name="vector_i">the first vector</param>
            <param name="vector_j">the second vector</param>
            <returns>the correlation of the two vectors</returns>
        </member>
        <member name="T:MyMediaLite.Correlation.BinaryCorrelationType">
            <summary>Correlations based on binary data</summary>
        </member>
        <member name="F:MyMediaLite.Correlation.BinaryCorrelationType.Cosine">
            <summary>cosine similarity</summary>
        </member>
        <member name="F:MyMediaLite.Correlation.BinaryCorrelationType.Jaccard">
            <summary>Jaccard index (Tanimoto coefficient)</summary>
        </member>
        <member name="F:MyMediaLite.Correlation.BinaryCorrelationType.ConditionalProbability">
            <summary>conditional probability</summary>
        </member>
        <member name="F:MyMediaLite.Correlation.BinaryCorrelationType.BidirectionalConditionalProbability">
            <summary>bidirectional conditional probability</summary>
        </member>
        <member name="F:MyMediaLite.Correlation.BinaryCorrelationType.Cooccurrence">
            <summary>cooccurrence counts</summary>
        </member>
        <member name="F:MyMediaLite.Correlation.BinaryCorrelationType.SimilarityProvider">
            <summary>use a similarity provider to get the correlation</summary>
        </member>
        <member name="F:MyMediaLite.Correlation.BinaryCorrelationType.Stored">
            <summary>use stored/precomputed correlation</summary>
        </member>
        <member name="T:MyMediaLite.Correlation.RatingCorrelationType">
            <summary>Correlations based on rating data</summary>
        </member>
        <member name="F:MyMediaLite.Correlation.RatingCorrelationType.BinaryCosine">
            <summary>binary cosine similarity</summary>
        </member>
        <member name="F:MyMediaLite.Correlation.RatingCorrelationType.Jaccard">
            <summary>Jaccard index (Tanimoto coefficient)</summary>
        </member>
        <member name="F:MyMediaLite.Correlation.RatingCorrelationType.ConditionalProbability">
            <summary>conditional probability</summary>
        </member>
        <member name="F:MyMediaLite.Correlation.RatingCorrelationType.BidirectionalConditionalProbability">
            <summary>bidirectional conditional probability</summary>
        </member>
        <member name="F:MyMediaLite.Correlation.RatingCorrelationType.Cooccurrence">
            <summary>cooccurrence counts</summary>
        </member>
        <member name="F:MyMediaLite.Correlation.RatingCorrelationType.SimilarityProvider">
            <summary>use a similarity provider to get the correlation</summary>
        </member>
        <member name="F:MyMediaLite.Correlation.RatingCorrelationType.Stored">
            <summary>use stored/precomputed correlation</summary>
        </member>
        <member name="F:MyMediaLite.Correlation.RatingCorrelationType.Pearson">
            <summary>Pearson correlation</summary>
        </member>
        <member name="F:MyMediaLite.Correlation.RatingCorrelationType.RatingCosine">
            <summary>rating cosine similarity</summary>
        </member>
        <member name="T:MyMediaLite.Correlation.Cooccurrence">
            <summary>Class for storing and computing the co-counts</summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:MyMediaLite.Correlation.Cooccurrence.#ctor(System.Int32)">
            <summary>Creates an object of type Cooccurrence</summary>
            <param name="num_entities">the number of entities</param>
        </member>
        <member name="M:MyMediaLite.Correlation.Cooccurrence.ComputeCorrelationFromOverlap(System.Single,System.Single,System.Single)">
            
        </member>
        <member name="T:MyMediaLite.Correlation.BidirectionalConditionalProbability">
             <summary>Class for storing and computing 'bi-directional' conditional probabilities</summary>
             <remarks>
             TODO LIT
             </remarks>
            
        </member>
        <member name="M:MyMediaLite.Correlation.BidirectionalConditionalProbability.#ctor(System.Int32,System.Single)">
            <summary>Creates an object of type BidirectionalConditionalProbability</summary>
            <param name="num_entities">the number of entities</param>
            <param name="alpha">alpha parameter</param>
        </member>
        <member name="M:MyMediaLite.Correlation.BidirectionalConditionalProbability.ComputeCorrelationFromOverlap(System.Single,System.Single,System.Single)">
            
        </member>
        <member name="T:MyMediaLite.Correlation.Extensions">
            <summary>Extension methods for correlation matrices</summary>
        </member>
        <member name="M:MyMediaLite.Correlation.Extensions.SumUp(MyMediaLite.Correlation.ICorrelationMatrix,System.Int32,System.Collections.Generic.ICollection{System.Int32},System.Single)">
            <summary>Sum up the correlations between a given entity and the entities in a collection</summary>
            <param name="correlation">the correlation matrix</param>
            <param name="entity_id">the numerical ID of the entity</param>
            <param name="entities">a collection containing the numerical IDs of the entities to compare to</param>
            <param name="q">score exponent</param>
            <returns>the correlation sum</returns>
        </member>
        <member name="M:MyMediaLite.Correlation.Extensions.SetZero(MyMediaLite.Correlation.ICorrelationMatrix)">
            <summary>Sets all values in a matrix to zero</summary>
            <param name='c'>a correlation matrix</param>
        </member>
        <member name="M:MyMediaLite.Correlation.Extensions.ReadSymmetricCorrelationMatrix(MyMediaLite.Correlation.SymmetricCorrelationMatrix,System.IO.StreamReader)">
            <summary>Reads a SymmetricCorrelationMatrix from the lines of a StreamReader</summary>
            <remarks>
            In the first line, we expect to be the number of entities.
            All the other lines have the format
            <pre>
              EntityID1 EntityID2 Correlation
            </pre>
            where EntityID1 and EntityID2 are non-negative integers and Correlation is a floating point number.
            </remarks>
            <param name='correlation'>a correlation matrix</param>
            <param name="reader">the StreamReader to read from</param>
        </member>
        <member name="M:MyMediaLite.Correlation.Extensions.ReadAsymmetricCorrelationMatrix(MyMediaLite.Correlation.AsymmetricCorrelationMatrix,System.IO.StreamReader)">
            <summary>Reads a AsymmetricCorrelationMatrix from the lines of a StreamReader</summary>
            <remarks>
            In the first line, we expect to be the number of entities.
            All the other lines have the format
            <pre>
              EntityID1 EntityID2 Correlation
            </pre>
            where EntityID1 and EntityID2 are non-negative integers and Correlation is a floating point number.
            </remarks>
            <param name='correlation'>a correlation matrix</param>
            <param name="reader">the StreamReader to read from</param>
        </member>
        <member name="M:MyMediaLite.Correlation.Extensions.GetPositivelyCorrelatedEntities(MyMediaLite.Correlation.ICorrelationMatrix,System.Int32)">
            <summary>Get all entities that are positively correlated to an entity, sorted by correlation</summary>
            <param name="c">a correlation matrix</param>
            <param name="entity_id">the entity ID</param>
            <returns>a sorted list of all entities that are positively correlated to entitiy_id</returns>
        </member>
        <member name="M:MyMediaLite.Correlation.Extensions.GetNearestNeighbors(MyMediaLite.Correlation.ICorrelationMatrix,System.Int32,System.UInt32)">
            <summary>Get the k nearest neighbors of a given entity</summary>
            <param name="c">a correlation matrix</param>
            <param name="entity_id">the numerical ID of the entity</param>
            <param name="k">the neighborhood size</param>
            <returns>a sorted list containing the numerical IDs of the k nearest neighbors</returns>
        </member>
        <member name="T:MyMediaLite.Correlation.BinaryDataAsymmetricCorrelationMatrix">
            <summary>Class with commoin routines for asymmetric correlations that are learned from binary data</summary>
        </member>
        <member name="P:MyMediaLite.Correlation.BinaryDataAsymmetricCorrelationMatrix.Weighted">
            
        </member>
        <member name="M:MyMediaLite.Correlation.BinaryDataAsymmetricCorrelationMatrix.#ctor(System.Int32)">
            <summary>Creates an object of type ConditionalProbability</summary>
            <param name="num_entities">the number of entities</param>
        </member>
        <member name="M:MyMediaLite.Correlation.BinaryDataAsymmetricCorrelationMatrix.ComputeCorrelationFromOverlap(System.Single,System.Single,System.Single)">
            
        </member>
        <member name="M:MyMediaLite.Correlation.BinaryDataAsymmetricCorrelationMatrix.ComputeCorrelations(MyMediaLite.DataType.IBooleanMatrix)">
            
        </member>
        <member name="M:MyMediaLite.Correlation.BinaryDataAsymmetricCorrelationMatrix.ComputeCorrelation(System.Collections.Generic.ICollection{System.Int32},System.Collections.Generic.ICollection{System.Int32})">
            
        </member>
        <member name="T:MyMediaLite.Correlation.Overlap">
            <summary>Class containing routines for computing overlaps</summary>
        </member>
        <member name="M:MyMediaLite.Correlation.Overlap.ComputeWeighted(MyMediaLite.DataType.IBooleanMatrix)">
            <summary>Compute the overlap between the vectors in a binary matrix</summary>
            <returns>a sparse matrix with the overlaps</returns>
            <param name='entity_data'>the binary matrix</param>
        </member>
        <member name="M:MyMediaLite.Correlation.Overlap.ComputeUInt(MyMediaLite.DataType.IBooleanMatrix)">
            <summary>Compute the overlap between the vectors in a binary matrix</summary>
            <returns>a sparse matrix with the overlaps</returns>
            <param name='entity_data'>the binary matrix</param>
        </member>
        <member name="M:MyMediaLite.Correlation.Overlap.ComputeUShort(MyMediaLite.DataType.IBooleanMatrix)">
            <summary>Computes the overlap between the vectors in a binary matrix</summary>
            <returns>a sparse matrix with the overlaps</returns>
            <param name='entity_data'>the binary matrix</param>
        </member>
        <member name="T:MyMediaLite.Correlation.BinaryDataSymmetricCorrelationMatrix">
            <summary>Class with common routines for symmetric correlations that are learned from binary data</summary>
        </member>
        <member name="P:MyMediaLite.Correlation.BinaryDataSymmetricCorrelationMatrix.Weighted">
            
        </member>
        <member name="M:MyMediaLite.Correlation.BinaryDataSymmetricCorrelationMatrix.#ctor(System.Int32,System.Boolean)">
            <summary>Creates an object of type BinaryDataCorrelation</summary>
            <param name="num_entities">the number of entities</param>
            <param name="weighted">if true, correlations based on more observations will be given higher weight</param>
        </member>
        <member name="M:MyMediaLite.Correlation.BinaryDataSymmetricCorrelationMatrix.ComputeCorrelationFromOverlap(System.Single,System.Single,System.Single)">
            
        </member>
        <member name="M:MyMediaLite.Correlation.BinaryDataSymmetricCorrelationMatrix.ComputeCorrelations(MyMediaLite.DataType.IBooleanMatrix)">
            
        </member>
        <member name="M:MyMediaLite.Correlation.BinaryDataSymmetricCorrelationMatrix.ComputeCorrelation(System.Collections.Generic.ICollection{System.Int32},System.Collections.Generic.ICollection{System.Int32})">
            
        </member>
        <member name="T:MyMediaLite.Data.CombinedRatings">
            <summary>Combine two IRatings objects</summary>
        </member>
        <member name="M:MyMediaLite.Data.CombinedRatings.#ctor(MyMediaLite.Data.IRatings,MyMediaLite.Data.IRatings)">
            <summary>Create a CombinedRatings object from to existing IRatings objects</summary>
            <param name="ratings1">the first data set</param>
            <param name="ratings2">the second data set</param>
        </member>
        <member name="T:MyMediaLite.Data.IPosOnlyFeedback">
            <summary>Interface for implicit, positive-only user feedback</summary>
        </member>
        <member name="P:MyMediaLite.Data.IPosOnlyFeedback.UserMatrix">
            <summary>By-user access, users are stored in the rows, items in the culumns</summary>
            <remarks>should be implemented as lazy data structure</remarks>
        </member>
        <member name="P:MyMediaLite.Data.IPosOnlyFeedback.ItemMatrix">
            <summary>By-item access, items are stored in the rows, users in the culumns</summary>
            <remarks>should be implemented as lazy data structure</remarks>
        </member>
        <member name="M:MyMediaLite.Data.IPosOnlyFeedback.Add(System.Int32,System.Int32)">
            <summary>Add a user-item event to the data structure</summary>
            <param name="user_id">the user ID</param>
            <param name="item_id">the item ID</param>
        </member>
        <member name="M:MyMediaLite.Data.IPosOnlyFeedback.GetItemMatrixCopy">
            <summary>Get a copy of the item matrix</summary>
            <returns>a copy of the item matrix</returns>
        </member>
        <member name="M:MyMediaLite.Data.IPosOnlyFeedback.GetUserMatrixCopy">
            <summary>Get a copy of the user matrix</summary>
            <returns>a copy of the user matrix</returns>
        </member>
        <member name="M:MyMediaLite.Data.IPosOnlyFeedback.Remove(System.Int32,System.Int32)">
            <summary>Remove a user-item event from the data structure</summary>
            <remarks>
            If no event for the given user-item combination exists, nothing happens.
            </remarks>
            <param name="user_id">the user ID</param>
            <param name="item_id">the item ID</param>
        </member>
        <member name="M:MyMediaLite.Data.IPosOnlyFeedback.Transpose">
            <summary>Get the transpose of the dataset (users and items exchanged)</summary>
            <returns>the transpose of the dataset</returns>
        </member>
        <member name="T:MyMediaLite.Data.IRatings">
            <summary>Interface for rating datasets</summary>
        </member>
        <member name="P:MyMediaLite.Data.IRatings.Count">
            
        </member>
        <member name="P:MyMediaLite.Data.IRatings.Scale">
            <summary>information about the scale of the ratings in the dataset</summary>
        </member>
        <member name="P:MyMediaLite.Data.IRatings.Average">
            <summary>average rating in the dataset</summary>
        </member>
        <member name="P:MyMediaLite.Data.IRatings.Item(System.Int32,System.Int32)">
            <summary>Directly access rating by user and item</summary>
            <param name="user_id">the user ID</param>
            <param name="item_id">the item ID</param>
            <value>the rating value for the given user and item</value>
        </member>
        <member name="M:MyMediaLite.Data.IRatings.TryGet(System.Int32,System.Int32,System.Single@)">
            <summary>Try to retrieve a rating for a given user-item combination</summary>
            <param name="user_id">the user ID</param>
            <param name="item_id">the item ID</param>
            <param name="rating">will contain the first rating encountered that matches the user ID and item ID</param>
            <returns>true if a rating was found for the user and item</returns>
        </member>
        <member name="M:MyMediaLite.Data.IRatings.TryGet(System.Int32,System.Int32,System.Collections.Generic.ICollection{System.Int32},System.Single@)">
            <summary>Try to retrieve a rating for a given user-item combination</summary>
            <param name="user_id">the user ID</param>
            <param name="item_id">the item ID</param>
            <param name="indexes">the indexes to look at</param>
            <param name="rating">will contain the first rating encountered that matches the user ID and item ID</param>
            <returns>true if a rating was found for the user and item</returns>
        </member>
        <member name="M:MyMediaLite.Data.IRatings.Get(System.Int32,System.Int32,System.Collections.Generic.ICollection{System.Int32})">
            <summary>Directly access rating by user and item</summary>
            <param name="user_id">the user ID</param>
            <param name="item_id">the item ID</param>
            <param name="indexes">the indexes to look at</param>
            <returns>the first rating encountered that matches the user ID and item ID</returns>
        </member>
        <member name="M:MyMediaLite.Data.IRatings.Add(System.Int32,System.Int32,System.Byte)">
            <summary>Add byte-valued rating to the collection</summary>
            <param name="user_id">the user ID</param>
            <param name="item_id">the item ID</param>
            <param name="rating">the rating</param>
        </member>
        <member name="M:MyMediaLite.Data.IRatings.Add(System.Int32,System.Int32,System.Single)">
            <summary>Add float-valued rating to the collection</summary>
            <param name="user_id">the user ID</param>
            <param name="item_id">the item ID</param>
            <param name="rating">the rating</param>
        </member>
        <member name="M:MyMediaLite.Data.IRatings.InitScale">
            <summary>Initialize the Scale property</summary>
        </member>
        <member name="T:MyMediaLite.Data.ISplit`1">
            <summary>generic dataset splitter interface</summary>
            <typeparam name="T">the kind of dataset that is split into pieces</typeparam>
        </member>
        <member name="P:MyMediaLite.Data.ISplit`1.NumberOfFolds">
            <summary>The number of folds in this split</summary>
            <value>The number of folds in this split</value>
        </member>
        <member name="P:MyMediaLite.Data.ISplit`1.Train">
            <summary>Training data for the different folds</summary>
            <value>A list of T</value>
        </member>
        <member name="P:MyMediaLite.Data.ISplit`1.Test">
            <summary>Test data for the different folds</summary>
            <value>A list of T</value>
        </member>
        <member name="T:MyMediaLite.Data.ITimedRatings">
            <summary>Interface for rating datasets with time information</summary>
        </member>
        <member name="M:MyMediaLite.Data.ITimedRatings.Add(System.Int32,System.Int32,System.Single,System.DateTime)">
            <summary>add a rating event including time information</summary>
            <remarks>
            It is up to the user of a class implementing this interface to decide whether the DateTime
            object represent local time, UTC, or any other time.
            </remarks>
            <param name="user_id">the user ID</param>
            <param name="item_id">the item ID</param>
            <param name="rating">the rating value</param>
            <param name="time">A <see cref="T:System.DateTime"/> specifying the time of the rating event</param>
        </member>
        <member name="M:MyMediaLite.Data.ITimedRatings.getTimes(System.Int32,System.Int32)">
            <summary>
            Gets the times.
            </summary>
            <returns>The times.</returns>
            <param name="user_id">User identifier.</param>
            <param name="item_id">Item identifier.</param>
        </member>
        <member name="P:MyMediaLite.Data.ITimedRatings.AllTimes">
            <summary>all times in the dataset</summary>
        </member>
        <member name="M:MyMediaLite.Data.ITimedRatings.getTimesOfUser(System.Int32)">
            <summary>
            Gets the times of a user.
            </summary>
            <returns>The times.</returns>
            <param name="user_id">User identifier.</param>
        </member>
        <member name="M:MyMediaLite.Data.ITimedRatings.getCheckinCount(System.Int32,System.Int32)">
            <summary>
            Gets the checkin count.
            </summary>
            <returns>The checkin count.</returns>
            <param name="user_id">User identifier.</param>
            <param name="item_id">Item identifier.</param>
        </member>
        <member name="M:MyMediaLite.Data.ITimedRatings.getItemsOfUser(System.Int32)">
            <summary>
            Gets the items of user.
            </summary>
            <returns>The items of user.</returns>
            <param name="user_id">User identifier.</param>
        </member>
        <member name="M:MyMediaLite.Data.ITimedRatings.RemoveUsers(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Removes the users.
            </summary>
            <param name="users">Users.</param>
        </member>
        <member name="M:MyMediaLite.Data.ITimedRatings.getItemsUserDictWithTime">
            <summary>
            Gets the items of all users with Time.
            </summary>
            <returns>The items user dict.</returns>
        </member>
        <member name="M:MyMediaLite.Data.ITimedRatings.getItemsUserDict">
            <summary>
            Gets the items of all users.
            </summary>
            <returns>The items user dict.</returns>
        </member>
        <member name="M:MyMediaLite.Data.ITimedRatings.getTimesUserDict">
            <summary>
            Gets the times of all users.
            </summary>
            <returns>The times user dict.</returns>
        </member>
        <member name="M:MyMediaLite.Data.ITimedRatings.getTimesItemDict">
            <summary>
            Gets the times of all users.
            </summary>
            <returns>The times user dict.</returns>
        </member>
        <member name="T:MyMediaLite.Data.IdentityMapping">
            <summary>Identity mapping for entity IDs: Every original ID is mapped to itself</summary>
        </member>
        <member name="P:MyMediaLite.Data.IdentityMapping.NumberOfEntities">
            
        </member>
        <member name="P:MyMediaLite.Data.IdentityMapping.OriginalIDs">
            
        </member>
        <member name="P:MyMediaLite.Data.IdentityMapping.InternalIDs">
            
        </member>
        <member name="M:MyMediaLite.Data.IdentityMapping.ToOriginalID(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.Data.IdentityMapping.ToInternalID(System.String)">
            
        </member>
        <member name="M:MyMediaLite.Data.IdentityMapping.ToOriginalID(System.Collections.Generic.IList{System.Int32})">
            
        </member>
        <member name="M:MyMediaLite.Data.IdentityMapping.ToInternalID(System.Collections.Generic.IList{System.String})">
            
        </member>
        <member name="T:MyMediaLite.Data.PosOnlyFeedback`1">
             <summary>Data structure for implicit, positive-only user feedback</summary>
             <remarks>
             This data structure supports incremental updates if supported by the type parameter T.
             </remarks>
            
        </member>
        <member name="P:MyMediaLite.Data.PosOnlyFeedback`1.UserMatrix">
            <summary>By-user access, users are stored in the rows, items in the columns</summary>
        </member>
        <member name="P:MyMediaLite.Data.PosOnlyFeedback`1.ItemMatrix">
            <summary>By-item access, items are stored in the rows, users in the columns</summary>
        </member>
        <member name="M:MyMediaLite.Data.PosOnlyFeedback`1.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:MyMediaLite.Data.PosOnlyFeedback`1.#ctor(MyMediaLite.Data.IDataSet)">
            
        </member>
        <member name="M:MyMediaLite.Data.PosOnlyFeedback`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            
        </member>
        <member name="M:MyMediaLite.Data.PosOnlyFeedback`1.GetUserMatrixCopy">
            
        </member>
        <member name="M:MyMediaLite.Data.PosOnlyFeedback`1.GetItemMatrixCopy">
            
        </member>
        <member name="M:MyMediaLite.Data.PosOnlyFeedback`1.Add(System.Int32,System.Int32)">
            <summary>Add a user-item event to the data structure</summary>
            <param name="user_id">the user ID</param>
            <param name="item_id">the item ID</param>
        </member>
        <member name="M:MyMediaLite.Data.PosOnlyFeedback`1.Remove(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.Data.PosOnlyFeedback`1.Remove(System.Int32)">
            <summary>Remove the event with a given index</summary>
            <param name="index">the index of the event to be removed</param>
        </member>
        <member name="M:MyMediaLite.Data.PosOnlyFeedback`1.RemoveUser(System.Int32)">
            <summary>Remove all feedback by a given user</summary>
            <param name="user_id">the user id</param>
        </member>
        <member name="M:MyMediaLite.Data.PosOnlyFeedback`1.RemoveItem(System.Int32)">
            <summary>Remove all feedback about a given item</summary>
            <param name="item_id">the item ID</param>
        </member>
        <member name="M:MyMediaLite.Data.PosOnlyFeedback`1.Transpose">
            
        </member>
        <member name="T:MyMediaLite.Data.PosOnlyFeedbackCrossValidationSplit`1">
             <summary>K-fold cross-validation split for item prediction from implicit feedback</summary>
             <remarks>
             Items with less than k events associated are ignored for testing and always assigned to the training set.
            
             The dataset must not be modified after the split - this would lead to undefined behavior.
             </remarks>
        </member>
        <member name="P:MyMediaLite.Data.PosOnlyFeedbackCrossValidationSplit`1.NumberOfFolds">
            
        </member>
        <member name="P:MyMediaLite.Data.PosOnlyFeedbackCrossValidationSplit`1.Train">
            
        </member>
        <member name="P:MyMediaLite.Data.PosOnlyFeedbackCrossValidationSplit`1.Test">
            
        </member>
        <member name="M:MyMediaLite.Data.PosOnlyFeedbackCrossValidationSplit`1.#ctor(MyMediaLite.Data.IPosOnlyFeedback,System.UInt32)">
            <summary>Create a k-fold split of positive-only item prediction data</summary>
            <remarks>See the class description for details.</remarks>
            <param name="feedback">the dataset</param>
            <param name="num_folds">the number of folds</param>
        </member>
        <member name="T:MyMediaLite.Data.PosOnlyFeedbackSimpleSplit`1">
            <summary>simple split for item prediction from implicit feedback</summary>
            <remarks>
            The dataset must not be modified after the split - this would lead to undefined behavior.
            </remarks>
        </member>
        <member name="P:MyMediaLite.Data.PosOnlyFeedbackSimpleSplit`1.NumberOfFolds">
            
        </member>
        <member name="P:MyMediaLite.Data.PosOnlyFeedbackSimpleSplit`1.Train">
            
        </member>
        <member name="P:MyMediaLite.Data.PosOnlyFeedbackSimpleSplit`1.Test">
            
        </member>
        <member name="M:MyMediaLite.Data.PosOnlyFeedbackSimpleSplit`1.#ctor(MyMediaLite.Data.IPosOnlyFeedback,System.Double)">
            <summary>Create a simple split of positive-only item prediction data</summary>
            <param name="feedback">the dataset</param>
            <param name="ratio">the ratio of positive events to use for validation</param>
        </member>
        <member name="T:MyMediaLite.Data.RatingCrossValidationSplit">
             <summary>k-fold  cross-validation split for rating prediction</summary>
             <remarks>
               <para>
                 Please note that k-fold cross-validation is not the best/most realistic way of evaluating
                 recommender system algorithms.
                 In particular, chronological splits (<see cref="T:MyMediaLite.Data.RatingsChronologicalSplit"/>) are more realistic.
               </para>
            
               <para>
                 The dataset must not be modified after the split - this would lead to undefined behavior.
               </para>
             </remarks>
        </member>
        <member name="P:MyMediaLite.Data.RatingCrossValidationSplit.NumberOfFolds">
            
        </member>
        <member name="P:MyMediaLite.Data.RatingCrossValidationSplit.Train">
            
        </member>
        <member name="P:MyMediaLite.Data.RatingCrossValidationSplit.Test">
            
        </member>
        <member name="M:MyMediaLite.Data.RatingCrossValidationSplit.#ctor(MyMediaLite.Data.IRatings,System.UInt32)">
            <summary>Create a k-fold split of rating prediction data</summary>
            <param name="ratings">the dataset</param>
            <param name="num_folds">the number of folds</param>
        </member>
        <member name="T:MyMediaLite.Data.RatingType">
            <summary>Represent different numerical types that are used to store the ratings</summary>
        </member>
        <member name="F:MyMediaLite.Data.RatingType.BYTE">
            <summary>byte (1 byte per rating)</summary>
        </member>
        <member name="F:MyMediaLite.Data.RatingType.FLOAT">
            <summary>float (4 bytes per rating)</summary>
        </member>
        <member name="F:MyMediaLite.Data.RatingType.DOUBLE">
            <summary>double (8 bytes per rating)</summary>
        </member>
        <member name="T:MyMediaLite.Data.Ratings">
             <summary>Data structure for storing ratings</summary>
             <remarks>
             Small memory overhead for added flexibility.
            
             This data structure supports incremental updates.
             </remarks>
            
        </member>
        <member name="F:MyMediaLite.Data.Ratings.Values">
            
        </member>
        <member name="P:MyMediaLite.Data.Ratings.Item(System.Int32)">
            
        </member>
        <member name="P:MyMediaLite.Data.Ratings.Scale">
            
        </member>
        <member name="M:MyMediaLite.Data.Ratings.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:MyMediaLite.Data.Ratings.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            
        </member>
        <member name="P:MyMediaLite.Data.Ratings.Average">
            
        </member>
        <member name="P:MyMediaLite.Data.Ratings.Item(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.Data.Ratings.InitScale">
            
        </member>
        <member name="M:MyMediaLite.Data.Ratings.TryGet(System.Int32,System.Int32,System.Single@)">
            
        </member>
        <member name="M:MyMediaLite.Data.Ratings.Get(System.Int32,System.Int32,System.Collections.Generic.ICollection{System.Int32})">
            
        </member>
        <member name="M:MyMediaLite.Data.Ratings.TryGet(System.Int32,System.Int32,System.Collections.Generic.ICollection{System.Int32},System.Single@)">
            
        </member>
        <member name="M:MyMediaLite.Data.Ratings.Add(System.Int32,System.Int32,System.Byte)">
            
        </member>
        <member name="M:MyMediaLite.Data.Ratings.Add(System.Int32,System.Int32,System.Single)">
            
        </member>
        <member name="M:MyMediaLite.Data.Ratings.RemoveAt(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.Data.Ratings.UpdateCountsAndIndices(System.Collections.Generic.ISet{System.Int32},System.Collections.Generic.ISet{System.Int32})">
            <summary>update user- and item-wise counts and indices</summary>
            <param name='users'>the modified users</param>
            <param name='items'>the modified itemsItems.
            </param>
        </member>
        <member name="M:MyMediaLite.Data.Ratings.RemoveUser(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.Data.Ratings.RemoveItem(System.Int32)">
            
        </member>
        <member name="P:MyMediaLite.Data.Ratings.IsReadOnly">
            
        </member>
        <member name="M:MyMediaLite.Data.Ratings.Add(System.Single)">
            
        </member>
        <member name="M:MyMediaLite.Data.Ratings.Clear">
            
        </member>
        <member name="M:MyMediaLite.Data.Ratings.Contains(System.Single)">
            
        </member>
        <member name="M:MyMediaLite.Data.Ratings.CopyTo(System.Single[],System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.Data.Ratings.IndexOf(System.Single)">
            
        </member>
        <member name="M:MyMediaLite.Data.Ratings.Insert(System.Int32,System.Single)">
            
        </member>
        <member name="M:MyMediaLite.Data.Ratings.Remove(System.Single)">
            
        </member>
        <member name="M:MyMediaLite.Data.Ratings.System#Collections#IEnumerable#GetEnumerator">
            
        </member>
        <member name="M:MyMediaLite.Data.Ratings.System#Collections#Generic#IEnumerable{System#Single}#GetEnumerator">
            
        </member>
        <member name="M:MyMediaLite.Data.Ratings.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            
        </member>
        <member name="T:MyMediaLite.Data.RatingsProxy">
            <summary>Data structure that allows access to selected entries of a rating data structure</summary>
        </member>
        <member name="M:MyMediaLite.Data.RatingsProxy.#ctor(MyMediaLite.Data.IRatings,System.Collections.Generic.IList{System.Int32})">
            <summary>Create a RatingsProxy object</summary>
            <param name="ratings">a ratings data structure</param>
            <param name="indices">an index list pointing to entries in the ratings</param>
        </member>
        <member name="M:MyMediaLite.Data.RatingsProxy.RemoveAt(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.Data.RatingsProxy.RemoveUser(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.Data.RatingsProxy.RemoveItem(System.Int32)">
            
        </member>
        <member name="T:MyMediaLite.Data.RatingsSimpleSplit">
             <summary>simple split for rating prediction</summary>
             <remarks>
               <para>
                 Please note that simple splits are not the best/most realistic way of evaluating
                 recommender system algorithms.
                 In particular, chronological splits (<see cref="T:MyMediaLite.Data.RatingsChronologicalSplit"/>) are more realistic.
               </para>
            
               <para>
                 The dataset must not be modified after the split - this would lead to undefined behavior.
               </para>
             </remarks>
        </member>
        <member name="P:MyMediaLite.Data.RatingsSimpleSplit.NumberOfFolds">
            
        </member>
        <member name="P:MyMediaLite.Data.RatingsSimpleSplit.Train">
            
        </member>
        <member name="P:MyMediaLite.Data.RatingsSimpleSplit.Test">
            
        </member>
        <member name="M:MyMediaLite.Data.RatingsSimpleSplit.#ctor(MyMediaLite.Data.IRatings,System.Double)">
            <summary>Create a simple split of rating prediction data</summary>
            <param name="ratings">the dataset</param>
            <param name="ratio">the ratio of ratings to use for validation</param>
        </member>
        <member name="T:MyMediaLite.Data.StaticByteRatings">
             <summary>Array-based storage for rating data.</summary>
             <remarks>
             Very memory-efficient.
            
             This data structure does NOT support incremental updates.
             </remarks>
        </member>
        <member name="P:MyMediaLite.Data.StaticByteRatings.Item(System.Int32)">
            
        </member>
        <member name="P:MyMediaLite.Data.StaticByteRatings.Item(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.Data.StaticByteRatings.#ctor(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.Data.StaticByteRatings.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            
        </member>
        <member name="M:MyMediaLite.Data.StaticByteRatings.InitScale">
            
        </member>
        <member name="M:MyMediaLite.Data.StaticByteRatings.Add(System.Int32,System.Int32,System.Single)">
            
        </member>
        <member name="M:MyMediaLite.Data.StaticByteRatings.Add(System.Int32,System.Int32,System.Byte)">
            
        </member>
        <member name="M:MyMediaLite.Data.StaticByteRatings.TryGet(System.Int32,System.Int32,System.Single@)">
            
        </member>
        <member name="M:MyMediaLite.Data.StaticByteRatings.Get(System.Int32,System.Int32,System.Collections.Generic.ICollection{System.Int32})">
            
        </member>
        <member name="M:MyMediaLite.Data.StaticByteRatings.TryGet(System.Int32,System.Int32,System.Collections.Generic.ICollection{System.Int32},System.Single@)">
            
        </member>
        <member name="M:MyMediaLite.Data.StaticByteRatings.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            
        </member>
        <member name="T:MyMediaLite.Data.StaticRatings">
             <summary>Array-based storage for rating data.</summary>
             <remarks>
             Very memory-efficient.
            
             This data structure does NOT support incremental updates.
             </remarks>
        </member>
        <member name="F:MyMediaLite.Data.StaticRatings.pos">
            <summary>The position where the next rating will be stored</summary>
        </member>
        <member name="P:MyMediaLite.Data.StaticRatings.Count">
            
        </member>
        <member name="M:MyMediaLite.Data.StaticRatings.#ctor">
            <summary>default constructor</summary>
        </member>
        <member name="M:MyMediaLite.Data.StaticRatings.#ctor(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.Data.StaticRatings.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            
        </member>
        <member name="M:MyMediaLite.Data.StaticRatings.Add(System.Int32,System.Int32,System.Single)">
            
        </member>
        <member name="M:MyMediaLite.Data.StaticRatings.RemoveAt(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.Data.StaticRatings.RemoveUser(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.Data.StaticRatings.RemoveItem(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.Data.StaticRatings.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            
        </member>
        <member name="T:MyMediaLite.Data.TimedRatings">
            <summary>Data structure for storing ratings with time information</summary>
            <remarks>
            <para>This data structure supports incremental updates.</para>
            <para>
            Loading the Netflix Prize data set (100,000,000 ratings) into this data structure requires about 3.2 GB of memory.
            </para>
            </remarks>
        </member>
        <member name="M:MyMediaLite.Data.TimedRatings.getTimesOfUser(System.Int32)">
            <summary>
            Gets the times of a user.
            </summary>
            <returns>The times.</returns>
            <param name="user_id">User identifier.</param>
        </member>
        <member name="M:MyMediaLite.Data.TimedRatings.getTimes(System.Int32,System.Int32)">
            <summary>
            Gets the times of a user and item.
            </summary>
            <returns>The times.</returns>
            <param name="user_id">User identifier.</param>
            <param name="item_id">Item identifier.</param>
        </member>
        <member name="M:MyMediaLite.Data.TimedRatings.getCheckinCount(System.Int32,System.Int32)">
            <summary>
            Gets the checkin count.
            </summary>
            <returns>The checkin count.</returns>
            <param name="user_id">User identifier.</param>
            <param name="item_id">Item identifier.</param>
        </member>
        <member name="M:MyMediaLite.Data.TimedRatings.getItemsOfUser(System.Int32)">
            <summary>
            Gets the items of user.
            </summary>
            <returns>The items of user.</returns>
            <param name="user_id">User identifier.</param>
        </member>
        <member name="M:MyMediaLite.Data.TimedRatings.getItemsUserDict">
            <summary>
            Gets the items of all users.
            </summary>
            <returns>The items user dict.</returns>
        </member>
        <member name="M:MyMediaLite.Data.TimedRatings.getTimesUserDict">
            <summary>
            Gets the times of all users.
            </summary>
            <returns>The times user dict.</returns>
        </member>
        <member name="P:MyMediaLite.Data.TimedRatings.Times">
            
        </member>
        <member name="P:MyMediaLite.Data.TimedRatings.EarliestTime">
            
        </member>
        <member name="P:MyMediaLite.Data.TimedRatings.LatestTime">
            
        </member>
        <member name="M:MyMediaLite.Data.TimedRatings.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:MyMediaLite.Data.TimedRatings.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            
        </member>
        <member name="M:MyMediaLite.Data.TimedRatings.Add(System.Int32,System.Int32,System.Single)">
            
        </member>
        <member name="M:MyMediaLite.Data.TimedRatings.Add(System.Int32,System.Int32,System.Single,System.DateTime)">
            
        </member>
        <member name="M:MyMediaLite.Data.TimedRatings.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            
        </member>
        <member name="M:MyMediaLite.Data.TimedRatings.RemoveUser(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.Data.TimedRatings.RemoveUsers(System.Collections.Generic.IList{System.Int32})">
            
        </member>
        <member name="P:MyMediaLite.Data.TimedRatings.AllTimes">
            <summary>all item IDs in the dataset</summary>
        </member>
        <member name="T:MyMediaLite.Data.IDataSet">
             <summary>Interface for different kinds of collaborative filtering data sets</summary>
             <remarks>
             <para>
             Implementing classes/inheriting interfaces are e.g. for rating data and for positive-only implicit feedback.
             </para>
            
             <para>
             The main feature of a dataset is that it has some kind of order (not explicitly stated)
             - random, chronological, user-wise, or item-wise - and that it contains tuples of users and
             items (not necessarily unique tuples).
             </para>
            
             <para>
             Implementing classes and inheriting interfaces can add additional data to each user-item tuple,
             e.g. the date/time of an event, location, context, etc., as well as additional index structures
             to access the dataset in a certain fashion.
             </para>
             </remarks>
        </member>
        <member name="P:MyMediaLite.Data.IDataSet.Count">
            <summary>the number of interaction events in the dataset</summary>
        </member>
        <member name="P:MyMediaLite.Data.IDataSet.Users">
            <summary>the user entries</summary>
        </member>
        <member name="P:MyMediaLite.Data.IDataSet.Items">
            <summary>the item entries</summary>
        </member>
        <member name="P:MyMediaLite.Data.IDataSet.MaxUserID">
            <summary>the maximum user ID in the dataset</summary>
        </member>
        <member name="P:MyMediaLite.Data.IDataSet.MaxItemID">
            <summary>the maximum item ID in the dataset</summary>
        </member>
        <member name="P:MyMediaLite.Data.IDataSet.AllUsers">
            <summary>all user IDs in the dataset</summary>
        </member>
        <member name="P:MyMediaLite.Data.IDataSet.AllItems">
            <summary>all item IDs in the dataset</summary>
        </member>
        <member name="P:MyMediaLite.Data.IDataSet.ByUser">
            <summary>indices by user</summary>
            <remarks>Should be implemented as a lazy data structure</remarks>
        </member>
        <member name="P:MyMediaLite.Data.IDataSet.ByItem">
            <summary>indices by item</summary>
            <remarks>Should be implemented as a lazy data structure</remarks>
        </member>
        <member name="P:MyMediaLite.Data.IDataSet.RandomIndex">
            <summary>get a randomly ordered list of all indices</summary>
            <remarks>Should be implemented as a lazy data structure</remarks>
        </member>
        <member name="P:MyMediaLite.Data.IDataSet.CountByUser">
            <summary>count by user</summary>
            <remarks>Should be implemented as a lazy data structure</remarks>
        </member>
        <member name="P:MyMediaLite.Data.IDataSet.CountByItem">
            <summary>count by item</summary>
            <remarks>Should be implemented as a lazy data structure</remarks>
        </member>
        <member name="M:MyMediaLite.Data.IDataSet.RemoveUser(System.Int32)">
            <summary>Remove all events related to a given user</summary>
            <param name="user_id">the user ID</param>
        </member>
        <member name="M:MyMediaLite.Data.IDataSet.RemoveItem(System.Int32)">
            <summary>Remove all events related to a given item</summary>
            <param name="item_id">the item ID</param>
        </member>
        <member name="M:MyMediaLite.Data.IDataSet.GetUsers(System.Collections.Generic.IList{System.Int32})">
            <summary>Get all users that are referenced by a given list of indices</summary>
            <param name="indices">the indices to take into account</param>
            <returns>all users referenced by the list of indices</returns>
        </member>
        <member name="M:MyMediaLite.Data.IDataSet.GetItems(System.Collections.Generic.IList{System.Int32})">
            <summary>Get all items that are referenced by a given list of indices</summary>
            <param name="indices">the indices to take into account</param>
            <returns>all items referenced by the list of indices</returns>
        </member>
        <member name="M:MyMediaLite.Data.IDataSet.GetIndex(System.Int32,System.Int32)">
            <summary>Get index for a given user and item</summary>
            <param name="user_id">the user ID</param>
            <param name="item_id">the item ID</param>
            <returns>the index of the first event encountered that matches the user ID and item ID</returns>
        </member>
        <member name="M:MyMediaLite.Data.IDataSet.GetIndex(System.Int32,System.Int32,System.Collections.Generic.ICollection{System.Int32})">
            <summary>Get index for given user and item</summary>
            <param name="user_id">the user ID</param>
            <param name="item_id">the item ID</param>
            <param name="indexes">the indexes to look at</param>
            <returns>the index of the first event encountered that matches the user ID and item ID</returns>
        </member>
        <member name="M:MyMediaLite.Data.IDataSet.TryGetIndex(System.Int32,System.Int32,System.Int32@)">
            <summary>Try to get the index for given user and item</summary>
            <param name="user_id">the user ID</param>
            <param name="item_id">the item ID</param>
            <param name="index">will contain the index of the first event encountered that matches the user ID and item ID</param>
            <returns>true if an index was found for the user and item</returns>
        </member>
        <member name="M:MyMediaLite.Data.IDataSet.TryGetIndex(System.Int32,System.Int32,System.Collections.Generic.ICollection{System.Int32},System.Int32@)">
            <summary>Try to get the index for given user and item</summary>
            <param name="user_id">the user ID</param>
            <param name="item_id">the item ID</param>
            <param name="indexes">the indexes to look at</param>
            <param name="index">will contain the index of the first event encountered that matches the user ID and item ID</param>
            <returns>true if an index was found for the user and item</returns>
        </member>
        <member name="T:MyMediaLite.Data.DataSet">
            <summary>Abstract dataset class that implements some common functions</summary>
        </member>
        <member name="P:MyMediaLite.Data.DataSet.Users">
            
        </member>
        <member name="P:MyMediaLite.Data.DataSet.Items">
            
        </member>
        <member name="P:MyMediaLite.Data.DataSet.Count">
            
        </member>
        <member name="P:MyMediaLite.Data.DataSet.MaxUserID">
            
        </member>
        <member name="P:MyMediaLite.Data.DataSet.MaxItemID">
            
        </member>
        <member name="P:MyMediaLite.Data.DataSet.ByUser">
            
        </member>
        <member name="F:MyMediaLite.Data.DataSet.by_user">
            <summary>Indices organized by user</summary>
        </member>
        <member name="M:MyMediaLite.Data.DataSet.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:MyMediaLite.Data.DataSet.#ctor(MyMediaLite.Data.IDataSet)">
            <summary>
            Create new dataset view from an existing one.
            Share the underlying data structures, do not copy them.
            </summary>
            <param name='dataset'>the dataset to build from</param>
        </member>
        <member name="M:MyMediaLite.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            
        </member>
        <member name="P:MyMediaLite.Data.DataSet.ByItem">
            
        </member>
        <member name="F:MyMediaLite.Data.DataSet.by_item">
            <summary>Indices organized by item</summary>
        </member>
        <member name="P:MyMediaLite.Data.DataSet.RandomIndex">
            
        </member>
        <member name="P:MyMediaLite.Data.DataSet.AllUsers">
            
        </member>
        <member name="P:MyMediaLite.Data.DataSet.AllItems">
            
        </member>
        <member name="P:MyMediaLite.Data.DataSet.CountByUser">
            
        </member>
        <member name="F:MyMediaLite.Data.DataSet.count_by_user">
            <summary>field for storing the count per user</summary>
        </member>
        <member name="P:MyMediaLite.Data.DataSet.CountByItem">
            
        </member>
        <member name="F:MyMediaLite.Data.DataSet.count_by_item">
            <summary>field for storing the count per item</summary>
        </member>
        <member name="M:MyMediaLite.Data.DataSet.RemoveUser(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.Data.DataSet.RemoveItem(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.Data.DataSet.GetUsers(System.Collections.Generic.IList{System.Int32})">
            
        </member>
        <member name="M:MyMediaLite.Data.DataSet.GetItems(System.Collections.Generic.IList{System.Int32})">
            
        </member>
        <member name="M:MyMediaLite.Data.DataSet.TryGetIndex(System.Int32,System.Int32,System.Int32@)">
            
        </member>
        <member name="M:MyMediaLite.Data.DataSet.TryGetIndex(System.Int32,System.Int32,System.Collections.Generic.ICollection{System.Int32},System.Int32@)">
            
        </member>
        <member name="M:MyMediaLite.Data.DataSet.GetIndex(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.Data.DataSet.GetIndex(System.Int32,System.Int32,System.Collections.Generic.ICollection{System.Int32})">
            
        </member>
        <member name="M:MyMediaLite.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            
        </member>
        <member name="T:MyMediaLite.Data.TimedRatingsProxy">
            <summary>Data structure that allows access to selected entries of a timed rating data structure</summary>
        </member>
        <member name="M:MyMediaLite.Data.TimedRatingsProxy.#ctor(MyMediaLite.Data.ITimedRatings,System.Collections.Generic.IList{System.Int32})">
            <summary>Create a TimedRatingsProxy object</summary>
            <param name="ratings">a ratings data structure</param>
            <param name="indices">an index list pointing to entries in the ratings</param>
        </member>
        <member name="T:MyMediaLite.Data.RatingsChronologicalSplit">
             <summary>chronological split for rating prediction</summary>
             <remarks>
             <para>
               Chronological splits (splits according to the time of the rating) treat all ratings before
               a certain time as training ratings, and the ones after that time as test/validation ratings.
               This kind of split is the most realistic kind of split, because in a real application
               you also can only use past data to make predictions for the future.
             </para>
            
             <para>
               The dataset must not be modified after the split - this would lead to undefined behavior.
             </para>
             </remarks>
        </member>
        <member name="P:MyMediaLite.Data.RatingsChronologicalSplit.NumberOfFolds">
            
        </member>
        <member name="P:MyMediaLite.Data.RatingsChronologicalSplit.Train">
            
        </member>
        <member name="P:MyMediaLite.Data.RatingsChronologicalSplit.Test">
            
        </member>
        <member name="M:MyMediaLite.Data.RatingsChronologicalSplit.#ctor(MyMediaLite.Data.ITimedRatings,System.Double)">
            <summary>Create a chronological split of rating prediction data</summary>
            <remarks>
            If ratings have exactly the same date and time, and they are close to the threshold between
            train and test, there is no guaranteed order between them (ties are broken according to how the
            sorting procedure sorts the ratings).
            </remarks>
            <param name="ratings">the dataset</param>
            <param name="ratio">the ratio of ratings to use for validation</param>
        </member>
        <member name="M:MyMediaLite.Data.RatingsChronologicalSplit.#ctor(MyMediaLite.Data.ITimedRatings,System.DateTime)">
            <summary>Create a chronological split of rating prediction data</summary>
            <param name="ratings">the dataset</param>
            <param name="split_time">
            the point in time to use for splitting the data set;
            everything from that point on will be used for validation
            </param>
        </member>
        <member name="T:MyMediaLite.Data.ITimedDataSet">
            <summary>interface for data sets with time information</summary>
        </member>
        <member name="P:MyMediaLite.Data.ITimedDataSet.Times">
            <summary>the item entries</summary>
        </member>
        <member name="P:MyMediaLite.Data.ITimedDataSet.EarliestTime">
            <summary>earliest time</summary>
        </member>
        <member name="P:MyMediaLite.Data.ITimedDataSet.LatestTime">
            <summary>latest time</summary>
        </member>
        <member name="T:MyMediaLite.Data.RatingsPerUserChronologicalSplit">
            <summary>per-user chronological split for rating prediction</summary>
            <remarks>
            <para>
              Chronological splits (splits according to the time of the rating) treat all ratings before
              a certain time as training ratings, and the ones after that time as test/validation ratings.
            </para>
            
            <para>
              Here, the split date may differ from user to user.
              In the constructor, you can either specify which part (ratio) or how many of a user's rating
              are supposed to be used for validation.
            </para>
            
            <para>
              The dataset must not be modified after the split - this would lead to undefined behavior.
            </para>
            </remarks>
        </member>
        <member name="P:MyMediaLite.Data.RatingsPerUserChronologicalSplit.NumberOfFolds">
            
        </member>
        <member name="P:MyMediaLite.Data.RatingsPerUserChronologicalSplit.Train">
            
        </member>
        <member name="P:MyMediaLite.Data.RatingsPerUserChronologicalSplit.Test">
            
        </member>
        <member name="M:MyMediaLite.Data.RatingsPerUserChronologicalSplit.#ctor(MyMediaLite.Data.ITimedRatings,System.Double)">
            <summary>Create a chronological split of rating prediction data</summary>
            <remarks>
            If ratings have exactly the same date and time, and they are close to the threshold between
            train and test, there is no guaranteed order between them (ties are broken according to how the
            sorting procedure sorts the ratings).
            </remarks>
            <param name="ratings">the dataset</param>
            <param name="ratio">the ratio of ratings to use for validation (per user)</param>
        </member>
        <member name="M:MyMediaLite.Data.RatingsPerUserChronologicalSplit.#ctor(MyMediaLite.Data.ITimedRatings,System.Int32)">
            <summary>Create a chronological split of rating prediction data</summary>
            <remarks>
            If ratings have exactly the same date and time, and they are close to the threshold between
            train and test, there is no guaranteed order between them (ties are broken according to how the
            sorting procedure sorts the ratings).
            </remarks>
            <param name="ratings">the dataset</param>
            <param name="num_test_ratings_per_user">the number of test ratings (per user)</param>
        </member>
        <member name="T:MyMediaLite.Data.Extensions">
            <summary>Extension methods for dataset statistics</summary>
        </member>
        <member name="M:MyMediaLite.Data.Extensions.Statistics(MyMediaLite.Data.IRatings,MyMediaLite.Data.IRatings,MyMediaLite.DataType.IBooleanMatrix,MyMediaLite.DataType.IBooleanMatrix,System.Boolean)">
            <summary>Display dataset statistics</summary>
            <param name="train">the training data</param>
            <param name="test">the test data</param>
            <param name="user_attributes">the user attributes</param>
            <param name="item_attributes">the item attributes</param>
            <param name="display_overlap">if set true, display the user/item overlap between train and test</param>
        </member>
        <member name="M:MyMediaLite.Data.Extensions.Statistics(MyMediaLite.Data.IPosOnlyFeedback,MyMediaLite.Data.IPosOnlyFeedback,MyMediaLite.DataType.IBooleanMatrix,MyMediaLite.DataType.IBooleanMatrix)">
            <summary>Display data statistics for item recommendation datasets</summary>
            <param name="training_data">the training dataset</param>
            <param name="test_data">the test dataset</param>
            <param name="user_attributes">the user attributes</param>
            <param name="item_attributes">the item attributes</param>
        </member>
        <member name="M:MyMediaLite.Data.Extensions.Statistics(MyMediaLite.DataType.IBooleanMatrix,MyMediaLite.DataType.IBooleanMatrix)">
            <summary>Display statistics for user and item attributes</summary>
            <param name="user_attributes">the user attributes</param>
            <param name="item_attributes">the item attributes</param>
        </member>
        <member name="T:MyMediaLite.Data.KDDCupItems">
            <summary>Represents KDD Cup 2011 items like album, track, artist, or genre</summary>
        </member>
        <member name="M:MyMediaLite.Data.KDDCupItems.#ctor(System.Int32)">
            <summary>Create item information object</summary>
            <param name="size">the number of items</param>
        </member>
        <member name="M:MyMediaLite.Data.KDDCupItems.Insert(System.Int32,MyMediaLite.Taxonomy.KDDCupItemType,System.Int32,System.Int32,System.Collections.Generic.IList{System.Int32})">
            <summary>Insert information about an entry to the data structure</summary>
            <param name="item_id">the item ID</param>
            <param name="type">the <see cref="T:MyMediaLite.Taxonomy.KDDCupItemType"/> of the item</param>
            <param name="album">the album ID if the item is a track or album, -1 otherwise</param>
            <param name="artist">the artist ID if the item is a track, an album, or an artist, -1 otherwise</param>
            <param name="genres">a (possibly empty or null) list of genre IDs</param>
        </member>
        <member name="M:MyMediaLite.Data.KDDCupItems.GetType(System.Int32)">
            <summary>Get the type of a given item</summary>
            <param name="item_id">the item ID</param>
            <returns>the <see cref="T:MyMediaLite.Taxonomy.KDDCupItemType"/> of the given item</returns>
        </member>
        <member name="M:MyMediaLite.Data.KDDCupItems.GetGenres(System.Int32)">
            <summary>Get a list of genres for a given item</summary>
            <param name="item_id">the item ID</param>
            <returns>a list of genres</returns>
        </member>
        <member name="M:MyMediaLite.Data.KDDCupItems.GetArtist(System.Int32)">
            <summary>Get the artist for a given item</summary>
            <param name="item_id">the item ID</param>
            <returns>the artist ID</returns>
        </member>
        <member name="M:MyMediaLite.Data.KDDCupItems.GetAlbum(System.Int32)">
            <summary>Get the album for a given item</summary>
            <param name="item_id">the item ID</param>
            <returns>the album ID</returns>
        </member>
        <member name="M:MyMediaLite.Data.KDDCupItems.HasAlbum(System.Int32)">
            <summary>Check whether the given item is associated with an album</summary>
            <param name="item_id">the item ID</param>
            <returns>true if it is associated with an album, false otherwise</returns>
        </member>
        <member name="M:MyMediaLite.Data.KDDCupItems.HasArtist(System.Int32)">
            <summary>Check whether the given item is associated with an artist</summary>
            <param name="item_id">the item ID</param>
            <returns>true if it is associated with an artist, false otherwise</returns>
        </member>
        <member name="M:MyMediaLite.Data.KDDCupItems.HasGenres(System.Int32)">
            <summary>Check whether the given item is associated with one or more genres</summary>
            <param name="item_id">the item ID</param>
            <returns>true if it is associated with at least one genre, false otherwise</returns>
        </member>
        <member name="M:MyMediaLite.Data.KDDCupItems.ToString">
            <summary>Gives a textual summary of the item data</summary>
        </member>
        <member name="T:MyMediaLite.Data.RatingScale">
            <summary>
            Class containing information about the rating scale of a data set:
            valid rating values, minimum/maximum rating.
            </summary>
        </member>
        <member name="P:MyMediaLite.Data.RatingScale.Max">
            <summary>the maximum rating in the dataset</summary>
        </member>
        <member name="P:MyMediaLite.Data.RatingScale.Min">
            <summary>the minimum rating in the dataset</summary>
        </member>
        <member name="P:MyMediaLite.Data.RatingScale.Levels">
            <summary>list of rating levels (actual values)</summary>
        </member>
        <member name="P:MyMediaLite.Data.RatingScale.LevelID">
            <summary>mapping from level values to IDs</summary>
        </member>
        <member name="M:MyMediaLite.Data.RatingScale.#ctor(System.Collections.Generic.List{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:MyMediaLite.Data.RatingScale"/> class.
            </summary>
            <param name='levels'>a list of observed levels</param>
        </member>
        <member name="M:MyMediaLite.Data.RatingScale.#ctor(System.Collections.Generic.IList{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:MyMediaLite.Data.RatingScale"/> class,
            given a list of float values
            </summary>
            <param name='rating_values'>the ratings dataset</param>
        </member>
        <member name="M:MyMediaLite.Data.RatingScale.#ctor(System.Collections.Generic.IList{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:MyMediaLite.Data.RatingScale"/> class,
            given a list of byte values
            </summary>
            <param name='rating_values'>the ratings dataset</param>
        </member>
        <member name="M:MyMediaLite.Data.RatingScale.#ctor(MyMediaLite.Data.RatingScale,MyMediaLite.Data.RatingScale)">
            <summary>
            Initializes a new instance of the <see cref="T:MyMediaLite.Data.RatingScale"/> class,
            given two existing instances.
            </summary>
            <param name='scale1'>the first scale object</param>
            <param name='scale2'>the second scale object</param>
        </member>
        <member name="M:MyMediaLite.Data.RatingScale.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            
        </member>
        <member name="M:MyMediaLite.Data.RatingScale.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            
        </member>
        <member name="T:MyMediaLite.Data.IMapping">
            <summary>Interface to map external entity IDs to internal ones to ensure that there are no gaps in the numbering</summary>
        </member>
        <member name="P:MyMediaLite.Data.IMapping.OriginalIDs">
            <summary>all original (external) entity IDs</summary>
            <value>all original (external) entity IDs</value>
        </member>
        <member name="P:MyMediaLite.Data.IMapping.InternalIDs">
            <summary>all internal entity IDs</summary>
            <value>all internal entity IDs</value>
        </member>
        <member name="M:MyMediaLite.Data.IMapping.ToOriginalID(System.Int32)">
            <summary>Get original (external) ID of a given entity, if the given internal ID is unknown, throw an exception.</summary>
            <param name="internal_id">the internal ID of the entity</param>
            <returns>the original (external) ID of the entitiy</returns>
        </member>
        <member name="M:MyMediaLite.Data.IMapping.ToInternalID(System.String)">
            <summary>Get internal ID of a given entity. If the given external ID is unknown, create a new internal ID for it and store the mapping.</summary>
            <param name="original_id">the original (external) ID of the entity</param>
            <returns>the internal ID of the entitiy</returns>
        </member>
        <member name="M:MyMediaLite.Data.IMapping.ToOriginalID(System.Collections.Generic.IList{System.Int32})">
            <summary>Get original (external) IDs of a list of given entities</summary>
            <param name="internal_id_list">the list of internal IDs</param>
            <returns>the list of original (external) IDs</returns>
        </member>
        <member name="M:MyMediaLite.Data.IMapping.ToInternalID(System.Collections.Generic.IList{System.String})">
            <summary>Get internal IDs of a list of given entities</summary>
            <param name="original_id_list">the list of original (external) IDs</param>
            <returns>a list of internal IDs</returns>
        </member>
        <member name="P:MyMediaLite.Data.IMapping.NumberOfEntities">
            <summary>the number of entities</summary>
        </member>
        <member name="T:MyMediaLite.Data.Mapping">
            <summary>Class to map external entity IDs to internal ones to ensure that there are no gaps in the numbering</summary>
        </member>
        <member name="F:MyMediaLite.Data.Mapping.original_to_internal">
            <summary>Contains the mapping from the original (external) IDs to the internal IDs</summary>
            <remarks>
            Never, to repeat NEVER, directly delete entries from this dictionary!
            </remarks>
        </member>
        <member name="F:MyMediaLite.Data.Mapping.internal_to_original">
            <summary>Contains the mapping from the internal IDs to the original (external) IDs</summary>
            <remarks>
            Never, to repeat NEVER, directly delete entries from this list!
            </remarks>
        </member>
        <member name="P:MyMediaLite.Data.Mapping.OriginalIDs">
            <summary>all original (external) entity IDs</summary>
            <value>all original (external) entity IDs</value>
        </member>
        <member name="P:MyMediaLite.Data.Mapping.InternalIDs">
            
        </member>
        <member name="P:MyMediaLite.Data.Mapping.NumberOfEntities">
            
        </member>
        <member name="M:MyMediaLite.Data.Mapping.#ctor">
            <summary>default constructor</summary>
        </member>
        <member name="M:MyMediaLite.Data.Mapping.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            
        </member>
        <member name="M:MyMediaLite.Data.Mapping.ToOriginalID(System.Int32)">
            <summary>Get original (external) ID of a given entity, if the given internal ID is unknown, throw an exception.</summary>
            <param name="internal_id">the internal ID of the entity</param>
            <returns>the original (external) ID of the entitiy</returns>
        </member>
        <member name="M:MyMediaLite.Data.Mapping.ToInternalID(System.String)">
            <summary>Get internal ID of a given entity. If the given external ID is unknown, create a new internal ID for it and store the mapping.</summary>
            <param name="original_id">the original (external) ID of the entity</param>
            <returns>the internal ID of the entitiy</returns>
        </member>
        <member name="M:MyMediaLite.Data.Mapping.ToOriginalID(System.Collections.Generic.IList{System.Int32})">
            <summary>Get original (external) IDs of a list of given entities</summary>
            <param name="internal_id_list">the list of internal IDs</param>
            <returns>the list of original (external) IDs</returns>
        </member>
        <member name="M:MyMediaLite.Data.Mapping.ToInternalID(System.Collections.Generic.IList{System.String})">
            <summary>Get internal IDs of a list of given entities</summary>
            <param name="original_id_list">the list of original (external) IDs</param>
            <returns>a list of internal IDs</returns>
        </member>
        <member name="M:MyMediaLite.Data.Mapping.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            
        </member>
        <member name="T:MyMediaLite.Ensemble.Ensemble">
            <summary>Abtract class for combining several prediction methods</summary>
        </member>
        <member name="F:MyMediaLite.Ensemble.Ensemble.recommenders">
            <summary>list of recommenders</summary>
        </member>
        <member name="M:MyMediaLite.Ensemble.Ensemble.Clone">
            <summary>create a shallow copy of the object</summary>
        </member>
        <member name="M:MyMediaLite.Ensemble.Ensemble.Recommend(System.Int32,System.Int32,System.Collections.Generic.ICollection{System.Int32},System.Collections.Generic.ICollection{System.Int32})">
            
        </member>
        <member name="P:MyMediaLite.Ensemble.Ensemble.MaxRating">
            <summary>The max rating value</summary>
            <value>The max rating value</value>
        </member>
        <member name="P:MyMediaLite.Ensemble.Ensemble.MinRating">
            <summary>The min rating value</summary>
            <value>The min rating value</value>
        </member>
        <member name="M:MyMediaLite.Ensemble.Ensemble.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.Ensemble.Ensemble.CanPredict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.Ensemble.Ensemble.SaveModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.Ensemble.Ensemble.LoadModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.Ensemble.Ensemble.Train">
            
        </member>
        <member name="T:MyMediaLite.Ensemble.WeightedEnsemble">
            <summary>Combining several predictors with a weighted ensemble</summary>
            <remarks>
            This recommender does NOT support incremental updates.
            </remarks>
        </member>
        <member name="F:MyMediaLite.Ensemble.WeightedEnsemble.weights">
            <summary>List of component weights</summary>
        </member>
        <member name="F:MyMediaLite.Ensemble.WeightedEnsemble.weight_sum">
            <summary>Sum of the component weights</summary>
        </member>
        <member name="M:MyMediaLite.Ensemble.WeightedEnsemble.Train">
            
        </member>
        <member name="M:MyMediaLite.Ensemble.WeightedEnsemble.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.Ensemble.WeightedEnsemble.Recommend(System.Int32,System.Int32,System.Collections.Generic.ICollection{System.Int32},System.Collections.Generic.ICollection{System.Int32})">
            
        </member>
        <member name="M:MyMediaLite.Ensemble.WeightedEnsemble.SaveModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.Ensemble.WeightedEnsemble.LoadModel(System.String)">
            
        </member>
        <member name="T:MyMediaLite.DataType.CombinedList`1">
            <summary>Combines two List objects</summary>
        </member>
        <member name="M:MyMediaLite.DataType.CombinedList`1.#ctor(System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`0})">
            <summary>Create a new CombinedList object</summary>
            <param name="list1">first list</param>
            <param name="list2">second list</param>
        </member>
        <member name="P:MyMediaLite.DataType.CombinedList`1.Item(System.Int32)">
            
        </member>
        <member name="P:MyMediaLite.DataType.CombinedList`1.Count">
            
        </member>
        <member name="P:MyMediaLite.DataType.CombinedList`1.IsReadOnly">
            
        </member>
        <member name="M:MyMediaLite.DataType.CombinedList`1.Add(`0)">
            
        </member>
        <member name="M:MyMediaLite.DataType.CombinedList`1.Clear">
            
        </member>
        <member name="M:MyMediaLite.DataType.CombinedList`1.Contains(`0)">
            
        </member>
        <member name="M:MyMediaLite.DataType.CombinedList`1.CopyTo(`0[],System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.DataType.CombinedList`1.Insert(System.Int32,`0)">
            
        </member>
        <member name="M:MyMediaLite.DataType.CombinedList`1.IndexOf(`0)">
            
        </member>
        <member name="M:MyMediaLite.DataType.CombinedList`1.Remove(`0)">
            
        </member>
        <member name="M:MyMediaLite.DataType.CombinedList`1.RemoveAt(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.DataType.CombinedList`1.System#Collections#IEnumerable#GetEnumerator">
            
        </member>
        <member name="M:MyMediaLite.DataType.CombinedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            
        </member>
        <member name="T:MyMediaLite.DataType.IBooleanMatrix">
            <summary>Interface for boolean matrices</summary>
        </member>
        <member name="P:MyMediaLite.DataType.IBooleanMatrix.Item(System.Int32)">
            <summary>Indexer to access the rows of the matrix</summary>
            <param name="x">the row ID</param>
        </member>
        <member name="P:MyMediaLite.DataType.IBooleanMatrix.NumberOfEntries">
            <summary>The number of (true) entries</summary>
        </member>
        <member name="P:MyMediaLite.DataType.IBooleanMatrix.NonEmptyRowIDs">
            <summary>The IDs of the non-empty rows in the matrix (the ones that contain at least one true entry)</summary>
        </member>
        <member name="P:MyMediaLite.DataType.IBooleanMatrix.NonEmptyColumnIDs">
            <summary>The IDs of the non-empty columns in the matrix (the ones that contain at least one true entry)</summary>
        </member>
        <member name="M:MyMediaLite.DataType.IBooleanMatrix.GetEntriesByRow(System.Int32)">
            <summary>Get all true entries (column IDs) of a row</summary>
            <param name="row_id">the row ID</param>
            <returns>a list of column IDs</returns>
        </member>
        <member name="M:MyMediaLite.DataType.IBooleanMatrix.NumEntriesByRow(System.Int32)">
            <summary>Get all the number of entries in a row</summary>
            <param name="row_id">the row ID</param>
            <returns>the number of entries in row row_id</returns>
        </member>
        <member name="M:MyMediaLite.DataType.IBooleanMatrix.GetEntriesByColumn(System.Int32)">
            <summary>Get all true entries (row IDs) of a column</summary>
            <param name="column_id">the column ID</param>
            <returns>a list of row IDs</returns>
        </member>
        <member name="M:MyMediaLite.DataType.IBooleanMatrix.NumEntriesByColumn(System.Int32)">
            <summary>Get all the number of entries in a column</summary>
            <param name="column_id">the column ID</param>
            <returns>the number of entries in column column_id</returns>
        </member>
        <member name="M:MyMediaLite.DataType.IBooleanMatrix.Overlap(MyMediaLite.DataType.IBooleanMatrix)">
            <summary>Get the overlap of two matrices, i.e. the number of true entries where they agree</summary>
            <param name="s">the <see cref="T:MyMediaLite.DataType.IBooleanMatrix"/> to compare to</param>
            <returns>the number of entries that are true in both matrices</returns>
        </member>
        <member name="T:MyMediaLite.DataType.IMatrix`1">
            <summary>Generic interface for matrix data types</summary>
        </member>
        <member name="P:MyMediaLite.DataType.IMatrix`1.Item(System.Int32,System.Int32)">
            <summary>The value at (i,j)</summary>
            <value>The value at (i,j)</value>
            <param name="x">the row ID</param>
            <param name="y">the column ID</param>
        </member>
        <member name="P:MyMediaLite.DataType.IMatrix`1.NumberOfRows">
            <summary>The number of rows of the matrix</summary>
            <value>The number of rows of the matrix</value>
        </member>
        <member name="P:MyMediaLite.DataType.IMatrix`1.NumberOfColumns">
            <summary>The number of columns of the matrix</summary>
            <value>The number of columns of the matrix</value>
        </member>
        <member name="P:MyMediaLite.DataType.IMatrix`1.IsSymmetric">
            <summary>True if the matrix is stored in a symmetric manner, false otherwise</summary>
            <remarks>Also true for skew symmetric matrices that exploit this property in order to save memory</remarks>
        </member>
        <member name="M:MyMediaLite.DataType.IMatrix`1.Transpose">
            <summary>Get the transpose of the matrix, i.e. a matrix where rows and columns are interchanged</summary>
            <returns>the transpose of the matrix (copy)</returns>
        </member>
        <member name="M:MyMediaLite.DataType.IMatrix`1.CreateMatrix(System.Int32,System.Int32)">
            <summary>Create a matrix with a given number of rows and columns</summary>
            <param name="num_rows">the number of rows</param>
            <param name="num_columns">the number of columns</param>
            <returns>A matrix with num_rows rows and num_column columns</returns>
        </member>
        <member name="M:MyMediaLite.DataType.IMatrix`1.Resize(System.Int32,System.Int32)">
            <summary>Grows or shrinks the matrix to the requested size, if necessary</summary>
            <remarks>
            The new entries are filled with zeros.
            Obsolete entries are removed.
            </remarks>
            <param name="num_rows">the number of rows</param>
            <param name="num_cols">the number of columns</param>
        </member>
        <member name="T:MyMediaLite.DataType.ListProxy`1">
            <summary>Proxy class that allows access to selected elements of an underlying list data structure</summary>
        </member>
        <member name="M:MyMediaLite.DataType.ListProxy`1.#ctor(System.Collections.Generic.IList{`0},System.Collections.Generic.IList{System.Int32})">
            <summary>Create a new ListProxy object</summary>
            <param name="list">the list to proxy</param>
            <param name="indices">an index list pointing to entries in the list</param>
        </member>
        <member name="P:MyMediaLite.DataType.ListProxy`1.Item(System.Int32)">
            
        </member>
        <member name="P:MyMediaLite.DataType.ListProxy`1.Count">
            
        </member>
        <member name="P:MyMediaLite.DataType.ListProxy`1.IsReadOnly">
            
        </member>
        <member name="P:MyMediaLite.DataType.ListProxy`1.IsFixedSize">
            
        </member>
        <member name="M:MyMediaLite.DataType.ListProxy`1.Add(`0)">
            
        </member>
        <member name="M:MyMediaLite.DataType.ListProxy`1.Clear">
            
        </member>
        <member name="M:MyMediaLite.DataType.ListProxy`1.Contains(`0)">
            
        </member>
        <member name="M:MyMediaLite.DataType.ListProxy`1.CopyTo(`0[],System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.DataType.ListProxy`1.Insert(System.Int32,`0)">
            
        </member>
        <member name="M:MyMediaLite.DataType.ListProxy`1.IndexOf(`0)">
            
        </member>
        <member name="M:MyMediaLite.DataType.ListProxy`1.Remove(`0)">
            
        </member>
        <member name="M:MyMediaLite.DataType.ListProxy`1.RemoveAt(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.DataType.ListProxy`1.System#Collections#IEnumerable#GetEnumerator">
            
        </member>
        <member name="M:MyMediaLite.DataType.ListProxy`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            
        </member>
        <member name="T:MyMediaLite.DataType.Matrix`1">
            <summary>Class for storing dense matrices</summary>
            <remarks>
            The data is stored in row-major mode.
            Indexes are zero-based.
            </remarks>
            <typeparam name="T">the type of the matrix entries</typeparam>
        </member>
        <member name="F:MyMediaLite.DataType.Matrix`1.data">
            <summary>Data array: data is stored in columns.</summary>
        </member>
        <member name="F:MyMediaLite.DataType.Matrix`1.dim1">
            <summary>Dimension 1, the number of rows</summary>
        </member>
        <member name="F:MyMediaLite.DataType.Matrix`1.dim2">
            <summary>Dimension 2, the number of columns</summary>
        </member>
        <member name="P:MyMediaLite.DataType.Matrix`1.IsSymmetric">
            
        </member>
        <member name="P:MyMediaLite.DataType.Matrix`1.NumberOfRows">
            
        </member>
        <member name="P:MyMediaLite.DataType.Matrix`1.NumberOfColumns">
            
        </member>
        <member name="M:MyMediaLite.DataType.Matrix`1.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance of the Matrix class</summary>
            <param name="dim1">the number of rows</param>
            <param name="dim2">the number of columns</param>
        </member>
        <member name="M:MyMediaLite.DataType.Matrix`1.#ctor(System.Int32,System.UInt32)">
            <summary>Initializes a new instance of the Matrix class</summary>
            <param name="dim1">the number of rows</param>
            <param name="dim2">the number of columns</param>
        </member>
        <member name="M:MyMediaLite.DataType.Matrix`1.#ctor(System.UInt32,System.Int32)">
            <summary>Initializes a new instance of the Matrix class</summary>
            <param name="dim1">the number of rows</param>
            <param name="dim2">the number of columns</param>
        </member>
        <member name="M:MyMediaLite.DataType.Matrix`1.#ctor(System.UInt32,System.UInt32)">
            <summary>Initializes a new instance of the Matrix class</summary>
            <param name="dim1">the number of rows</param>
            <param name="dim2">the number of columns</param>
        </member>
        <member name="M:MyMediaLite.DataType.Matrix`1.#ctor(MyMediaLite.DataType.Matrix{`0})">
            <summary>Copy constructor. Creates a deep copy of the given matrix.</summary>
            <param name="matrix">the matrix to be copied</param>
        </member>
        <member name="M:MyMediaLite.DataType.Matrix`1.#ctor(System.Collections.Generic.IList{System.Collections.Generic.IList{`0}})">
            <summary>Constructor that takes a list of lists to initialize the matrix</summary>
            <param name="data">a list of lists of T</param>
        </member>
        <member name="M:MyMediaLite.DataType.Matrix`1.CreateMatrix(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.DataType.Matrix`1.Transpose">
            
        </member>
        <member name="P:MyMediaLite.DataType.Matrix`1.Item(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.DataType.Matrix`1.GetRow(System.Int32)">
            <summary>Returns a copy of the i-th row of the matrix</summary>
            <param name="i">the row ID</param>
            <returns>a list of T containing the row data</returns>
        </member>
        <member name="M:MyMediaLite.DataType.Matrix`1.GetColumn(System.Int32)">
            <summary>Returns a copy of the j-th column of the matrix</summary>
            <param name="j">the column ID</param>
            <returns>a list of T containing the column data</returns>
        </member>
        <member name="M:MyMediaLite.DataType.Matrix`1.SetRow(System.Int32,System.Collections.Generic.IList{`0})">
            <summary>Sets the values of the i-th row to the values in a given array</summary>
            <param name="i">the row ID</param>
            <param name="row">a list of T of length dim1</param>
        </member>
        <member name="M:MyMediaLite.DataType.Matrix`1.SetColumn(System.Int32,System.Collections.Generic.IList{`0})">
            <summary>Sets the values of the j-th column to the values in a given array</summary>
            <param name="j">the column ID</param>
            <param name="column">a list of T of length dim2</param>
        </member>
        <member name="M:MyMediaLite.DataType.Matrix`1.Init(`0)">
            <summary>Init the matrix with a default value</summary>
            <param name="d">the default value</param>
        </member>
        <member name="M:MyMediaLite.DataType.Matrix`1.AddRows(System.Int32)">
            <summary>Enlarges the matrix to num_rows rows</summary>
            <remarks>
            Do nothing if num_rows is less than dim1.
            The new entries are filled with zeros.
            </remarks>
            <param name="num_rows">the minimum number of rows</param>
        </member>
        <member name="M:MyMediaLite.DataType.Matrix`1.Resize(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.DataType.Matrix`1.SetRowToOneValue(System.Int32,`0)">
            <summary>Sets an entire row to a specified value</summary>
            <param name="v">the value to be used</param>
            <param name="i">the row ID</param>
        </member>
        <member name="M:MyMediaLite.DataType.Matrix`1.SetColumnToOneValue(System.Int32,`0)">
            <summary>
            Sets an entire column to a specified value
            </summary>
            <param name="v">the value to be used</param>
            <param name="j">the column ID</param>
        </member>
        <member name="T:MyMediaLite.DataType.SkewSymmetricSparseMatrix">
            <summary>a skew symmetric (anti-symmetric) sparse matrix; consumes less memory</summary>
        </member>
        <member name="P:MyMediaLite.DataType.SkewSymmetricSparseMatrix.Item(System.Int32,System.Int32)">
            <summary>Access the elements of the sparse matrix</summary>
            <param name="x">the row ID</param>
            <param name="y">the column ID</param>
        </member>
        <member name="P:MyMediaLite.DataType.SkewSymmetricSparseMatrix.IsSymmetric">
            <summary>Only true if all entries are zero, except for the diagonal</summary>
        </member>
        <member name="M:MyMediaLite.DataType.SkewSymmetricSparseMatrix.#ctor(System.Int32)">
            <summary>Create a skew symmetric sparse matrix with a given dimension</summary>
            <param name="dimension">the dimension (number of rows/columns)</param>
        </member>
        <member name="M:MyMediaLite.DataType.SkewSymmetricSparseMatrix.CreateMatrix(System.Int32,System.Int32)">
            
        </member>
        <member name="T:MyMediaLite.DataType.SparseBooleanMatrix">
            <summary>Sparse representation of a boolean matrix, using HashSets</summary>
            <remarks>
            Fast row-wise access is possible.
            Indexes are zero-based.
            </remarks>
        </member>
        <member name="F:MyMediaLite.DataType.SparseBooleanMatrix.row_list">
            <summary>internal data representation: list of sets representing the rows</summary>
        </member>
        <member name="P:MyMediaLite.DataType.SparseBooleanMatrix.Item(System.Int32,System.Int32)">
            <summary>Indexer to access the elements of the matrix</summary>
            <param name="x">the row ID</param>
            <param name="y">the column ID</param>
        </member>
        <member name="P:MyMediaLite.DataType.SparseBooleanMatrix.Item(System.Int32)">
            
        </member>
        <member name="P:MyMediaLite.DataType.SparseBooleanMatrix.IsSymmetric">
            
        </member>
        <member name="M:MyMediaLite.DataType.SparseBooleanMatrix.CreateMatrix(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.DataType.SparseBooleanMatrix.GetEntriesByRow(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.DataType.SparseBooleanMatrix.NumEntriesByRow(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.DataType.SparseBooleanMatrix.GetEntriesByColumn(System.Int32)">
            <remarks>Takes O(N) worst-case time, where N is the number of rows, if the internal hash table can be queried in constant time.</remarks>
        </member>
        <member name="M:MyMediaLite.DataType.SparseBooleanMatrix.NumEntriesByColumn(System.Int32)">
            
        </member>
        <member name="P:MyMediaLite.DataType.SparseBooleanMatrix.NonEmptyRowIDs">
            
        </member>
        <member name="P:MyMediaLite.DataType.SparseBooleanMatrix.NonEmptyColumnIDs">
            
             <remarks>iterates over the complete data structure</remarks>
        </member>
        <member name="P:MyMediaLite.DataType.SparseBooleanMatrix.NumberOfRows">
            <summary>The number of rows in the matrix</summary>
            <value>The number of rows in the matrix</value>
        </member>
        <member name="P:MyMediaLite.DataType.SparseBooleanMatrix.NumberOfColumns">
            <summary>The number of columns in the matrix</summary>
            <value>The number of columns in the matrix</value>
        </member>
        <member name="P:MyMediaLite.DataType.SparseBooleanMatrix.NumberOfEntries">
            
        </member>
        <member name="M:MyMediaLite.DataType.SparseBooleanMatrix.Resize(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.DataType.SparseBooleanMatrix.Transpose">
            <summary>Get the transpose of the matrix, i.e. a matrix where rows and columns are interchanged</summary>
            <returns>the transpose of the matrix (copy)</returns>
        </member>
        <member name="M:MyMediaLite.DataType.SparseBooleanMatrix.Overlap(MyMediaLite.DataType.IBooleanMatrix)">
            <summary>Get the overlap of two matrices, i.e. the number of true entries where they agree</summary>
            <param name="s">the <see cref="T:MyMediaLite.DataType.SparseBooleanMatrix"/> to compare to</param>
            <returns>the number of entries that are true in both matrices</returns>
        </member>
        <member name="T:MyMediaLite.DataType.SparseMatrix`1">
            <summary>Class for storing sparse matrices</summary>
            <remarks>
            The data is stored in row-major mode.
            Indexes are zero-based.
            Access is internally done by binary search.
            </remarks>
            <typeparam name="T">the matrix element type, must have a default constructor/value</typeparam>
        </member>
        <member name="F:MyMediaLite.DataType.SparseMatrix`1.value_list">
            <summary>List of lists that stores the values of the entries</summary>
        </member>
        <member name="F:MyMediaLite.DataType.SparseMatrix`1.index_list">
            <summary>List of lists that stores the column indices of the entries</summary>
        </member>
        <member name="P:MyMediaLite.DataType.SparseMatrix`1.IsSymmetric">
            
        </member>
        <member name="P:MyMediaLite.DataType.SparseMatrix`1.NumberOfRows">
            
        </member>
        <member name="P:MyMediaLite.DataType.SparseMatrix`1.NumberOfColumns">
            
        </member>
        <member name="P:MyMediaLite.DataType.SparseMatrix`1.Item(System.Int32)">
            <summary>Get a row of the matrix</summary>
            <param name="x">the row ID</param>
        </member>
        <member name="P:MyMediaLite.DataType.SparseMatrix`1.Item(System.Int32,System.Int32)">
            <summary>Access the elements of the sparse matrix</summary>
            <param name="x">the row ID</param>
            <param name="y">the column ID</param>
        </member>
        <member name="P:MyMediaLite.DataType.SparseMatrix`1.NonEmptyEntryIDs">
            <summary>The row and column IDs of non-empty entries in the matrix</summary>
            <value>The row and column IDs of non-empty entries in the matrix</value>
        </member>
        <member name="P:MyMediaLite.DataType.SparseMatrix`1.NumberOfNonEmptyEntries">
            <summary>The number of non-empty entries in the matrix</summary>
            <value>The number of non-empty entries in the matrix</value>
        </member>
        <member name="M:MyMediaLite.DataType.SparseMatrix`1.#ctor(System.Int32,System.Int32)">
            <summary>Create a sparse matrix with a given number of rows</summary>
            <param name="num_rows">the number of rows</param>
            <param name="num_cols">the number of columns</param>
        </member>
        <member name="M:MyMediaLite.DataType.SparseMatrix`1.#ctor(MyMediaLite.DataType.SparseMatrix{`0})">
            <summary>
            Copy constructor
            </summary>
            <param name="toCopy">To copy.</param>
        </member>
        <member name="M:MyMediaLite.DataType.SparseMatrix`1.CreateMatrix(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.DataType.SparseMatrix`1.Resize(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.DataType.SparseMatrix`1.Transpose">
            
        </member>
        <member name="T:MyMediaLite.DataType.SymmetricSparseMatrix`1">
            <summary>a symmetric sparse matrix; consumes less memory</summary>
        </member>
        <member name="P:MyMediaLite.DataType.SymmetricSparseMatrix`1.Item(System.Int32)">
            <summary>
            Get a row of the matrix
            </summary>
            <param name="x">the row ID</param>
        </member>
        <member name="P:MyMediaLite.DataType.SymmetricSparseMatrix`1.Item(System.Int32,System.Int32)">
            <summary>Access the elements of the sparse matrix</summary>
            <param name="x">the row ID</param>
            <param name="y">the column ID</param>
        </member>
        <member name="P:MyMediaLite.DataType.SymmetricSparseMatrix`1.IsSymmetric">
            <summary>Always true because the data type is symmetric</summary>
            <value>Always true because the data type is symmetric</value>
        </member>
        <member name="M:MyMediaLite.DataType.SymmetricSparseMatrix`1.#ctor(System.Int32)">
            <summary>Create a symmetric sparse matrix with a given dimension</summary>
            <param name="dimension">the dimension (number of rows/columns)</param>
        </member>
        <member name="M:MyMediaLite.DataType.SymmetricSparseMatrix`1.CreateMatrix(System.Int32,System.Int32)">
            
        </member>
        <member name="P:MyMediaLite.DataType.SymmetricSparseMatrix`1.NonEmptyEntryIDs">
            
        </member>
        <member name="P:MyMediaLite.DataType.SymmetricSparseMatrix`1.NumberOfNonEmptyEntries">
            
        </member>
        <member name="M:MyMediaLite.DataType.SymmetricSparseMatrix`1.Resize(System.Int32)">
            <summary>Resize to the given size</summary>
            <param name="size">the size</param>
        </member>
        <member name="T:MyMediaLite.DataType.VectorExtensions">
            <summary>Extensions for vector-like data</summary>
        </member>
        <member name="M:MyMediaLite.DataType.VectorExtensions.ScalarProduct(System.Collections.Generic.IList{System.Single},System.Collections.Generic.IList{System.Single})">
            <summary>Compute scalar product (dot product) of two vectors</summary>
            <returns>the scalar product of the arguments</returns>
            <param name='v1'>the first vector</param>
            <param name='v2'>the second vector</param>
        </member>
        <member name="M:MyMediaLite.DataType.VectorExtensions.EuclideanNorm(System.Collections.Generic.ICollection{System.Double})">
            <summary>Compute the Euclidean norm of a collection of floats</summary>
            <param name="vector">the vector to compute the norm for</param>
            <returns>the Euclidean norm of the vector</returns>
        </member>
        <member name="M:MyMediaLite.DataType.VectorExtensions.EuclideanNorm(System.Collections.Generic.ICollection{System.Single})">
            <summary>Compute the Euclidean norm of a collection of floats</summary>
            <param name="vector">the vector to compute the norm for</param>
            <returns>the Euclidean norm of the vector</returns>
        </member>
        <member name="M:MyMediaLite.DataType.VectorExtensions.InitNormal(System.Collections.Generic.IList{System.Single},System.Double,System.Double)">
            <summary>Initialize a collection of floats with values from a normal distribution</summary>
            <param name="vector">the vector to initialize</param>
            <param name="mean">the mean of the normal distribution</param>
            <param name="stddev">the standard deviation of the normal distribution</param>
        </member>
        <member name="M:MyMediaLite.DataType.VectorExtensions.Init(System.Collections.Generic.IList{System.Single},System.Single)">
            <summary>Initialize a collection of floats with one value</summary>
            <param name="vector">the vector to initialize</param>
            <param name="val">the value to set each element to</param>
        </member>
        <member name="M:MyMediaLite.DataType.VectorExtensions.Add(System.Collections.Generic.IList{System.Single},System.Collections.Generic.IList{System.Single})">
            <summary>Add all entries of a vector to another vector</summary>
            <param name="vector">vector where vector2 is added to</param>
            <param name="vector2">vector2 is added to vector</param>
        </member>
        <member name="M:MyMediaLite.DataType.VectorExtensions.AddWithReturn(System.Collections.Generic.IList{System.Single},System.Collections.Generic.IList{System.Single})">
            <summary>
            Adds the two vectors and returns the result.
            </summary>
            <returns>The with return.</returns>
            <param name="vector">Vector.</param>
            <param name="vector2">Vector2.</param>
        </member>
        <member name="M:MyMediaLite.DataType.VectorExtensions.Multiply(System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Multiply the specified vector and scalar.
            </summary>
            <param name="vector">Vector.</param>
            <param name="scalar">Scalar.</param>
        </member>
        <member name="M:MyMediaLite.DataType.VectorExtensions.Divide(System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Divide the specified vector and scalar.
            </summary>
            <param name="vector">Vector.</param>
            <param name="scalar">Scalar.</param>
        </member>
        <member name="M:MyMediaLite.DataType.VectorExtensions.print(System.Collections.Generic.IList{System.Single})">
            <summary>
            Print the specified vector.
            </summary>
            <param name="vector">Vector.</param>
        </member>
        <member name="M:MyMediaLite.DataType.VectorExtensions.print(System.Collections.Generic.IList{System.Double})">
            <summary>
            Print the specified vector.
            </summary>
            <param name="vector">Vector.</param>
        </member>
        <member name="M:MyMediaLite.DataType.VectorExtensions.print(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Print the specified vector.
            </summary>
            <param name="vector">Vector.</param>
        </member>
        <member name="M:MyMediaLite.DataType.VectorExtensions.print(System.Collections.Generic.IList{System.DateTime})">
            <summary>
            Print the specified vector.
            </summary>
            <param name="vector">Vector.</param>
        </member>
        <member name="M:MyMediaLite.DataType.VectorExtensions.Minus(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Minus the specified vector from vector2.
            </summary>
            <param name="vector">Vector.</param>
            <param name="vector2">Vector2.</param>
        </member>
        <member name="M:MyMediaLite.DataType.VectorExtensions.MinusWithReturn(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Subtracts two vector and returns the result.
            </summary>
            <returns>The with return.</returns>
            <param name="vector">Vector.</param>
            <param name="vector2">Vector2.</param>
        </member>
        <member name="T:MyMediaLite.DataType.MatrixExtensions">
            <summary>Utilities to work with matrices</summary>
        </member>
        <member name="M:MyMediaLite.DataType.MatrixExtensions.RowInitNormal(MyMediaLite.DataType.Matrix{System.Single},System.Int32,System.Double,System.Double)">
            <summary>Initializes one row of a float matrix with normal distributed (Gaussian) noise</summary>
            <param name="matrix">the matrix to initialize</param>
            <param name="row">the row to be initialized</param>
            <param name="mean">the mean of the normal distribution drawn from</param>
            <param name="stddev">the standard deviation of the normal distribution</param>
        </member>
        <member name="M:MyMediaLite.DataType.MatrixExtensions.ColumnInitNormal(MyMediaLite.DataType.Matrix{System.Single},System.Int32,System.Double,System.Double)">
            <summary>Initializes one column of a float matrix with normal distributed (Gaussian) noise</summary>
            <param name="matrix">the matrix to initialize</param>
            <param name="mean">the mean of the normal distribution drawn from</param>
            <param name="stddev">the standard deviation of the normal distribution</param>
            <param name="column">the column to be initialized</param>
        </member>
        <member name="M:MyMediaLite.DataType.MatrixExtensions.InitNormal(MyMediaLite.DataType.Matrix{System.Single},System.Double,System.Double)">
            <summary>Initializes a float matrix with normal distributed (Gaussian) noise</summary>
            <param name="matrix">the matrix to initialize</param>
            <param name="mean">the mean of the normal distribution drawn from</param>
            <param name="stddev">the standard deviation of the normal distribution</param>
        </member>
        <member name="M:MyMediaLite.DataType.MatrixExtensions.Inc(MyMediaLite.DataType.Matrix{System.Single},System.Int32,System.Int32,System.Double)">
            <summary>Increments the specified matrix element by a double value</summary>
            <param name="matrix">the matrix</param>
            <param name="i">the row</param>
            <param name="j">the column</param>
            <param name="v">the value</param>
        </member>
        <member name="M:MyMediaLite.DataType.MatrixExtensions.Inc(MyMediaLite.DataType.Matrix{System.Single},MyMediaLite.DataType.Matrix{System.Single})">
            <summary>Increment the elements in one matrix by the ones in another</summary>
            <param name="matrix1">the matrix to be incremented</param>
            <param name="matrix2">the other matrix</param>
        </member>
        <member name="M:MyMediaLite.DataType.MatrixExtensions.Inc(MyMediaLite.DataType.Matrix{System.Int32},System.Int32,System.Int32)">
            <summary>Increments the specified matrix element by 1</summary>
            <param name="matrix">the matrix</param>
            <param name="i">the row</param>
            <param name="j">the column</param>
        </member>
        <member name="M:MyMediaLite.DataType.MatrixExtensions.Inc(MyMediaLite.DataType.Matrix{System.Single},System.Single)">
            <summary>Increment the seach matrix element by a given value</summary>
            <param name="matrix">the matrix</param>
            <param name="v">the value to increment with</param>
        </member>
        <member name="M:MyMediaLite.DataType.MatrixExtensions.MultiplyColumn(MyMediaLite.DataType.Matrix{System.Single},System.Int32,System.Single)">
            <summary>Multiplies one column of a matrix with a scalar</summary>
            <param name='matrix'>the matrix</param>
            <param name='j'>the column ID</param>
            <param name='scalar'>the scalar value to multiply with</param>
        </member>
        <member name="M:MyMediaLite.DataType.MatrixExtensions.SumOfRows(MyMediaLite.DataType.Matrix{System.Single},System.Collections.Generic.ICollection{System.Int32})">
            <summary>Sum up a given number of rows of a matrix</summary>
            <returns>The vector representing the sum of the given rows</returns>
            <param name='matrix'>the matrix</param>
            <param name='row_ids'>a collection of row IDs</param>
        </member>
        <member name="M:MyMediaLite.DataType.MatrixExtensions.ColumnAverage(MyMediaLite.DataType.Matrix{System.Single},System.Int32)">
            <summary>Compute the average value of the entries in a column of a matrix</summary>
            <param name="matrix">the matrix</param>
            <param name="col">the column ID</param>
            <returns>the average</returns>
        </member>
        <member name="M:MyMediaLite.DataType.MatrixExtensions.Multiply(MyMediaLite.DataType.Matrix{System.Single},System.Single)">
            <summary>Multiply all entries of a matrix with a scalar</summary>
            <param name="matrix">the matrix</param>
            <param name="f">the number to multiply with</param>
        </member>
        <member name="M:MyMediaLite.DataType.MatrixExtensions.FrobeniusNorm(MyMediaLite.DataType.Matrix{System.Single})">
            <summary>Compute the Frobenius norm (square root of the sum of squared entries) of a matrix</summary>
            <remarks>
            See http://en.wikipedia.org/wiki/Matrix_norm
            </remarks>
            <param name="matrix">the matrix</param>
            <returns>the Frobenius norm of the matrix</returns>
        </member>
        <member name="M:MyMediaLite.DataType.MatrixExtensions.RowScalarProduct(MyMediaLite.DataType.Matrix{System.Single},System.Int32,System.Collections.Generic.IList{System.Single})">
            <summary>Compute the scalar product between a vector and a row of the matrix</summary>
            <param name="matrix">the matrix</param>
            <param name="i">the row ID</param>
            <param name="vector">the numeric vector</param>
            <returns>the scalar product of row i and the vector</returns>
        </member>
        <member name="M:MyMediaLite.DataType.MatrixExtensions.RowScalarProduct(MyMediaLite.DataType.Matrix{System.Single},System.Int32,System.Collections.Generic.IList{System.Double})">
            <summary>Compute the scalar product between a vector and a row of the matrix</summary>
            <param name="matrix">the matrix</param>
            <param name="i">the row ID</param>
            <param name="vector">the numeric vector</param>
            <returns>the scalar product of row i and the vector</returns>
        </member>
        <member name="M:MyMediaLite.DataType.MatrixExtensions.RowScalarProduct(MyMediaLite.DataType.Matrix{System.Single},System.Int32,MyMediaLite.DataType.Matrix{System.Single},System.Int32)">
            <summary>Compute the scalar product between two rows of two matrices</summary>
            <param name="matrix1">the first matrix</param>
            <param name="i">the first row ID</param>
            <param name="matrix2">the second matrix</param>
            <param name="j">the second row ID</param>
            <returns>the scalar product of row i of matrix1 and row j of matrix2</returns>
        </member>
        <member name="M:MyMediaLite.DataType.MatrixExtensions.RowDifference(MyMediaLite.DataType.Matrix{System.Single},System.Int32,MyMediaLite.DataType.Matrix{System.Single},System.Int32)">
            <summary>Compute the difference vector between two rows of two matrices</summary>
            <param name="matrix1">the first matrix</param>
            <param name="i">the first row ID</param>
            <param name="matrix2">the second matrix</param>
            <param name="j">the second row ID</param>
            <returns>the difference vector of row i of matrix1 and row j of matrix2</returns>
        </member>
        <member name="M:MyMediaLite.DataType.MatrixExtensions.RowScalarProductWithRowDifference(MyMediaLite.DataType.Matrix{System.Single},System.Int32,MyMediaLite.DataType.Matrix{System.Single},System.Int32,MyMediaLite.DataType.Matrix{System.Single},System.Int32)">
            <summary>Compute the scalar product of a matrix row with the difference vector of two other matrix rows</summary>
            <param name="matrix1">the first matrix</param>
            <param name="i">the first row ID</param>
            <param name="matrix2">the second matrix</param>
            <param name="j">the second row ID</param>
            <param name="matrix3">the third matrix</param>
            <param name="k">the third row ID</param>///
            <returns>see summary</returns>
        </member>
        <member name="M:MyMediaLite.DataType.MatrixExtensions.Max(MyMediaLite.DataType.Matrix{System.Int32})">
            <summary>return the maximum value contained in a matrix</summary>
            <param name='m'>the matrix</param>
        </member>
        <member name="M:MyMediaLite.DataType.MatrixExtensions.Max(MyMediaLite.DataType.Matrix{System.Single})">
            <summary>return the maximum value contained in a matrix</summary>
            <param name='m'>the matrix</param>
        </member>
        <member name="T:MyMediaLite.DataType.SparseMatrixExtensions">
            <summary>Utilities to work with matrices</summary>
        </member>
        <member name="M:MyMediaLite.DataType.SparseMatrixExtensions.Max(MyMediaLite.DataType.SparseMatrix{System.Int32})">
            <summary>return the maximum value contained in a matrix</summary>
            <param name='m'>the matrix</param>
        </member>
        <member name="M:MyMediaLite.DataType.SparseMatrixExtensions.Max(MyMediaLite.DataType.SparseMatrix{System.Single})">
            <summary>return the maximum value contained in a matrix</summary>
            <param name='m'>the matrix</param>
        </member>
        <member name="M:MyMediaLite.DataType.SparseMatrixExtensions.FrobeniusNorm(MyMediaLite.DataType.SparseMatrix{System.Single})">
            <summary>Compute the Frobenius norm (square root of the sum of squared entries) of a matrix</summary>
            <remarks>
            See http://en.wikipedia.org/wiki/Matrix_norm
            </remarks>
            <param name="matrix">the matrix</param>
            <returns>the Frobenius norm of the matrix</returns>
        </member>
        <member name="M:MyMediaLite.DataType.SparseMatrixExtensions.print(MyMediaLite.DataType.SparseMatrix{System.Single})">
            <summary>
            Print the specified matrix to console.
            </summary>
            <param name="matrix">Matrix.</param>
        </member>
        <member name="T:MyMediaLite.DataType.SymmetricMatrix`1">
            <summary>Class for storing dense matrices</summary>
            <remarks>
            The data is stored in row-major mode.
            Indexes are zero-based.
            </remarks>
            <typeparam name="T">the type of the matrix entries</typeparam>
        </member>
        <member name="F:MyMediaLite.DataType.SymmetricMatrix`1.data">
            <summary>Data array: data is stored in columns.</summary>
        </member>
        <member name="F:MyMediaLite.DataType.SymmetricMatrix`1.dim">
            <summary>Dimension, the number of rows and columns</summary>
        </member>
        <member name="P:MyMediaLite.DataType.SymmetricMatrix`1.IsSymmetric">
            
        </member>
        <member name="P:MyMediaLite.DataType.SymmetricMatrix`1.NumberOfRows">
            
        </member>
        <member name="P:MyMediaLite.DataType.SymmetricMatrix`1.NumberOfColumns">
            
        </member>
        <member name="M:MyMediaLite.DataType.SymmetricMatrix`1.#ctor(System.Int32)">
            <summary>Initializes a new instance of the SymmetricMatrix class</summary>
            <param name="dim">the number of rows and columns</param>
        </member>
        <member name="M:MyMediaLite.DataType.SymmetricMatrix`1.CreateMatrix(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.DataType.SymmetricMatrix`1.Transpose">
            
        </member>
        <member name="P:MyMediaLite.DataType.SymmetricMatrix`1.Item(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.DataType.SymmetricMatrix`1.Resize(System.Int32)">
            <summary>Resize to the given size</summary>
            <param name="size">the size</param>
        </member>
        <member name="M:MyMediaLite.DataType.SymmetricMatrix`1.Resize(System.Int32,System.Int32)">
            
        </member>
        <member name="T:MyMediaLite.Taxonomy.EntityType">
            <summary>Type to refer to different kinds of entities like users and items</summary>
        </member>
        <member name="F:MyMediaLite.Taxonomy.EntityType.USER">
            <summary>users</summary>
        </member>
        <member name="F:MyMediaLite.Taxonomy.EntityType.ITEM">
            <summary>items like movies, DVDs, books, products, etc.</summary>
        </member>
        <member name="F:MyMediaLite.Taxonomy.EntityType.TAG">
            <summary>folksonomy tags</summary>
        </member>
        <member name="F:MyMediaLite.Taxonomy.EntityType.TIMESTAMP">
            <summary>timestamps</summary>
        </member>
        <member name="T:MyMediaLite.Taxonomy.KDDCupItemType">
            <summary>Enumeration representing one of the 4 possible item types in the KDD Cup 2011 data</summary>
        </member>
        <member name="F:MyMediaLite.Taxonomy.KDDCupItemType.Track">
            <summary>a track/song</summary>
        </member>
        <member name="F:MyMediaLite.Taxonomy.KDDCupItemType.Album">
            <summary>a music album</summary>
        </member>
        <member name="F:MyMediaLite.Taxonomy.KDDCupItemType.Artist">
            <summary>an artist/interpret</summary>
        </member>
        <member name="F:MyMediaLite.Taxonomy.KDDCupItemType.Genre">
            <summary>a music genre</summary>
        </member>
        <member name="F:MyMediaLite.Taxonomy.KDDCupItemType.None">
            <summary>none of the above</summary>
        </member>
        <member name="T:MyMediaLite.RatingPrediction.BiPolarSlopeOne">
             <summary>Bi-polar frequency-weighted Slope-One rating prediction</summary>
             <remarks>
             <list type="bullet">
               <item><description>
                 Daniel Lemire, Anna Maclachlan:
                 Slope One Predictors for Online Rating-Based Collaborative Filtering.
                 SIAM Data Mining (SDM 2005).
                 http://www.daniel-lemire.com/fr/abstracts/SDM2005.html
               </description></item>
             </list>
            
             This recommender does NOT support incremental updates. They would be easy to implement, though.
             </remarks>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.BiPolarSlopeOne.CanPredict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.BiPolarSlopeOne.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.BiPolarSlopeOne.Train">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.BiPolarSlopeOne.InitModel">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.BiPolarSlopeOne.LoadModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.BiPolarSlopeOne.SaveModel(System.String)">
            
        </member>
        <member name="T:MyMediaLite.RatingPrediction.EntityAverage">
            <summary>Abstract class that uses an average (by entity) rating value for predictions</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.EntityAverage.entity_averages">
            <summary>The average rating for each entity</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.EntityAverage.global_average">
            <summary>The global average rating (default prediction if there is no data about an entity)</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.EntityAverage.Item(System.Int32)">
            <summary>return the average rating for a given entity</summary>
            <param name="index">the entity index</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.EntityAverage.Train(System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>Train the recommender according to the given entity type</summary>
            <param name="entity_ids">list of all entity IDs in the training data (per rating)</param>
            <param name="max_entity_id">the maximum entity ID</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.EntityAverage.Retrain(System.Int32,System.Collections.Generic.IList{System.Int32})">
            <summary>Retrain the recommender according to the given entity type</summary>
            <param name="entity_id">the ID of the entity to update</param>
            <param name="indices">list of indices to use for retraining</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.EntityAverage.SaveModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.EntityAverage.LoadModel(System.String)">
            
        </member>
        <member name="T:MyMediaLite.RatingPrediction.FactorWiseMatrixFactorization">
            <summary>Matrix factorization with factor-wise learning</summary>
            <remarks>
              <para>
                Similar to the approach described in Simon Funk's seminal blog post: http://sifter.org/~simon/journal/20061211.html
              </para>
              <para>
                Literature:
                <list type="bullet">
                  <item><description>
                    Robert Bell, Yehuda Koren, Chris Volinsky:
                    Modeling Relationships at Multiple Scales to Improve Accuracy of Large Recommender Systems,
                    ACM Int. Conference on Knowledge Discovery and Data Mining (KDD'07), 2007.
                  </description></item>
                </list>
              </para>
              <para>
                 This recommender does NOT support incremental updates.
              </para>
            </remarks>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.FactorWiseMatrixFactorization.Ratings">
            
        </member>
        <member name="P:MyMediaLite.RatingPrediction.FactorWiseMatrixFactorization.RegU">
            <summary>regularization constant for the user bias of the underlying baseline predictor</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.FactorWiseMatrixFactorization.RegI">
            <summary>regularization constant for the item bias of the underlying baseline predictor</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.FactorWiseMatrixFactorization.user_factors">
            <summary>Matrix containing the latent user factors</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.FactorWiseMatrixFactorization.item_factors">
            <summary>Matrix containing the latent item factors</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.FactorWiseMatrixFactorization.NumFactors">
            <summary>Number of latent factors</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.FactorWiseMatrixFactorization.NumIter">
            <summary>Number of iterations (in this case: number of latent factors)</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.FactorWiseMatrixFactorization.Shrinkage">
            <summary>Shrinkage parameter</summary>
            <remarks>
            alpha in the Bell et al. paper
            </remarks>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.FactorWiseMatrixFactorization.Sensibility">
            <summary>Sensibility parameter (stopping criterion for parameter fitting)</summary>
            <remarks>
            epsilon in the Bell et al. paper
            </remarks>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.FactorWiseMatrixFactorization.InitMean">
            <summary>Mean of the normal distribution used to initialize the factors</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.FactorWiseMatrixFactorization.InitStdev">
            <summary>Standard deviation of the normal distribution used to initialize the factors</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.FactorWiseMatrixFactorization.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.FactorWiseMatrixFactorization.Train">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.FactorWiseMatrixFactorization.Iterate">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.FactorWiseMatrixFactorization.Predict(System.Int32,System.Int32)">
            <summary>Predict the rating of a given user for a given item</summary>
            <remarks>
            If the user or the item are not known to the recommender, the global effects prediction is returned.
            To avoid this behavior for unknown entities, use CanPredict() to check before.
            </remarks>
            <param name="user_id">the user ID</param>
            <param name="item_id">the item ID</param>
            <returns>the predicted rating</returns>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.FactorWiseMatrixFactorization.SaveModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.FactorWiseMatrixFactorization.LoadModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.FactorWiseMatrixFactorization.ComputeObjective">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.FactorWiseMatrixFactorization.ToString">
            
        </member>
        <member name="T:MyMediaLite.RatingPrediction.GlobalAverage">
            <summary>Uses the average rating value over all ratings for prediction</summary>
            <remarks>
            This recommender supports incremental updates.
            </remarks>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.GlobalAverage.Train">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.GlobalAverage.CanPredict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.GlobalAverage.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.GlobalAverage.AddRatings(MyMediaLite.Data.IRatings)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.GlobalAverage.UpdateRatings(MyMediaLite.Data.IRatings)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.GlobalAverage.RemoveRatings(MyMediaLite.Data.IDataSet)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.GlobalAverage.SaveModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.GlobalAverage.LoadModel(System.String)">
            
        </member>
        <member name="T:MyMediaLite.RatingPrediction.IRatingPredictor">
             <summary>Interface for rating predictors</summary>
             <remarks>
             Rating prediction is used in systems that let users rate items (e.g. movies, books, songs, etc.)
             on a certain scale, e.g. from 1 to 5 stars, where 1 star means the user does not like the item at all,
             and 5 stars mean the user likes the item very much.
            
             Given an (incomplete) set of ratings for several items by several users (and maybe additional information),
             the task is to predict (some of the) missing ratings.
            
             See also http://recsyswiki.com/wiki/Rating_prediction
             </remarks>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.IRatingPredictor.Ratings">
            <summary>the ratings to learn from</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.IRatingPredictor.MaxRating">
            <summary>Gets or sets the maximum rating.</summary>
            <value>The maximally possible rating</value>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.IRatingPredictor.MinRating">
            <summary>Gets or sets the minimum rating.</summary>
            <value>The minimally possible rating</value>
        </member>
        <member name="T:MyMediaLite.RatingPrediction.ItemAttributeKNN">
            <summary>Attribute-aware weighted item-based kNN recommender</summary>
            <remarks>
            This recommender supports incremental updates.
            </remarks>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.ItemAttributeKNN.ItemAttributes">
            
        </member>
        <member name="P:MyMediaLite.RatingPrediction.ItemAttributeKNN.NumItemAttributes">
            
        </member>
        <member name="P:MyMediaLite.RatingPrediction.ItemAttributeKNN.BinaryDataMatrix">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.ItemAttributeKNN.RetrainItem(System.Int32)">
            
        </member>
        <member name="T:MyMediaLite.RatingPrediction.ItemAverage">
            <summary>Uses the average rating value of an item for prediction</summary>
            <remarks>
            This recommender supports incremental updates.
            </remarks>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.ItemAverage.Train">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.ItemAverage.CanPredict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.ItemAverage.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.ItemAverage.AddRatings(MyMediaLite.Data.IRatings)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.ItemAverage.UpdateRatings(MyMediaLite.Data.IRatings)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.ItemAverage.RemoveRatings(MyMediaLite.Data.IDataSet)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.ItemAverage.AddItem(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.ItemAverage.RemoveItem(System.Int32)">
            
        </member>
        <member name="T:MyMediaLite.RatingPrediction.ItemKNN">
            <summary>Weighted item-based kNN</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.ItemKNN.data_item">
            <summary>Matrix indicating which item was rated by which user</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.ItemKNN.Ratings">
            
        </member>
        <member name="P:MyMediaLite.RatingPrediction.ItemKNN.Entity">
            
        </member>
        <member name="P:MyMediaLite.RatingPrediction.ItemKNN.BinaryDataMatrix">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.ItemKNN.Predict(System.Int32,System.Int32)">
            <summary>Predict the rating of a given user for a given item</summary>
            <remarks>
            If the user or the item are not known to the recommender, a suitable average is returned.
            To avoid this behavior for unknown entities, use CanPredict() to check before.
            </remarks>
            <param name="user_id">the user ID</param>
            <param name="item_id">the item ID</param>
            <returns>the predicted rating</returns>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.ItemKNN.RetrainItem(System.Int32)">
            <summary>Retrain model for a given item</summary>
            <param name='item_id'>the item ID</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.ItemKNN.AddRatings(MyMediaLite.Data.IRatings)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.ItemKNN.UpdateRatings(MyMediaLite.Data.IRatings)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.ItemKNN.RemoveRatings(MyMediaLite.Data.IDataSet)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.ItemKNN.AddItem(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.ItemKNN.ScoreItems(System.Collections.Generic.IList{System.Tuple{System.Int32,System.Single}},System.Collections.Generic.IList{System.Int32})">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.ItemKNN.GetItemSimilarity(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.ItemKNN.GetMostSimilarItems(System.Int32,System.UInt32)">
            
        </member>
        <member name="T:MyMediaLite.RatingPrediction.KNN">
            <summary>Base class for rating predictors that use some kind of kNN</summary>
            <remarks>
              <para>
                The method is described in section 2.2 of the paper below.
                One difference is that we support several iterations of alternating optimization,
                instead of just one.
              </para>
              <para>
                Literature:
                <list type="bullet">
                  <item><description>
                    Yehuda Koren: Factor in the Neighbors: Scalable and Accurate Collaborative Filtering,
                    Transactions on Knowledge Discovery from Data (TKDD), 2009.
                    http://public.research.att.com/~volinsky/netflix/factorizedNeighborhood.pdf
                  </description></item>
                </list>
              </para>
              <seealso cref="T:MyMediaLite.ItemRecommendation.KNN"/>
            </remarks>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.KNN.K">
            <summary>Number of neighbors to take into account for predictions</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.KNN.Ratings">
            
        </member>
        <member name="P:MyMediaLite.RatingPrediction.KNN.Correlation">
            <summary>The kind of correlation to use</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.KNN.Entity">
            <summary>The entity type of the neighbors used for rating prediction</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.KNN.BinaryDataMatrix">
            <summary>Return the data matrix that can be used to compute a correlation based on binary data</summary>
            <remarks>If a purely rating-based correlation is used, this property is ignored.</remarks>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.KNN.RegU">
            <summary>regularization constant for the user bias of the underlying baseline predictor</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.KNN.RegI">
            <summary>regularization constant for the item bias of the underlying baseline predictor</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.KNN.NumIter">
            <summary>number of iterations used for training the underlying baseline predictor</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.KNN.correlation_matrix">
            <summary>Correlation matrix over some kind of entity</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.KNN.Alpha">
            <summary>Alpha parameter for BidirectionalConditionalProbability, or shrinkage parameter for Pearson</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.KNN.WeightedBinary">
            <summary>If set to true, give a lower weight to evidence coming from very frequent entities</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.KNN.baseline_predictor">
            <summary>underlying baseline predictor</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.KNN.Train">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.KNN.SaveModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.KNN.LoadModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.KNN.ToString">
            
        </member>
        <member name="T:MyMediaLite.RatingPrediction.MatrixFactorization">
             <summary>Simple matrix factorization class, learning is performed by stochastic gradient descent (SGD)</summary>
             <remarks>
               <para>
                 Factorizing the observed rating values using a factor matrix for users and one for items.
               </para>
            
               <para>
                 NaN values in the model occur if values become too large or too small to be represented by the type float.
                 If you encounter such problems, there are three ways to fix them:
                 (1) (preferred) Use BiasedMatrixFactorization, which is more stable.
                 (2) Change the range of rating values (1 to 5 works generally well with the default settings).
                 (3) Decrease the learn_rate.
               </para>
            
               <para>
                 This recommender supports incremental updates.
               </para>
             </remarks>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.MatrixFactorization.user_factors">
            <summary>Matrix containing the latent user factors</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.MatrixFactorization.item_factors">
            <summary>Matrix containing the latent item factors</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.MatrixFactorization.global_bias">
            <summary>The bias (global average)</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.MatrixFactorization.InitMean">
            <summary>Mean of the normal distribution used to initialize the factors</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.MatrixFactorization.InitStdDev">
            <summary>Standard deviation of the normal distribution used to initialize the factors</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.MatrixFactorization.NumFactors">
            <summary>Number of latent factors</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.MatrixFactorization.LearnRate">
            <summary>Learn rate (update step size)</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.MatrixFactorization.Decay">
            <summary>Multiplicative learn rate decay</summary>
            <remarks>Applied after each epoch (= pass over the whole dataset)</remarks>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.MatrixFactorization.Regularization">
            <summary>Regularization parameter</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.MatrixFactorization.NumIter">
            <summary>Number of iterations over the training data</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.MatrixFactorization.current_learnrate">
            <summary>The learn rate used for the current epoch</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.MatrixFactorization.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.MatrixFactorization.InitModel">
            <summary>Initialize the model data structure</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.MatrixFactorization.Train">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.MatrixFactorization.UpdateLearnRate">
            <summary>Updates <see cref="F:MyMediaLite.RatingPrediction.MatrixFactorization.current_learnrate"/> after each epoch</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.MatrixFactorization.Iterate">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.MatrixFactorization.RetrainUser(System.Int32)">
            <summary>Updates the latent factors on a user</summary>
            <param name="user_id">the user ID</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.MatrixFactorization.RetrainItem(System.Int32)">
            <summary>Updates the latent factors of an item</summary>
            <param name="item_id">the item ID</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.MatrixFactorization.Iterate(System.Collections.Generic.IList{System.Int32},System.Boolean,System.Boolean)">
            <summary>Iterate once over rating data and adjust corresponding factors (stochastic gradient descent)</summary>
            <param name="rating_indices">a list of indices pointing to the ratings to iterate over</param>
            <param name="update_user">true if user factors to be updated</param>
            <param name="update_item">true if item factors to be updated</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.MatrixFactorization.Predict(System.Int32,System.Int32,System.Boolean)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.MatrixFactorization.Predict(System.Single[],System.Int32)">
            <summary>Predict rating for a fold-in user and an item</summary>
            <param name='user_vector'>a float vector representing the user</param>
            <param name='item_id'>the item ID</param>
            <returns>the predicted rating</returns>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.MatrixFactorization.Predict(System.Single[],System.Int32,System.Boolean)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.MatrixFactorization.Predict(System.Int32,System.Int32)">
            <summary>Predict the rating of a given user for a given item</summary>
            <remarks>
            If the user or the item are not known to the recommender, the global average is returned.
            To avoid this behavior for unknown entities, use CanPredict() to check before.
            </remarks>
            <param name="user_id">the user ID</param>
            <param name="item_id">the item ID</param>
            <returns>the predicted rating</returns>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.MatrixFactorization.AddRatings(MyMediaLite.Data.IRatings)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.MatrixFactorization.UpdateRatings(MyMediaLite.Data.IRatings)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.MatrixFactorization.RemoveRatings(MyMediaLite.Data.IDataSet)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.MatrixFactorization.AddUser(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.MatrixFactorization.AddItem(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.MatrixFactorization.RemoveUser(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.MatrixFactorization.RemoveItem(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.MatrixFactorization.FoldIn(System.Collections.Generic.IList{System.Tuple{System.Int32,System.Single}})">
            <summary>Compute parameters (latent factors) for a user represented by ratings</summary>
            <returns>a vector of latent factors</returns>
            <param name='rated_items'>a list of (item ID, rating value) pairs</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.MatrixFactorization.ScoreItems(System.Collections.Generic.IList{System.Tuple{System.Int32,System.Single}},System.Collections.Generic.IList{System.Int32})">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.MatrixFactorization.SaveModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.MatrixFactorization.LoadModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.MatrixFactorization.ComputeObjective">
            <summary>Compute the regularized loss</summary>
            <returns>the regularized loss</returns>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.MatrixFactorization.ToString">
            
        </member>
        <member name="T:MyMediaLite.RatingPrediction.RatingPredictor">
            <summary>Abstract class for rating predictors that keep the rating data in memory for training (and possibly prediction)</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.RatingPredictor.MaxRating">
            <summary>Maximum rating value</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.RatingPredictor.max_rating">
            <summary>Maximum rating value</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.RatingPredictor.MinRating">
            <summary>Minimum rating value</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.RatingPredictor.min_rating">
            <summary>Minimum rating value</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.RatingPredictor.Ratings">
            <summary>The rating data</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.RatingPredictor.ratings">
            <summary>rating data</summary>
        </member>
        <member name="T:MyMediaLite.RatingPrediction.SlopeOne">
             <summary>Frequency-weighted Slope-One rating prediction</summary>
             <remarks>
             Daniel Lemire, Anna Maclachlan:
             Slope One Predictors for Online Rating-Based Collaborative Filtering.
             SIAM Data Mining (SDM 2005).
             http://www.daniel-lemire.com/fr/abstracts/SDM2005.html
            
             This recommender does NOT support incremental updates. They would be easy to implement, though.
             </remarks>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SlopeOne.CanPredict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SlopeOne.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SlopeOne.Train">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SlopeOne.LoadModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SlopeOne.SaveModel(System.String)">
            
        </member>
        <member name="T:MyMediaLite.RatingPrediction.UserAttributeKNN">
            <summary>Weighted kNN recommender based on user attributes</summary>
            <remarks>
            This recommender supports incremental updates, but it does not support fold-in.
            </remarks>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.UserAttributeKNN.UserAttributes">
            
        </member>
        <member name="P:MyMediaLite.RatingPrediction.UserAttributeKNN.NumUserAttributes">
            
        </member>
        <member name="P:MyMediaLite.RatingPrediction.UserAttributeKNN.BinaryDataMatrix">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserAttributeKNN.RetrainUser(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserAttributeKNN.FoldIn(System.Collections.Generic.IList{System.Tuple{System.Int32,System.Single}})">
            
        </member>
        <member name="T:MyMediaLite.RatingPrediction.UserAverage">
            <summary>Uses the average rating value of a user for predictions</summary>
            <remarks>
            This recommender supports incremental updates.
            </remarks>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserAverage.Train">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserAverage.CanPredict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserAverage.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserAverage.AddRatings(MyMediaLite.Data.IRatings)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserAverage.UpdateRatings(MyMediaLite.Data.IRatings)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserAverage.RemoveRatings(MyMediaLite.Data.IDataSet)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserAverage.AddUser(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserAverage.RemoveUser(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserAverage.ScoreItems(System.Collections.Generic.IList{System.Tuple{System.Int32,System.Single}},System.Collections.Generic.IList{System.Int32})">
            
        </member>
        <member name="T:MyMediaLite.RatingPrediction.UserItemBaseline">
            <summary>Baseline method for rating prediction</summary>
            <remarks>
              <para>
                Uses the average rating value, plus a regularized user and item bias
                for prediction.
              </para>
              <para>
                The method was described in section 2.1 of the paper below.
                One difference is that we support several iterations of alternating optimization,
                instead of just one.
              </para>
              <para>
                The optimization problem solved by the Train() method is the following:
                \f[
                   \min_{\mathbf{a}, \mathbf{b}}
                     \sum_{(u, i, r) \in R} (r - \mu_R - a_u - b_i)^2 + \lambda_1 \|\mathbf{a}\|^2 + \lambda_2 \|\mathbf{b}\|^2,
                \f]
               where \f$R\f$ are the known ratings, and
               \f$\lambda_1\f$ and \f$\lambda_2\f$ are the regularization constants <see cref="P:MyMediaLite.RatingPrediction.UserItemBaseline.RegU">RegU</see> and <see cref="P:MyMediaLite.RatingPrediction.UserItemBaseline.RegI">RegI</see>.
               The sum represents the least squares error, while the two terms starting with \f$\lambda_1\f$ and \f$\lambda_2\f$, respectively,
               are regularization terms that control the parameter sizes to avoid overfitting.
               The optimization problem is solved an alternating least squares method.
              </para>
              <para>
                Literature:
                <list type="bullet">
                  <item><description>
                    Yehuda Koren: Factor in the Neighbors: Scalable and Accurate Collaborative Filtering,
                    Transactions on Knowledge Discovery from Data (TKDD), 2009.
                    http://public.research.att.com/~volinsky/netflix/factorizedNeighborhood.pdf
                  </description></item>
                </list>
              </para>
              <para>
                This recommender supports incremental updates.
              </para>
            </remarks>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.UserItemBaseline.RegU">
            <summary>Regularization parameter for the user biases</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.UserItemBaseline.RegI">
            <summary>Regularization parameter for the item biases</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.UserItemBaseline.NumIter">
            
        </member>
        <member name="F:MyMediaLite.RatingPrediction.UserItemBaseline.global_average">
            <summary>the global rating average</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.UserItemBaseline.user_biases">
            <summary>the user biases</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.UserItemBaseline.item_biases">
            <summary>the item biases</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserItemBaseline.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserItemBaseline.Train">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserItemBaseline.Iterate">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserItemBaseline.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserItemBaseline.RetrainUser(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserItemBaseline.RetrainItem(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserItemBaseline.AddRatings(MyMediaLite.Data.IRatings)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserItemBaseline.UpdateRatings(MyMediaLite.Data.IRatings)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserItemBaseline.RemoveRatings(MyMediaLite.Data.IDataSet)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserItemBaseline.AddUser(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserItemBaseline.AddItem(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserItemBaseline.SaveModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserItemBaseline.LoadModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserItemBaseline.ComputeObjective">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserItemBaseline.ToString">
            
        </member>
        <member name="T:MyMediaLite.RatingPrediction.UserKNN">
            <summary>Weighted user-based kNN</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.UserKNN.data_user">
            <summary>boolean matrix indicating which user rated which item</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.UserKNN.Ratings">
            
        </member>
        <member name="P:MyMediaLite.RatingPrediction.UserKNN.Entity">
            
        </member>
        <member name="P:MyMediaLite.RatingPrediction.UserKNN.BinaryDataMatrix">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserKNN.Predict(System.Int32,System.Int32)">
            <summary>Predict the rating of a given user for a given item</summary>
            <remarks>
            If the user or the item are not known to the recommender, a suitable average rating is returned.
            To avoid this behavior for unknown entities, use CanPredict() to check before.
            </remarks>
            <param name="user_id">the user ID</param>
            <param name="item_id">the item ID</param>
            <returns>the predicted rating</returns>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserKNN.AddRatings(MyMediaLite.Data.IRatings)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserKNN.UpdateRatings(MyMediaLite.Data.IRatings)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserKNN.RemoveRatings(MyMediaLite.Data.IDataSet)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserKNN.AddUser(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserKNN.GetUserSimilarity(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserKNN.GetMostSimilarUsers(System.Int32,System.UInt32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserKNN.RetrainUser(System.Int32)">
            <summary>Retrain model for a given user</summary>
            <param name='user_id'>the user ID</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserKNN.FoldIn(System.Collections.Generic.IList{System.Tuple{System.Int32,System.Single}})">
            <summary>Fold in one user, identified by their ratings</summary>
            <returns>a vector containing the similarity with all users</returns>
            <param name='rated_items'>the ratings to take into account</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.UserKNN.ScoreItems(System.Collections.Generic.IList{System.Tuple{System.Int32,System.Single}},System.Collections.Generic.IList{System.Int32})">
            
        </member>
        <member name="T:MyMediaLite.RatingPrediction.IIncrementalRatingPredictor">
             <summary>Interface for rating predictors which support incremental training</summary>
             <remarks>
             By incremental training we mean that after each update, the recommender does not
             perform a complete re-training using all data, but only a brief update procedure
             taking into account the update and only a subset of the existing training data.
            
             This interface does not prevent you from doing a complete re-training when implementing
             a new class. This makes sense e.g. for simple average-based models.
            
             This interface assumes that every user can rate every item only once.
             </remarks>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.IIncrementalRatingPredictor.AddRatings(MyMediaLite.Data.IRatings)">
            <summary>Add new ratings and perform incremental training</summary>
            <param name='ratings'>the ratings</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.IIncrementalRatingPredictor.UpdateRatings(MyMediaLite.Data.IRatings)">
            <summary>Update existing ratings and perform incremental training</summary>
            <param name='ratings'>the ratings</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.IIncrementalRatingPredictor.RemoveRatings(MyMediaLite.Data.IDataSet)">
            <summary>Remove existing ratings and perform "incremental" training</summary>
            <param name='ratings'>the user and item IDs of the ratings to be removed</param>
        </member>
        <member name="T:MyMediaLite.RatingPrediction.IncrementalRatingPredictor">
            <summary>Base class for rating predictors that support incremental training</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.IncrementalRatingPredictor.UpdateUsers">
            
        </member>
        <member name="P:MyMediaLite.RatingPrediction.IncrementalRatingPredictor.UpdateItems">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.IncrementalRatingPredictor.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.IncrementalRatingPredictor.AddRatings(MyMediaLite.Data.IRatings)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.IncrementalRatingPredictor.UpdateRatings(MyMediaLite.Data.IRatings)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.IncrementalRatingPredictor.RemoveRatings(MyMediaLite.Data.IDataSet)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.IncrementalRatingPredictor.AddUser(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.IncrementalRatingPredictor.AddItem(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.IncrementalRatingPredictor.RemoveUser(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.IncrementalRatingPredictor.RemoveItem(System.Int32)">
            
        </member>
        <member name="T:MyMediaLite.RatingPrediction.ITimeAwareRatingPredictor">
             <summary>Interface for time-aware rating predictors</summary>
             <remarks>
             Time-aware rating predictors use the information contained in the dates/times
             of the ratings to build more accurate models.
            
             They may or may not use time information at prediction (as opposed to training) time.
             </remarks>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.ITimeAwareRatingPredictor.TimedRatings">
            <summary>training data that also contains the time information</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.ITimeAwareRatingPredictor.Predict(System.Int32,System.Int32,System.DateTime)">
            <summary>predict rating at a certain point in time</summary>
            <param name='user_id'>the user ID</param>
            <param name='item_id'>the item ID</param>
            <param name='time'>the time of the rating event</param>
        </member>
        <member name="T:MyMediaLite.RatingPrediction.TimeAwareBaseline">
             <summary>Time-aware bias model</summary>
             <remarks>
             Model described in equation (10) of BellKor Grand Prize documentation for the Netflix Prize (see below).
             The optimization problem is described in equation (12).
            
             The default hyper-parameter values are set to the ones shown in the report.
             For datasets other than Netflix, you may want to find better parameters.
            
             Literature:
             <list type="bullet">
               <item><description>
               Yehuda Koren: The BellKor Solution to the Netflix Grand Prize
               </description></item>
             </list>
            
             This recommender does currently NOT support incremental updates.
             </remarks>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.TimeAwareBaseline.NumIter">
            <summary>number of iterations over the dataset to perform</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.TimeAwareBaseline.BinSize">
            <summary>bin size in days for modeling the time-dependent item bias</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.TimeAwareBaseline.Beta">
            <summary>beta parameter for modeling the drift in the user bias</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.TimeAwareBaseline.UserBiasLearnRate">
            <summary>learn rate for the user bias</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.TimeAwareBaseline.ItemBiasLearnRate">
            <summary>learn rate for the item bias</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.TimeAwareBaseline.AlphaLearnRate">
            <summary>learn rate for the user-wise alphas</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.TimeAwareBaseline.ItemBiasByTimeBinLearnRate">
            <summary>learn rate for the bin-wise item bias</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.TimeAwareBaseline.UserBiasByDayLearnRate">
            <summary>learn rate for the day-wise user bias</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.TimeAwareBaseline.UserScalingLearnRate">
            <summary>learn rate for the user-wise scaling factor</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.TimeAwareBaseline.UserScalingByDayLearnRate">
            <summary>learn rate for the day-wise user scaling factor</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.TimeAwareBaseline.RegU">
            <summary>regularization for the user bias</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.TimeAwareBaseline.RegI">
            <summary>regularization for the item bias</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.TimeAwareBaseline.RegAlpha">
            <summary>regularization for the user-wise alphas</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.TimeAwareBaseline.RegItemBiasByTimeBin">
            <summary>regularization for the bin-wise item bias</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.TimeAwareBaseline.RegUserBiasByDay">
            <summary>regularization for the day-wise user bias</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.TimeAwareBaseline.RegUserScaling">
            <summary>regularization for the user scaling factor</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.TimeAwareBaseline.RegUserScalingByDay">
            <summary>regularization for the day-wise user scaling factor</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.TimeAwareBaseline.latest_relative_day">
            <summary>last day in the training data, counting from the first day</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.TimeAwareBaseline.#ctor">
            <summary>default constructor</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.TimeAwareBaseline.Train">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.TimeAwareBaseline.RelativeDay(System.DateTime)">
            <summary>Given a DateTime object, return the day relative to the first rating day in the dataset</summary>
            <returns>the day relative to the first rating day in the dataset</returns>
            <param name='datetime'>the date/time of the rating event</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.TimeAwareBaseline.InitModel">
            <summary>Initialize the model parameters</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.TimeAwareBaseline.Iterate">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.TimeAwareBaseline.UpdateParameters(System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>Single stochastic gradient descent step: update the parameter values for one user and one item</summary>
            <param name='u'>the user ID</param>
            <param name='i'>the item ID</param>
            <param name='day'>the day of the rating</param>
            <param name='bin'>the day bin of the rating</param>
            <param name='err'>the current error made for this rating</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.TimeAwareBaseline.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.TimeAwareBaseline.Predict(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Predict the specified user_id, item_id, day and bin</summary>
            <remarks>
            Assumes user and item IDs are valid.
            </remarks>
            <param name='user_id'>the user ID</param>
            <param name='item_id'>the item ID</param>
            <param name='day'>the day of the rating</param>
            <param name='bin'>the day bin of the rating</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.TimeAwareBaseline.Predict(System.Int32,System.Int32,System.DateTime)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.TimeAwareBaseline.ComputeObjective">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.TimeAwareBaseline.ToString">
            
        </member>
        <member name="T:MyMediaLite.RatingPrediction.TimeAwareBaselineWithFrequencies">
             <summary>Time-aware bias model with frequencies</summary>
             <remarks>
             Model described in equation (11) of BellKor Grand Prize documentation for the Netflix Prize (see below).
            
             The default hyper-parameter values are set to the ones shown in the report.
             For datasets other than Netflix, you may want to find better parameters.
            
             Literature:
             <list type="bullet">
               <item><description>
               Yehuda Koren: The BellKor Solution to the Netflix Grand Prize
               </description></item>
             </list>
            
             This recommender does currently NOT support incremental updates.
             </remarks>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.TimeAwareBaselineWithFrequencies.FrequencyLogBase">
            <summary>logarithmic base for the frequency counts</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.TimeAwareBaselineWithFrequencies.RegItemBiasAtFrequency">
            <summary>regularization constant for b_{i, f_{ui}}</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.TimeAwareBaselineWithFrequencies.ItemBiasAtFrequencyLearnRate">
            <summary>learn rate for b_{i, f_{ui}}</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.TimeAwareBaselineWithFrequencies.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.TimeAwareBaselineWithFrequencies.Train">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.TimeAwareBaselineWithFrequencies.InitModel">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.TimeAwareBaselineWithFrequencies.UpdateParameters(System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.TimeAwareBaselineWithFrequencies.Predict(System.Int32,System.Int32,System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.TimeAwareBaselineWithFrequencies.Predict(System.Int32,System.Int32,System.DateTime)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.TimeAwareBaselineWithFrequencies.ComputeObjective">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.TimeAwareBaselineWithFrequencies.ToString">
            
        </member>
        <member name="T:MyMediaLite.RatingPrediction.TimeAwareRatingPredictor">
            <summary>Abstract class for time-aware rating predictors</summary>
            <exception cref='T:System.ArgumentException'>
            Is thrown when an argument passed to a method is invalid.
            </exception>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.TimeAwareRatingPredictor.TimedRatings">
            <summary>the rating data, including time information</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.TimeAwareRatingPredictor.timed_ratings">
            <summary>rating data, including time information</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.TimeAwareRatingPredictor.Ratings">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.TimeAwareRatingPredictor.Predict(System.Int32,System.Int32,System.DateTime)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.TimeAwareRatingPredictor.RecommendTime(System.Int32,System.DateTime,System.Int32,System.Collections.Generic.ICollection{System.Int32},System.Collections.Generic.ICollection{System.Int32})">
            
        </member>
        <member name="T:MyMediaLite.RatingPrediction.Extensions">
            <summary>Class that contains static methods for rating prediction</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.Extensions.WritePredictions(MyMediaLite.IRecommender,MyMediaLite.Data.IRatings,System.IO.TextWriter,MyMediaLite.Data.IMapping,MyMediaLite.Data.IMapping,System.String,System.String)">
            <summary>Rate a given set of instances and write it to a TextWriter</summary>
            <param name="recommender">rating predictor</param>
            <param name="ratings">test cases</param>
            <param name="writer">the TextWriter to write the predictions to</param>
            <param name="user_mapping">an <see cref="T:MyMediaLite.Data.Mapping"/> object for the user IDs</param>
            <param name="item_mapping">an <see cref="T:MyMediaLite.Data.Mapping"/> object for the item IDs</param>
            <param name="line_format">a format string specifying the line format; {0} is the user ID, {1} the item ID, {2} the rating</param>
            <param name="header">if specified, write this string at the start of the output</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.Extensions.WritePredictions(MyMediaLite.IRecommender,MyMediaLite.Data.IRatings,System.String,MyMediaLite.Data.IMapping,MyMediaLite.Data.IMapping,System.String,System.String)">
            <summary>Rate a given set of instances and write it to a file</summary>
            <param name="recommender">rating predictor</param>
            <param name="ratings">test cases</param>
            <param name="filename">the name of the file to write the predictions to</param>
            <param name="user_mapping">an <see cref="T:MyMediaLite.Data.Mapping"/> object for the user IDs</param>
            <param name="item_mapping">an <see cref="T:MyMediaLite.Data.Mapping"/> object for the item IDs</param>
            <param name="line_format">a format string specifying the line format; {0} is the user ID, {1} the item ID, {2} the rating</param>
            <param name="header">if specified, write this string to the first line</param>
        </member>
        <member name="T:MyMediaLite.RatingPrediction.CoClustering">
             <summary>Co-clustering for rating prediction</summary>
             <remarks>
             Literature:
             <list type="bullet">
               <item><description>
                 Thomas George, Srujana Merugu
                 A Scalable Collaborative Filtering Framework based on Co-clustering.
                 ICDM 2005.
                 http://hercules.ece.utexas.edu/~srujana/papers/icdm05.pdf
               </description></item>
             </list>
            
             This recommender does NOT support incremental updates.
             </remarks>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.CoClustering.random">
            <summary>Random number generator</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.CoClustering.NumUserClusters">
            <summary>The number of user clusters</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.CoClustering.NumItemClusters">
            <summary>The number of item clusters</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.CoClustering.NumIter">
            <summary>The maximum number of iterations</summary>
            <remarks>If the algorithm converges to a stable solution, it will terminate earlier.</remarks>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.CoClustering.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.CoClustering.Iterate">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.CoClustering.Train">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.CoClustering.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.CoClustering.SaveModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.CoClustering.LoadModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.CoClustering.ComputeObjective">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.CoClustering.ToString">
            
        </member>
        <member name="T:MyMediaLite.RatingPrediction.Random">
            <summary>Uses a random rating value for prediction</summary>
            <remarks>
            This recommender supports incremental updates.
            Updates are just ignored, because the predictions are always uniformly sampled from the interval of rating values.
            </remarks>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.Random.Train">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.Random.CanPredict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.Random.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.Random.SaveModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.Random.LoadModel(System.String)">
            
        </member>
        <member name="T:MyMediaLite.RatingPrediction.Constant">
            <summary>Uses a constant rating value for prediction</summary>
            <remarks>
            This recommender supports incremental updates.
            Updates are just ignored, because the prediction is always the same.
            </remarks>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.Constant.ConstantRating">
            <summary>the constant rating</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.Constant.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.Constant.Train">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.Constant.CanPredict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.Constant.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.Constant.SaveModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.Constant.LoadModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.Constant.ToString">
            
        </member>
        <member name="T:MyMediaLite.RatingPrediction.LatentFeatureLogLinearModel">
            <summary>Latent-feature log linear model</summary>
            <remarks>
              <para>
              </para>
              <para>
                Literature:
                <list type="bullet">
                  <item><description>
                    Aditya Krishna Menon, Charles Elkan:
                    A log-linear model with latent features for dyadic prediction.
                    ICDM 2010.
                    http://cseweb.ucsd.edu/~akmenon/LFL-ICDM10.pdf
                  </description></item>
                </list>
              </para>
              <para>
                This recommender supports incremental updates.
              </para>
            </remarks>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.LatentFeatureLogLinearModel.InitMean">
            <summary>Mean of the normal distribution used to initialize the factors</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.LatentFeatureLogLinearModel.InitStdDev">
            <summary>Standard deviation of the normal distribution used to initialize the factors</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.LatentFeatureLogLinearModel.NumFactors">
            <summary>Number of latent factors</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.LatentFeatureLogLinearModel.LearnRate">
            <summary>Learn rate</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.LatentFeatureLogLinearModel.NumIter">
            <summary>Number of iterations over the training data</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.LatentFeatureLogLinearModel.FrequencyRegularization">
            <summary>Regularization based on rating frequency</summary>
            <description>
            Regularization proportional to the inverse of the square root of the number of ratings associated with the user or item.
            As described in the paper by Menon and Elkan.
            </description>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.LatentFeatureLogLinearModel.Loss">
            <summary>The optimization target</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.LatentFeatureLogLinearModel.BiasLearnRate">
            <summary>Learn rate factor for the bias terms</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.LatentFeatureLogLinearModel.BiasReg">
            <summary>regularization factor for the bias terms</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.LatentFeatureLogLinearModel.RegU">
            <summary>regularization constant for the user factors</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.LatentFeatureLogLinearModel.RegI">
            <summary>regularization constant for the item factors</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.LatentFeatureLogLinearModel.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.LatentFeatureLogLinearModel.Train">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.LatentFeatureLogLinearModel.Iterate">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.LatentFeatureLogLinearModel.Iterate(System.Collections.Generic.IList{System.Int32},System.Boolean,System.Boolean)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.LatentFeatureLogLinearModel.ComputeObjective">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.LatentFeatureLogLinearModel.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.LatentFeatureLogLinearModel.ToString">
            
        </member>
        <member name="T:MyMediaLite.RatingPrediction.IFoldInRatingPredictor">
            <summary>Rating predictor that allows folding in new users</summary>
            <remarks>
              <para>
                The process of folding in is computing a predictive model for a new user based on their ratings
                and the existing recommender, without modifying the parameters of the existing recommender.
              </para>
              <para>
                Literature:
                <list type="bullet">
                  <item><description>
                    Badrul Sarwar and George Karypis, Joseph Konstan, John Riedl:
                    Incremental singular value decomposition algorithms for highly scalable recommender systems.
                    Fifth International Conference on Computer and Information Science, 2002.
                    http://grouplens.org/papers/pdf/sarwar_SVD.pdf
                  </description></item>
                  </list>
              </para>
            </remarks>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.IFoldInRatingPredictor.ScoreItems(System.Collections.Generic.IList{System.Tuple{System.Int32,System.Single}},System.Collections.Generic.IList{System.Int32})">
            <summary>Rate a list of items given a list of ratings that represent a new user</summary>
            <returns>a list of int and float pairs, representing item IDs and predicted ratings</returns>
            <param name='rated_items'>the ratings (item IDs and rating values) representing the new user</param>
            <param name='candidate_items'>the items to be rated</param>
        </member>
        <member name="T:MyMediaLite.RatingPrediction.FoldInRatingPredictorExtensions">
            <summary>Extension methods for IFoldInRatingPredictor</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.FoldInRatingPredictorExtensions.RecommendItems(MyMediaLite.RatingPrediction.IFoldInRatingPredictor,System.Collections.Generic.IList{System.Tuple{System.Int32,System.Single}},System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>Recommend top N items, based on a user description by ratings</summary>
            <returns>a list of item IDs with scores</returns>
            <param name='recommender'>the IFoldInRatingPredictor recommender</param>
            <param name='rated_items'>a list of item IDs and ratings describing the user</param>
            <param name='candidate_items'>the recommendation candidates</param>
            <param name='n'>the number of items to recommend</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.FoldInRatingPredictorExtensions.RecommendItems(MyMediaLite.RatingPrediction.IFoldInRatingPredictor,System.Collections.Generic.IList{System.Tuple{System.Int32,System.Single}},System.Int32)">
            <summary>Recommend top N items, based on a user description by ratings</summary>
            <returns>a list of item IDs with scores</returns>
            <param name='recommender'>the IFoldInRatingPredictor recommender</param>
            <param name='rated_items'>a list of item IDs and ratings describing the user</param>
            <param name='n'>the number of items to recommend</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.FoldInRatingPredictorExtensions.ScoreItems(MyMediaLite.RatingPrediction.IFoldInRatingPredictor,System.Collections.Generic.IList{System.Tuple{System.Int32,System.Single}})">
            <summary>Recommend top N items, based on a user description by ratings</summary>
            <returns>a list of item IDs with scores</returns>
            <param name='recommender'>the IFoldInRatingPredictor recommender</param>
            <param name='rated_items'>a list of item IDs and ratings describing the user</param>
        </member>
        <member name="T:MyMediaLite.RatingPrediction.OptimizationTarget">
            <summary>Enumeration to represent different optimization targets for rating prediction</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.OptimizationTarget.RMSE">
            <summary>(root) mean square error</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.OptimizationTarget.MAE">
            <summary>mean absolute error</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.OptimizationTarget.LogisticLoss">
            <summary>log likelihood of the data (as in logistic regression)</summary>
        </member>
        <member name="T:MyMediaLite.RatingPrediction.BiasedMatrixFactorization">
            <summary>Matrix factorization with explicit user and item bias, learning is performed by stochastic gradient descent</summary>
            <remarks>
              <para>
                Per default optimizes for RMSE.
                Alternatively, you can set the Loss property to MAE or LogisticLoss.
                If set to log likelihood and with binary ratings, the recommender
                implements a simple version Menon and Elkan's LFL model,
                which predicts binary labels, has no advanced regularization, and uses no side information.
              </para>
              <para>
                This recommender makes use of multi-core machines if requested.
                Just set MaxThreads to a large enough number (usually multiples of the number of available cores).
                The parallelization is based on ideas presented in the paper by Gemulla et al.
              </para>
              <para>
                Literature:
                <list type="bullet">
                  <item><description>
                    Ruslan Salakhutdinov, Andriy Mnih:
                    Probabilistic Matrix Factorization.
                    NIPS 2007.
                    http://www.mit.edu/~rsalakhu/papers/nips07_pmf.pdf
                  </description></item>
                  <item><description>
                    Steffen Rendle, Lars Schmidt-Thieme:
                    Online-Updating Regularized Kernel Matrix Factorization Models for Large-Scale Recommender Systems.
                    RecSys 2008.
                    http://www.ismll.uni-hildesheim.de/pub/pdfs/Rendle2008-Online_Updating_Regularized_Kernel_Matrix_Factorization_Models.pdf
                  </description></item>
                  <item><description>
                    Aditya Krishna Menon, Charles Elkan:
                    A log-linear model with latent features for dyadic prediction.
                    ICDM 2010.
                    http://cseweb.ucsd.edu/~akmenon/LFL-ICDM10.pdf
                  </description></item>
                  <item><description>
                    Rainer Gemulla, Peter J. Haas, Erik Nijkamp, Yannis Sismanis:
                    Large-Scale Matrix Factorization with Distributed Stochastic Gradient Descent.
                    KDD 2011.
                    http://www.mpi-inf.mpg.de/~rgemulla/publications/gemulla11dsgd.pdf
                  </description></item>
                </list>
              </para>
              <para>
                  This recommender supports incremental updates. See the paper by Rendle and Schmidt-Thieme.
              </para>
            </remarks>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.FOLD_IN_BIAS_INDEX">
            <summary>Index of the bias term in the user vector representation for fold-in</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.FOLD_IN_FACTORS_START">
            <summary>Start index of the user factors in the user vector representation for fold-in</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.BiasLearnRate">
            <summary>Learn rate factor for the bias terms</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.BiasReg">
            <summary>regularization factor for the bias terms</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.RegU">
            <summary>regularization constant for the user factors</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.RegI">
            <summary>regularization constant for the item factors</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.Regularization">
            
        </member>
        <member name="P:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.FrequencyRegularization">
            <summary>Regularization based on rating frequency</summary>
            <description>
            Regularization proportional to the inverse of the square root of the number of ratings associated with the user or item.
            As described in the paper by Menon and Elkan.
            </description>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.Loss">
            <summary>The optimization target</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.MaxThreads">
            <summary>the maximum number of threads to use</summary>
            <remarks>
              For parallel learning, set this number to a multiple of the number of available cores/CPUs
            </remarks>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.BoldDriver">
            <summary>Use bold driver heuristics for learning rate adaption</summary>
            <remarks>
            Literature:
            <list type="bullet">
              <item><description>
                Rainer Gemulla, Peter J. Haas, Erik Nijkamp, Yannis Sismanis:
                Large-Scale Matrix Factorization with Distributed Stochastic Gradient Descent.
                KDD 2011.
                http://www.mpi-inf.mpg.de/~rgemulla/publications/gemulla11dsgd.pdf
              </description></item>
            </list>
            </remarks>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.NaiveParallelization">
            <summary>Use 'naive' parallelization strategy instead of conflict-free 'distributed' SGD</summary>
            <remarks>
            The exact sequence of updates depends on the thread scheduling.
            If you want reproducible results, e.g. when setting --random-seed=N, do NOT set this property.
            </remarks>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.last_loss">
            <summary>Loss for the last iteration, used by bold driver heuristics</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.user_bias">
            <summary>the user biases</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.item_bias">
            <summary>the item biases</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.rating_range_size">
            <summary>size of the interval of valid ratings</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.compute_gradient_common">
            <summary>delegate to compute the common term of the error gradient</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.InitModel">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.Train">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.Iterate">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.UpdateLearnRate">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.SetupLoss">
            <summary>Set up the common part of the error gradient of the loss function to optimize</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.Iterate(System.Collections.Generic.IList{System.Int32},System.Boolean,System.Boolean)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.Predict(System.Single[],System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.SaveModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.LoadModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.AddUser(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.AddItem(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.RetrainUser(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.RetrainItem(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.RemoveUser(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.RemoveItem(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.FoldIn(System.Collections.Generic.IList{System.Tuple{System.Int32,System.Single}})">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.ComputeLoss">
            <summary>Computes the value of the loss function that is currently being optimized</summary>
            <returns>the loss</returns>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.ComputeObjective">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.BiasedMatrixFactorization.ToString">
            
        </member>
        <member name="T:MyMediaLite.RatingPrediction.SVDPlusPlus">
            <summary>SVD++: Matrix factorization that also takes into account _what_ users have rated</summary>
            <remarks>
              <para>
                Literature:
                <list type="bullet">
                  <item><description>
                    Yehuda Koren:
                    Factorization Meets the Neighborhood: a Multifaceted Collaborative Filtering Model.
                    KDD 2008.
                    http://research.yahoo.com/files/kdd08koren.pdf
                  </description></item>
                </list>
              </para>
            </remarks>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.SVDPlusPlus.user_bias">
            <summary>rating biases of the users</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.SVDPlusPlus.item_bias">
            <summary>rating biases of the items</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.SVDPlusPlus.y">
            <summary>user factors (part expressed via the rated items)</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.SVDPlusPlus.p">
            <summary>user factors (individual part)</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.SVDPlusPlus.AdditionalFeedback">
            
        </member>
        <member name="F:MyMediaLite.RatingPrediction.SVDPlusPlus.items_rated_by_user">
            <summary>The items rated by the users</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.SVDPlusPlus.y_reg">
            <summary>precomputed regularization terms for the y matrix</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.SVDPlusPlus.BiasLearnRate">
            <summary>bias learn rate</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.SVDPlusPlus.BiasReg">
            <summary>regularization constant for biases</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.SVDPlusPlus.FrequencyRegularization">
            <summary>Regularization based on rating frequency</summary>
            <description>
            Regularization proportional to the inverse of the square root of the number of ratings associated with the user or item.
            As described in the paper by Menon and Elkan.
            </description>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SVDPlusPlus.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SVDPlusPlus.Train">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SVDPlusPlus.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SVDPlusPlus.InitModel">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SVDPlusPlus.Iterate(System.Collections.Generic.IList{System.Int32},System.Boolean,System.Boolean)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SVDPlusPlus.PrecomputeUserFactors">
            <summary>Precompute all user factors</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SVDPlusPlus.PrecomputeFactors(System.Int32)">
            <summary>Precompute the factors for a given user</summary>
            <param name='user_id'>the ID of the user</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SVDPlusPlus.AddUser(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SVDPlusPlus.AddItem(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SVDPlusPlus.RetrainUser(System.Int32)">
            <summary>Updates the latent factors on a user</summary>
            <param name="user_id">the user ID</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SVDPlusPlus.SaveModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SVDPlusPlus.LoadModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SVDPlusPlus.Predict(System.Single[],System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SVDPlusPlus.FoldIn(System.Collections.Generic.IList{System.Tuple{System.Int32,System.Single}})">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SVDPlusPlus.ComputeLoss">
            <summary>Compute the value of the loss function that is currently being optimized (RMSE)</summary>
            <returns>the loss</returns>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SVDPlusPlus.ComputeObjective">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SVDPlusPlus.ToString">
            
        </member>
        <member name="T:MyMediaLite.RatingPrediction.SigmoidSVDPlusPlus">
            <summary>SVD++: Matrix factorization that also takes into account _what_ users have rated; variant that uses a sigmoid function</summary>
            <remarks>
              <para>
                Literature:
                <list type="bullet">
                  <item><description>
                    Yehuda Koren:
                    Factorization Meets the Neighborhood: a Multifaceted Collaborative Filtering Model.
                    KDD 2008.
                    http://research.yahoo.com/files/kdd08koren.pdf
                  </description></item>
                </list>
              </para>
            </remarks>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.SigmoidSVDPlusPlus.rating_range_size">
            <summary>size of the interval of valid ratings</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.SigmoidSVDPlusPlus.Loss">
            <summary>The optimization target</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidSVDPlusPlus.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidSVDPlusPlus.Train">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidSVDPlusPlus.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidSVDPlusPlus.Iterate(System.Collections.Generic.IList{System.Int32},System.Boolean,System.Boolean)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidSVDPlusPlus.LoadModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidSVDPlusPlus.FoldIn(System.Collections.Generic.IList{System.Tuple{System.Int32,System.Single}})">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidSVDPlusPlus.ComputeLoss">
            <summary>Compute the value of the loss function that is currently being optimized</summary>
            <returns>the loss</returns>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidSVDPlusPlus.ToString">
            
        </member>
        <member name="T:MyMediaLite.RatingPrediction.SocialMF">
            <summary>Social-network-aware matrix factorization</summary>
            <remarks>
              <para>
                This implementation expects a binary trust network.
              </para>
              <para>
                Literature:
                <list type="bullet">
                  <item><description>
                    Mohsen Jamali, Martin Ester:
                    A matrix factorization technique with trust propagation for recommendation in social networks
                    RecSys 2010
                    http://portal.acm.org/citation.cfm?id=1864736
                  </description></item>
                </list>
              </para>
            </remarks>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.SocialMF.SocialRegularization">
            <summary>Social network regularization constant</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.SocialMF.UserRelation">
            
        </member>
        <member name="P:MyMediaLite.RatingPrediction.SocialMF.NumUsers">
            <summary>the number of users</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SocialMF.InitModel">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SocialMF.Iterate(System.Collections.Generic.IList{System.Int32},System.Boolean,System.Boolean)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SocialMF.ComputeObjective">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SocialMF.ToString">
            
        </member>
        <member name="T:MyMediaLite.RatingPrediction.SigmoidItemAsymmetricFactorModel">
            <summary>Asymmetric factor model</summary>
            <remarks>
              <para>
                Literature:
                <list type="bullet">
                  <item><description>
                    Arkadiusz Paterek:
                    Improving regularized singular value decomposition for collaborative filtering.
                    KDD Cup 2007.
                    http://arek-paterek.com/ap_kdd.pdf
                  </description></item>
                </list>
              </para>
            </remarks>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.SigmoidItemAsymmetricFactorModel.y">
            <summary>user factors (part expressed via the rated items)</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.SigmoidItemAsymmetricFactorModel.AdditionalFeedback">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidItemAsymmetricFactorModel.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidItemAsymmetricFactorModel.Train">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidItemAsymmetricFactorModel.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidItemAsymmetricFactorModel.Iterate(System.Collections.Generic.IList{System.Int32},System.Boolean,System.Boolean)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidItemAsymmetricFactorModel.SaveModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidItemAsymmetricFactorModel.LoadModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidItemAsymmetricFactorModel.ComputeObjective">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidItemAsymmetricFactorModel.FoldIn(System.Collections.Generic.IList{System.Tuple{System.Int32,System.Single}})">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidItemAsymmetricFactorModel.InitModel">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidItemAsymmetricFactorModel.PrecomputeUserFactors">
            <summary>Precompute all user factors</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidItemAsymmetricFactorModel.PrecomputeUserFactors(System.Int32)">
            <summary>Precompute the factors for a given user</summary>
            <param name='user_id'>the ID of the user</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidItemAsymmetricFactorModel.ToString">
            
        </member>
        <member name="T:MyMediaLite.RatingPrediction.ITransductiveRatingPredictor">
            <summary>Rating predictor that knows beforehand what it will have to rate</summary>
            <remarks>
            This is not so interesting for real-world use, but it useful for rating prediction
            competitions like the Netflix Prize.
            </remarks>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.ITransductiveRatingPredictor.AdditionalFeedback">
            <summary>user-item combinations that are known to be queried</summary>
        </member>
        <member name="T:MyMediaLite.RatingPrediction.TransductiveRatingPredictorExtensions">
            <summary>Helper methods for ITransductiveRatingPredictor</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.TransductiveRatingPredictorExtensions.UsersWhoRated(MyMediaLite.RatingPrediction.ITransductiveRatingPredictor)">
            <summary>For each item, get the users who rated it, both from the training and the test data</summary>
            <returns>array of array of user IDs</returns>
            <param name='recommender'>the recommender to retrieve the data from</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.TransductiveRatingPredictorExtensions.ItemsRatedByUser(MyMediaLite.RatingPrediction.ITransductiveRatingPredictor)">
            <summary>For each user, get the items they rated, both from the training and the test data</summary>
            <returns>array of array of item IDs</returns>
            <param name='recommender'>the recommender to retrieve the data from</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.TransductiveRatingPredictorExtensions.UserFeedbackCounts(MyMediaLite.RatingPrediction.ITransductiveRatingPredictor)">
            <summary>Compute the number of feedback events per user</summary>
            <returns>number of feedback events in both the training and tests data sets, per user</returns>
            <param name='recommender'>the recommender to get the data from</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.TransductiveRatingPredictorExtensions.ItemFeedbackCounts(MyMediaLite.RatingPrediction.ITransductiveRatingPredictor)">
            <summary>Compute the number of feedback events per item</summary>
            <returns>number of feedback events in both the training and tests data sets, per item</returns>
            <param name='recommender'>the recommender to get the data from</param>
        </member>
        <member name="T:MyMediaLite.RatingPrediction.SigmoidUserAsymmetricFactorModel">
            <summary>Asymmetric factor model which represents items in terms of the users that rated them</summary>
            <remarks>
              <para>
                Literature:
                <list type="bullet">
                  <item><description>
                    Arkadiusz Paterek:
                    Improving regularized singular value decomposition for collaborative filtering.
                    KDD Cup 2007.
                    http://arek-paterek.com/ap_kdd.pdf
                  </description></item>
                </list>
              </para>
            </remarks>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.SigmoidUserAsymmetricFactorModel.x">
            <summary>item factors (part expressed via the users who rated them)</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.SigmoidUserAsymmetricFactorModel.AdditionalFeedback">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidUserAsymmetricFactorModel.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidUserAsymmetricFactorModel.Train">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidUserAsymmetricFactorModel.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidUserAsymmetricFactorModel.Iterate(System.Collections.Generic.IList{System.Int32},System.Boolean,System.Boolean)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidUserAsymmetricFactorModel.SaveModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidUserAsymmetricFactorModel.LoadModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidUserAsymmetricFactorModel.ComputeObjective">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidUserAsymmetricFactorModel.FoldIn(System.Collections.Generic.IList{System.Tuple{System.Int32,System.Single}})">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidUserAsymmetricFactorModel.InitModel">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidUserAsymmetricFactorModel.PrecomputeItemFactors">
            <summary>Precompute all item factors</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidUserAsymmetricFactorModel.PrecomputeItemFactors(System.Int32)">
            <summary>Precompute the factors for a given item</summary>
            <param name='item_id'>the ID of the item</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidUserAsymmetricFactorModel.ToString">
            
        </member>
        <member name="T:MyMediaLite.RatingPrediction.SigmoidCombinedAsymmetricFactorModel">
            <summary>
              Asymmetric factor model which represents items in terms of the users that rated them,
              and users in terms of the items they rated
            </summary>
            <remarks>
              <para>
                Literature:
                <list type="bullet">
                  <item><description>
                    Arkadiusz Paterek:
                    Improving regularized singular value decomposition for collaborative filtering.
                    KDD Cup 2007.
                    http://arek-paterek.com/ap_kdd.pdf
                  </description></item>
                </list>
              </para>
            </remarks>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.SigmoidCombinedAsymmetricFactorModel.x">
            <summary>item factors (part expressed via the users who rated them)</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.SigmoidCombinedAsymmetricFactorModel.y">
            <summary>user factors (part expressed via the rated items)</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.SigmoidCombinedAsymmetricFactorModel.AdditionalFeedback">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidCombinedAsymmetricFactorModel.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidCombinedAsymmetricFactorModel.Train">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidCombinedAsymmetricFactorModel.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidCombinedAsymmetricFactorModel.Iterate(System.Collections.Generic.IList{System.Int32},System.Boolean,System.Boolean)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidCombinedAsymmetricFactorModel.SaveModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidCombinedAsymmetricFactorModel.LoadModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidCombinedAsymmetricFactorModel.ComputeObjective">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidCombinedAsymmetricFactorModel.Predict(System.Single[],System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidCombinedAsymmetricFactorModel.FoldIn(System.Collections.Generic.IList{System.Tuple{System.Int32,System.Single}})">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidCombinedAsymmetricFactorModel.InitModel">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidCombinedAsymmetricFactorModel.PrecomputeUserFactors">
            <summary>Precompute all user factors</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidCombinedAsymmetricFactorModel.PrecomputeUserFactors(System.Int32)">
            <summary>Precompute the factors for a given user</summary>
            <param name='user_id'>the ID of the user</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidCombinedAsymmetricFactorModel.PrecomputeItemFactors">
            <summary>Precompute all item factors</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidCombinedAsymmetricFactorModel.PrecomputeItemFactors(System.Int32)">
            <summary>Precompute the factors for a given item</summary>
            <param name='item_id'>the ID of the item</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.SigmoidCombinedAsymmetricFactorModel.ToString">
            
        </member>
        <member name="T:MyMediaLite.RatingPrediction.NaiveBayes">
            <summary>Attribute-aware rating predictor using Naive Bayes</summary>
            <remarks>
            This recommender supports incremental updates.
            </remarks>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.NaiveBayes.ClassSmoothing">
            <summary>Smoothing parameter for the class probabilities (rating priors)</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.NaiveBayes.AttributeSmoothing">
            <summary>Smoothing parameter for the attribute (given class/rating) probabilities</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.NaiveBayes.ItemAttributes">
            
        </member>
        <member name="P:MyMediaLite.RatingPrediction.NaiveBayes.NumItemAttributes">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.NaiveBayes.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.NaiveBayes.Train">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.NaiveBayes.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.NaiveBayes.LoadModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.NaiveBayes.SaveModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.NaiveBayes.AddRatings(MyMediaLite.Data.IRatings)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.NaiveBayes.UpdateRatings(MyMediaLite.Data.IRatings)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.NaiveBayes.RemoveRatings(MyMediaLite.Data.IDataSet)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.NaiveBayes.AddUser(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.NaiveBayes.ToString">
            
        </member>
        <member name="T:MyMediaLite.RatingPrediction.ExternalRatingPredictor">
            <summary>Uses externally computed predictions</summary>
            <remarks>
            <para>
              This recommender is for loading predictions made by external (non-MyMediaLite) recommenders,
              so that we can use MyMediaLite's evaluation framework to evaluate their accuracy.
            </para>
            <para>
              This recommender does NOT support incremental updates.
            </para>
            </remarks>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.ExternalRatingPredictor.PredictionFile">
            <summary>the file with the stored ratings</summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.ExternalRatingPredictor.UserMapping">
            
        </member>
        <member name="P:MyMediaLite.RatingPrediction.ExternalRatingPredictor.ItemMapping">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.ExternalRatingPredictor.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.ExternalRatingPredictor.Train">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.ExternalRatingPredictor.CanPredict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.ExternalRatingPredictor.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.ExternalRatingPredictor.SaveModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.ExternalRatingPredictor.LoadModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.ExternalRatingPredictor.ToString">
            
        </member>
        <member name="T:MyMediaLite.RatingPrediction.GSVDPlusPlus">
             <summary>Item Attribute Aware SVD++: Matrix factorization that also takes into account _what_ users have rated and its attributes.</summary>
             <remarks>
               <para>
                 Literature:
                 <list type="bullet">
                   <item><description>
                     Marcelo Manzato:
                     gSVD++: supporting implicit feedback on recommender systems with metadata awareness.
                     SAC 2013.
            
                   </description></item>
                 </list>
               </para>
             </remarks>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.GSVDPlusPlus.ItemAttributes">
            
        </member>
        <member name="P:MyMediaLite.RatingPrediction.GSVDPlusPlus.NumItemAttributes">
            
        </member>
        <member name="F:MyMediaLite.RatingPrediction.GSVDPlusPlus.x">
            <summary>item factors (part expressed via the items attributes)</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.GSVDPlusPlus.q">
            <summary>item factors (individual part)</summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.GSVDPlusPlus.x_reg">
            <summary>precomputed regularization terms for the x matrix</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.GSVDPlusPlus.InitModel">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.GSVDPlusPlus.Train">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.GSVDPlusPlus.Iterate(System.Collections.Generic.IList{System.Int32},System.Boolean,System.Boolean)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.GSVDPlusPlus.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.RatingPrediction.GSVDPlusPlus.PrecomputeItemFactors">
            <summary>Precompute all item factors</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.GSVDPlusPlus.PrecomputeItemFactors(System.Int32)">
            <summary>Precompute the factors for a given item</summary>
            <param name='item_id'>the ID of the item</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.GSVDPlusPlus.FoldIn(System.Collections.Generic.IList{System.Tuple{System.Int32,System.Single}})">
            
        </member>
        <member name="T:MyMediaLite.RatingPrediction.WeatherItemRecommender">
             <summary>Weahter based enhancement of Rank-GeoFM</summary>
             <remarks>
             Alexander Oberegger
             [1] Rank-GeoFM: A Ranking based Geographical Factorization Method for Point of Interest 
             http://dl.acm.org/citation.cfm?id=2767722
            
             </remarks>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherItemRecommender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyMediaLite.RatingPrediction.WeatherItemRecommender"/> class.
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.weatherLocationPost">
            <summary>
            If true apply weather location post-filtering
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.weatherCategoryPost">
            <summary>
            If true apply weather category post-filtering
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.idUserMapper">
            <summary>
            Maps Database UserId to Matrix UserId in U1-U4
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.idLocMapper">
            <summary>
            Maps Database LocationId to Matrix LocationId in L1
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.idCatMapper">
            <summary>
            Maps Database CategoryId to Matrix CategoryId in CA1.
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.parameters_initialized">
            <summary>
            States if latent factors got initialized with constructor.
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.evaluation_at">
            <summary>
            After evaluation_at iterations a statistic will be made.
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.max_iter">
            <summary>
            Maximum amount of iterations.
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.weather_aware">
            <summary>
            States if weather should be considered
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.weather_category_aware">
            <summary>
            States if weather category calculations should be made.
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.epsilon">
            <summary>
            Hyperparameter ε initialized as in [1]
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.C">
            <summary>
            Hyperparameter C initialized as in [1]
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.gamma">
            <summary>
            Hyperparameter Learning rate γ initialized as in [1]
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.alpha">
            <summary>
            "As a result, tuning the hyperparameter α can balance the contributions of user-preference and geographical influence scores to the final recommendation score." [1]
            "We find that Rank-GeoFM perfoms the best at α = 0.2 for POI recommendation on both data, and performs the best at α=0.1 for time-aware POI recommendation on both data. " [1]
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.beta">
            <summary>
            "As a result, tuning the hyperparameter beta can balance the contributions of user-preference and weather influence scores to the final recommendation score." [1]
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.mu">
            <summary>
            "As a result, tuning the hyperparameter mu can balance the contributions of user-preference and weather category influence scores to the final recommendation score." [1]
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.k">
            <summary>
            Nk(ℓ) the set of k nearest POIs of ℓ
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.k2">
            <summary>
            Nk(c) the set of k nearest Categories of c
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.K">
            <summary>
            K dimension for model paramaters Θ
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.distanceMatrix">
            <summary>
            Stores the distances between locations
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.categoryDistanceMatrix">
            <summary>
            Stores the distances between locations
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.W">
            <summary>
            W Matrix as mentioned in [1] W ∈ R |L|x|L|
            saving the geo probabilities between POI's
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.CL">
            <summary>
            Climate Matrix CL ∈ R |L|x|L|
            saving the weather similarities/probabilities between POI's
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.CLC">
            <summary>
            Climate Matrix CLC ∈ R |C|x|C|
            saving the weather similarities/probabilities between Categories
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.U1">
            <summary>
            "Model Paramaeter U^(1) used to model the user's own preference. U(1) ∈ R|U|×K" [1]
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.L1">
            <summary>
            "Model Paramaeter L^(1) used to model the user's own preference. L(1) ∈ R|L|×K" [1]
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.U2">
            <summary>
             On the other hand, we introduce one extra latent factor matrix U(2) ∈ R|U|×K for users, and employ U(2) to model the interaction between users and
             POIs for incorporating the geographical influence.
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.U3">
            <summary>
            Extra latent factor matrix U(3) ∈ R|U|×K for users, and employ U(3) to model the interaction between users and 
            POIs for incorporating weather influence.
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.U4">
            <summary>
            "Model Paramaeter U^(4) used to model the user's own preference regarding to categories. U(4) ∈ R|U|×K" [1]
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.CA1">
            <summary>
            "Model Paramaeter CA^(1) used to model the user's own category preference. CA^(1) ∈ R|CA|×K" [1]
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.nearestNeighbors">
            <summary>
            Stores the nearest neighbors of each location.
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.nearestNeighborsCategory">
            <summary>
            Stores the nearest neighbors of each location.
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.venueCategoryMapper">
            <summary>
            The venue category mapper.
            </summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.WeatherItemRecommender.Validation">
            <summary>
            Validation data
            </summary>
            <value>The validation.</value>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherItemRecommender.validation_ratings">
            <summary>validation data</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherItemRecommender.Predict(System.Int32,System.Int32)">
            <summary>
            Predict rating or score for a given user-item combination
            </summary>
            <remarks></remarks>
            <param name="user_id">the user ID</param>
            <param name="item_id">the item ID</param>
            <returns>the predicted score/rating for the given user-item combination</returns>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherItemRecommender.Predict(System.Int32,System.Int32,System.DateTime)">
            <summary>
            predict rating at a certain point in time
            </summary>
            <param name="user_id">the user ID</param>
            <param name="item_id">the item ID</param>
            <param name="time">the time of the rating event</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherItemRecommender.deg2rad(System.Double)">
            <summary>
            This function converts decimal degrees to radians
            </summary>
            <param name="deg">Degrees</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherItemRecommender.rad2deg(System.Double)">
            <summary>
            This function converts radians to decimal degrees
            </summary>
            <param name="rad">Radians</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherItemRecommender.distance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Distance in kilometer between two locations specified by lat1, lon1, lat2 and lon2.
            </summary>
            <param name="lat1">Latitude of location 1.</param>
            <param name="lon1">Longitude of location 1.</param>
            <param name="lat2">Latitude of location 2.</param>
            <param name="lon2">Longitude of location 2.</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherItemRecommender.createCategoryInString(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Gets string for subselecting all category id's used from database
            </summary>
            <returns>The category in string.</returns>
            <param name="categories">Categories.</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherItemRecommender.getAllIdsStringForDatabase">
            <summary>
            Gets string for subselecting all id's used from database
            </summary>
            <returns>The all identifiers string for database.</returns>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherItemRecommender.createDistanceMatrix">
            <summary>
            Initializes the distance matrix between all POI's
            </summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherItemRecommender.getDistanceProbability(System.Int32,System.Int32)">
            <summary>
            Get the probability of l' being checked-in when l has been checked-in regarding to [1]
            </summary>
            <returns>The distance probability.</returns>
            <param name="l1">l</param>
            <param name="l2">l'</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherItemRecommender.getNearestNeighbors(System.Int32)">
            <summary>
            Returns the k nearest neighbors (N_k(l) in [1]) of location l
            </summary>
            <returns>The nearest neighbors.</returns>
            <param name="l">L.</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherItemRecommender.initNearestNeighborMatrix">
            <summary>
            Initializes the nearest neighbor matrix.
            </summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherItemRecommender.createWMatrix">
            <summary>
            Creates the W matrix that contains probabilities that user visits POI l when l' has been visited.
            </summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherItemRecommender.createClimateMatrixCategory">
            <summary>
            creates the weather similarity matrix CLC for Categories
            </summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherItemRecommender.createClimateMatrix">
            <summary>
            creates the weather similarity matrix CL
            </summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherItemRecommender.sumWeightOfTwoLocationsWeather(System.Int32)">
            <summary>
            Calculates sum(cl_{l,l*}*l_{l*}^(1)
            </summary>
            <returns>The geographical weight sum of a location.</returns>
            <param name="l">Location.</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherItemRecommender.sumWeightOfTwoLocationsGeo(System.Int32)">
            <summary>
            Calculates sum(w_{l,l*}*l_{l*}^(1)
            </summary>
            <returns>The geographical weight sum of a location.</returns>
            <param name="l">Location.</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherItemRecommender.computeRecommendationScore(System.Int32,System.Int32,System.Double[0:,0:]@,System.Double[0:,0:]@,System.Double[0:,0:]@)">
            <summary>
            Computes the recommendation score. equation 4 of [1]
            </summary>
            <returns>The recommendation score.</returns>
            <param name="u">U.</param>
            <param name="l">L.</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherItemRecommender.indicatorFunction(System.Boolean)">
            <summary>
            Indicator function returns 1 if statement is true 0 otherwise
            </summary>
            <returns>The function.</returns>
            <param name="statement">If set to <c>true</c> statement.</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherItemRecommender.incompFunction(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Rating incompatibility function.
            </summary>
            <returns>The function.</returns>
            <param name="xul">Xul.</param>
            <param name="xul2">Xul2.</param>
            <param name="yul">Yul.</param>
            <param name="yul2">Yul2.</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherItemRecommender.sigmoidFunction(System.Double)">
            <summary>
            Used to approximate the indicator funciton. [1]
            </summary>
            <returns>The function.</returns>
            <param name="a">The alpha component.</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherItemRecommender.deltaFunction(System.Double,System.Double)">
            <summary>
            Function for computing δuℓℓ′ [1].
            </summary>
            <returns>The function.</returns>
            <param name="y_ul">Y ul.</param>
            <param name="y_ul2">Y ul2.</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherItemRecommender.E(System.Int32)">
            <summary>
            Computs the ranking incompatibility from incompFunction into a loss [1]
            </summary>
            <param name="r">Rating incompatibility.</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherItemRecommender.normalizeEuclidean(System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Normalizes a vectors euclidean norm to C.
            </summary>
            <returns>The to c.</returns>
            <param name="orig">Original.</param>
            <param name="value">The value to normalize to.</param> 
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherItemRecommender.adjustWeatherAwareBetweenLocations(System.Int32,System.Int32,System.Int32,System.Double,System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Adjusts the weather aware latent factors between locations.
            </summary>
            <param name="l1">L1.</param>
            <param name="l2">L2.</param>
            <param name="user">User.</param>
            <param name="eta">Eta.</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherItemRecommender.adjustGeo(System.Int32,System.Int32,System.Int32,System.Double,System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Adjusts geo latent factors according to [1].
            </summary>
            <param name="l1">L1.</param>
            <param name="l2">L2.</param>
            <param name="user">User.</param>
            <param name="eta">Eta.</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherItemRecommender.adjustWeatherAwareCategories(System.Int32,System.Int32,System.Int32,System.Double,System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Adjusts the weather aware latent factors between categories.
            </summary>
            <param name="l1">L1.</param>
            <param name="l2">L2.</param>
            <param name="user">User.</param>
            <param name="eta">Eta.</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherItemRecommender.Train">
            <summary>
            Learn the model parameters of the recommender from the training data
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender">
             <summary>Weahter based enhancement of Rank-GeoFM</summary>
             <remarks>
             Alexander Oberegger
             [1] Rank-GeoFM: A Ranking based Geographical Factorization Method for Point of Interest 
             http://dl.acm.org/citation.cfm?id=2767722
            
             </remarks>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyMediaLite.RatingPrediction.WeatherItemRecommender"/> class.
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.idUserMapper">
            <summary>
            Maps Database UserId to Matrix UserId in U1-U4
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.idLocMapper">
            <summary>
            Maps Database LocationId to Matrix LocationId in L1
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.evaluation_at">
            <summary>
            After evaluation_at iterations a statistic will be made.
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.max_iter">
            <summary>
            Maximum amount of iterations.
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.weather_aware">
            <summary>
            States if weather should be considered
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.epsilon">
            <summary>
            Hyperparameter ε initialized as in [1]
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.C">
            <summary>
            Hyperparameter C initialized as in [1]
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.gamma">
            <summary>
            Hyperparameter Learning rate γ initialized as in [1]
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.alpha">
            <summary>
            "As a result, tuning the hyperparameter α can balance the contributions of user-preference and geographical influence scores to the final recommendation score." [1]
            "We find that Rank-GeoFM perfoms the best at α = 0.2 for POI recommendation on both data, and performs the best at α=0.1 for time-aware POI recommendation on both data. " [1]
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.beta">
            <summary>
            "As a result, tuning the hyperparameter beta can balance the contributions of user-preference and weather influence scores to the final recommendation score." [1]
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.k">
            <summary>
            Nk(ℓ) the set of k nearest POIs of ℓ
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.K">
            <summary>
            K dimension for model paramaters Θ
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.distanceMatrix">
            <summary>
            Stores the distances between locations
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.W">
            <summary>
            W Matrix as mentioned in [1] W ∈ R |L|x|L|
            saving the geo probabilities between POI's
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.F">
            <summary>
            Climate Matrix CL ∈ R |WeatherDimensions|x|K|
            saving the weather similarities/probabilities between POI's
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.U1">
            <summary>
            "Model Paramaeter U^(1) used to model the user's own preference. U(1) ∈ R|U|×K" [1]
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.U2">
            <summary>
             On the other hand, we introduce one extra latent factor matrix U(2) ∈ R|U|×K for users, and employ U(2) to model the interaction between users and
             POIs for incorporating the geographical influence.
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.L1">
            <summary>
            "Model Paramaeter L^(1) used to model the user's own preference. L(1) ∈ R|L|×K" [1]
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.L2">
            <summary>
            "Model Paramaeter L^(2) used to model the user's own preference. L(2) ∈ R|L|×K" [1]
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.L3">
            <summary>
            "Model Paramaeter L^(3) used to model the user's own preference. L(3) ∈ R|L|×K" [1]
            </summary>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.nearestNeighbors">
            <summary>
            Stores the nearest neighbors of each location.
            </summary>
        </member>
        <member name="P:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.Validation">
            <summary>
            Validation data
            </summary>
            <value>The validation.</value>
        </member>
        <member name="F:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.validation_ratings">
            <summary>validation data</summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.Predict(System.Int32,System.Int32)">
            <summary>
            Predict rating or score for a given user-item combination
            </summary>
            <remarks></remarks>
            <param name="user_id">the user ID</param>
            <param name="item_id">the item ID</param>
            <returns>the predicted score/rating for the given user-item combination</returns>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.Predict(System.Int32,System.Int32,System.DateTime)">
            <summary>
            predict rating at a certain point in time
            </summary>
            <param name="user_id">the user ID</param>
            <param name="item_id">the item ID</param>
            <param name="time">the time of the rating event</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.deg2rad(System.Double)">
            <summary>
            This function converts decimal degrees to radians
            </summary>
            <param name="deg">Degrees</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.rad2deg(System.Double)">
            <summary>
            This function converts radians to decimal degrees
            </summary>
            <param name="rad">Radians</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.distance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Distance in kilometer between two locations specified by lat1, lon1, lat2 and lon2.
            </summary>
            <param name="lat1">Latitude of location 1.</param>
            <param name="lon1">Longitude of location 1.</param>
            <param name="lat2">Latitude of location 2.</param>
            <param name="lon2">Longitude of location 2.</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.createCategoryInString(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Gets string for subselecting all category id's used from database
            </summary>
            <returns>The category in string.</returns>
            <param name="categories">Categories.</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.getAllIdsStringForDatabase">
            <summary>
            Gets string for subselecting all id's used from database
            </summary>
            <returns>The all identifiers string for database.</returns>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.createDistanceMatrix">
            <summary>
            Initializes the distance matrix between all POI's
            </summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.getDistanceProbability(System.Int32,System.Int32)">
            <summary>
            Get the probability of l' being checked-in when l has been checked-in regarding to [1]
            </summary>
            <returns>The distance probability.</returns>
            <param name="l1">l</param>
            <param name="l2">l'</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.getNearestNeighbors(System.Int32)">
            <summary>
            Returns the k nearest neighbors (N_k(l) in [1]) of location l
            </summary>
            <returns>The nearest neighbors.</returns>
            <param name="l">L.</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.initNearestNeighborMatrix">
            <summary>
            Initializes the nearest neighbor matrix.
            </summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.createWMatrix">
            <summary>
            Creates the W matrix that contains probabilities that user visits POI l when l' has been visited.
            </summary>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.sumWeightOfTwoLocationsGeo(System.Int32)">
            <summary>
            Calculates sum(w_{l,l*}*l_{l*}^(1)
            </summary>
            <returns>The geographical weight sum of a location.</returns>
            <param name="l">Location.</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.computeRecommendationScore(System.Int32,System.Int32)">
            <summary>
            Computes the recommendation score. equation 4 of [1]
            </summary>
            <returns>The recommendation score.</returns>
            <param name="u">U.</param>
            <param name="l">L.</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.indicatorFunction(System.Boolean)">
            <summary>
            Indicator function returns 1 if statement is true 0 otherwise
            </summary>
            <returns>The function.</returns>
            <param name="statement">If set to <c>true</c> statement.</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.incompFunction(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Rating incompatibility function.
            </summary>
            <returns>The function.</returns>
            <param name="xul">Xul.</param>
            <param name="xul2">Xul2.</param>
            <param name="yul">Yul.</param>
            <param name="yul2">Yul2.</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.sigmoidFunction(System.Double)">
            <summary>
            Used to approximate the indicator funciton. [1]
            </summary>
            <returns>The function.</returns>
            <param name="a">The alpha component.</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.deltaFunction(System.Double,System.Double)">
            <summary>
            Function for computing δuℓℓ′ [1].
            </summary>
            <returns>The function.</returns>
            <param name="y_ul">Y ul.</param>
            <param name="y_ul2">Y ul2.</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.E(System.Int32)">
            <summary>
            Computs the ranking incompatibility from incompFunction into a loss [1]
            </summary>
            <param name="r">Rating incompatibility.</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.normalizeEuclidean(System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Normalizes a vectors euclidean norm to C.
            </summary>
            <returns>The to c.</returns>
            <param name="orig">Original.</param>
            <param name="value">The value to normalize to.</param> 
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.adjustGeo(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Adjusts geo latent factors according to [1].
            </summary>
            <param name="l1">L1.</param>
            <param name="l2">L2.</param>
            <param name="user">User.</param>
            <param name="eta">Eta.</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.getFeatureOfTimes(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.IList{System.Tuple{System.Int32,System.DateTime}}})">
            <summary>
            Returns 
            </summary>
            <returns>The feature of times.</returns>
            <param name="user_items_time">User items time.</param>
        </member>
        <member name="M:MyMediaLite.RatingPrediction.WeatherContextAwareItemRecommender.Train">
            <summary>
            Learn the model parameters of the recommender from the training data
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:MyMediaLite.ItemRecommendation.BPRMF">
            <summary>Matrix factorization model for item prediction (ranking) optimized for BPR </summary>
            <remarks>
              <para>
                BPR reduces ranking to pairwise classification.
                The different variants (settings) of this recommender
                roughly optimize the area under the ROC curve (AUC).
              </para>
              <para>
                \f[
                  \max_\Theta \sum_{(u,i,j) \in D_S}
                                   \ln g(\hat{s}_{u,i,j}(\Theta)) - \lambda ||\Theta||^2 ,
                \f]
                where \f$\hat{s}_{u,i,j}(\Theta) := \hat{s}_{u,i}(\Theta) - \hat{s}_{u,j}(\Theta)\f$
                and \f$D_S = \{ (u, i, j) | i \in \mathcal{I}^+_u \wedge j \in \mathcal{I}^-_u \}\f$.
                \f$\Theta\f$ represents the parameters of the model and \f$\lambda\f$ is a regularization constant.
                \f$g\f$ is the  logistic function.
              </para>
              <para>
                In this implementation, we distinguish different regularization updates for users and positive and negative items,
                which means we do not have only one regularization constant. The optimization problem specified above thus is only
                an approximation.
              </para>
              <para>
                Literature:
                <list type="bullet">
                  <item><description>
                    Steffen Rendle, Christoph Freudenthaler, Zeno Gantner, Lars Schmidt-Thieme:
                    BPR: Bayesian Personalized Ranking from Implicit Feedback.
                    UAI 2009.
                    http://www.ismll.uni-hildesheim.de/pub/pdfs/Rendle_et_al2009-Bayesian_Personalized_Ranking.pdf
                  </description></item>
                </list>
              </para>
              <para>
                Different sampling strategies are configurable by setting the UniformUserSampling and WithReplacement accordingly.
                To get the strategy from the original paper, set UniformUserSampling=false and WithReplacement=false.
                WithReplacement=true (default) gives you usually a slightly faster convergence, and UniformUserSampling=true (default)
                (approximately) optimizes the average AUC over all users.
              </para>
              <para>
                This recommender supports incremental updates.
              </para>
            </remarks>
        </member>
        <member name="F:MyMediaLite.ItemRecommendation.BPRMF.item_bias">
            <summary>Item bias terms</summary>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.BPRMF.WithReplacement">
            <summary>Sample positive observations with (true) or without (false) replacement</summary>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.BPRMF.UniformUserSampling">
            <summary>Sample uniformly from users</summary>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.BPRMF.BiasReg">
            <summary>Regularization parameter for the bias term</summary>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.BPRMF.LearnRate">
            <summary>Learning rate alpha</summary>
        </member>
        <member name="F:MyMediaLite.ItemRecommendation.BPRMF.learn_rate">
            <summary>Learning rate alpha</summary>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.BPRMF.RegU">
            <summary>Regularization parameter for user factors</summary>
        </member>
        <member name="F:MyMediaLite.ItemRecommendation.BPRMF.reg_u">
            <summary>Regularization parameter for user factors</summary>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.BPRMF.RegI">
            <summary>Regularization parameter for positive item factors</summary>
        </member>
        <member name="F:MyMediaLite.ItemRecommendation.BPRMF.reg_i">
            <summary>Regularization parameter for positive item factors</summary>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.BPRMF.RegJ">
            <summary>Regularization parameter for negative item factors</summary>
        </member>
        <member name="F:MyMediaLite.ItemRecommendation.BPRMF.reg_j">
            <summary>Regularization parameter for negative item factors</summary>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.BPRMF.UpdateJ">
            <summary>If set (default), update factors for negative sampled items during learning</summary>
        </member>
        <member name="F:MyMediaLite.ItemRecommendation.BPRMF.update_j">
            <summary>If set (default), update factors for negative sampled items during learning</summary>
        </member>
        <member name="F:MyMediaLite.ItemRecommendation.BPRMF.loss_sample_u">
            <summary>array of user components of triples to use for approximate loss computation</summary>
        </member>
        <member name="F:MyMediaLite.ItemRecommendation.BPRMF.loss_sample_i">
            <summary>array of positive item components of triples to use for approximate loss computation</summary>
        </member>
        <member name="F:MyMediaLite.ItemRecommendation.BPRMF.loss_sample_j">
            <summary>array of negative item components of triples to use for approximate loss computation</summary>
        </member>
        <member name="F:MyMediaLite.ItemRecommendation.BPRMF.random">
            <summary>Reference to (per-thread) singleton random number generator</summary>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRMF.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRMF.InitModel">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRMF.Train">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRMF.Iterate">
            <summary>Perform one iteration of stochastic gradient ascent over the training data</summary>
            <remarks>
            One iteration is samples number of positive entries in the training matrix times
            </remarks>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRMF.IterateWithReplacementUniformUser">
            <summary>
            Iterate over the training data, uniformly sample from users with replacement.
            </summary>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRMF.IterateWithoutReplacementUniformUser">
            <summary>
            Iterate over the training data, uniformly sample from users without replacement.
            </summary>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRMF.IterateWithReplacementUniformPair">
            <summary>
            Iterate over the training data, uniformly sample from user-item pairs with replacement.
            </summary>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRMF.IterateWithoutReplacementUniformPair">
            <summary>
            Iterate over the training data, uniformly sample from user-item pairs without replacement.
            </summary>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRMF.IterateWithoutReplacementUniformPair(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Iterate over the training data, uniformly sample from user-item pairs without replacement.
            </summary>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRMF.SampleOtherItem(System.Int32,System.Int32,System.Int32@)">
            <summary>Sample another item, given the first one and the user</summary>
            <param name="user_id">the user ID</param>
            <param name="item_id">the ID of the given item</param>
            <param name="other_item_id">the ID of the other item</param>
            <returns>true if the given item was already seen by user u</returns>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRMF.SampleItemPair(System.Collections.Generic.ICollection{System.Int32},System.Int32@,System.Int32@)">
            <summary>Sample a pair of items, given a user</summary>
            <param name="user_items">the items accessed by the given user</param>
            <param name="item_id">the ID of the first item</param>
            <param name="other_item_id">the ID of the second item</param>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRMF.SampleUser">
            <summary>Uniformly sample a user that has viewed at least one and not all items</summary>
            <returns>the user ID</returns>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRMF.SampleTriple(System.Int32@,System.Int32@,System.Int32@)">
            <summary>Sample a triple for BPR learning</summary>
            <param name="user_id">the user ID</param>
            <param name="item_id">the ID of the first item</param>
            <param name="other_item_id">the ID of the second item</param>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRMF.UpdateFactors(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Update latent factors according to the stochastic gradient descent update rule</summary>
            <param name="user_id">the user ID</param>
            <param name="item_id">the ID of the first item</param>
            <param name="other_item_id">the ID of the second item</param>
            <param name="update_u">if true, update the user latent factors</param>
            <param name="update_i">if true, update the latent factors of the first item</param>
            <param name="update_j">if true, update the latent factors of the second item</param>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRMF.AddItem(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRMF.RemoveItem(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRMF.RetrainUser(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRMF.RetrainItem(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRMF.ComputeObjective">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRMF.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRMF.SaveModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRMF.LoadModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRMF.ScoreItems(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRMF.FoldIn(System.Collections.Generic.IList{System.Int32})">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRMF.ToString">
            
        </member>
        <member name="T:MyMediaLite.ItemRecommendation.ItemAttributeKNN">
            <summary>k-nearest neighbor (kNN) item-based collaborative filtering using the correlation of the item attibutes</summary>
            <remarks>
            This recommender does NOT support incremental updates.
            </remarks>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.ItemAttributeKNN.DataMatrix">
            
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.ItemAttributeKNN.ItemAttributes">
            
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.ItemAttributeKNN.NumItemAttributes">
            
        </member>
        <member name="T:MyMediaLite.ItemRecommendation.ItemKNN">
            <summary>k-nearest neighbor (kNN) item-based collaborative filtering</summary>
            <remarks>
            This recommender supports incremental updates for the BinaryCosine and Cooccurrence similarities.
            </remarks>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.ItemKNN.DataMatrix">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.ItemKNN.Train">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.ItemKNN.AddItem(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.ItemKNN.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.ItemKNN.GetItemSimilarity(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.ItemKNN.GetMostSimilarItems(System.Int32,System.UInt32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.ItemKNN.AddFeedback(System.Collections.Generic.ICollection{System.Tuple{System.Int32,System.Int32}})">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.ItemKNN.RemoveFeedback(System.Collections.Generic.ICollection{System.Tuple{System.Int32,System.Int32}})">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.ItemKNN.Update(System.Collections.Generic.ICollection{System.Tuple{System.Int32,System.Int32}})">
            <summary>Update the correlation matrix for the given feedback</summary>
            <param name='feedback'>the feedback (user-item tuples)</param>
        </member>
        <member name="T:MyMediaLite.ItemRecommendation.ItemRecommender">
             <summary>
             Abstract item recommender class that loads the (positive-only implicit feedback) training data into memory
             and provides flexible access to it.
             </summary>
             <remarks>
             The data is stored in two sparse matrices:
             one user-wise (in the rows)  and one item-wise.
            
             Positive-only means we only which items a user has accessed/liked, but not which items a user does not like.
             If there is not data for a specific item, we do not know whether the user has just not yet accessed the item,
             or whether they really dislike it.
            
             See http://recsyswiki/wiki/Item_recommendation and http://recsyswiki/wiki/Implicit_feedback
             </remarks>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.ItemRecommender.Feedback">
            <summary>the feedback data to be used for training</summary>
        </member>
        <member name="T:MyMediaLite.ItemRecommendation.KNN">
            <summary>Base class for item recommenders that use some kind of k-nearest neighbors (kNN) model</summary>
            <seealso cref="T:MyMediaLite.ItemRecommendation.KNN"/>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.KNN.K">
            <summary>The number of neighbors to take into account for prediction</summary>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.KNN.Alpha">
            <summary>Alpha parameter for BidirectionalConditionalProbability</summary>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.KNN.Weighted">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MyMediaLite.ItemRecommendation.KNN"/> is weighted.
            </summary>
            <remarks>
            TODO add literature reference
            </remarks>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.KNN.Q">
            <summary>Exponent to be used for transforming the neighbor's weights</summary>
            <remarks>
              <para>
                A value of 0 leads to counting of the relevant neighbors.
                1 is the usual weighted prediction.
                Values greater than 1 give higher weight to higher correlated neighbors.
              </para>
              <para>
                TODO LIT
              </para>
            </remarks>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.KNN.Correlation">
            <summary>The kind of correlation to use</summary>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.KNN.DataMatrix">
            <summary>data matrix to learn the correlation from</summary>
        </member>
        <member name="F:MyMediaLite.ItemRecommendation.KNN.k">
            <summary>The number of neighbors to take into account for prediction</summary>
        </member>
        <member name="F:MyMediaLite.ItemRecommendation.KNN.nearest_neighbors">
            <summary>Precomputed nearest neighbors</summary>
        </member>
        <member name="F:MyMediaLite.ItemRecommendation.KNN.correlation_matrix">
            <summary>Correlation matrix over some kind of entity, e.g. users or items</summary>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.KNN.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.KNN.RecomputeNeighbors(System.Collections.Generic.ICollection{System.Int32})">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.KNN.Train">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.KNN.SaveModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.KNN.LoadModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.KNN.ResizeNearestNeighbors(System.Int32)">
            <summary>Resizes the nearest neighbors list if necessary</summary>
            <param name='new_size'>the new size</param>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.KNN.ToString">
            
        </member>
        <member name="T:MyMediaLite.ItemRecommendation.MF">
            <summary>Abstract class for matrix factorization based item predictors</summary>
        </member>
        <member name="F:MyMediaLite.ItemRecommendation.MF.user_factors">
            <summary>Latent user factor matrix</summary>
        </member>
        <member name="F:MyMediaLite.ItemRecommendation.MF.item_factors">
            <summary>Latent item factor matrix</summary>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.MF.InitMean">
            <summary>Mean of the normal distribution used to initialize the latent factors</summary>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.MF.InitStdDev">
            <summary>Standard deviation of the normal distribution used to initialize the latent factors</summary>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.MF.NumFactors">
            <summary>Number of latent factors per user/item</summary>
        </member>
        <member name="F:MyMediaLite.ItemRecommendation.MF.num_factors">
            <summary>Number of latent factors per user/item</summary>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.MF.NumIter">
            <summary>Number of iterations over the training data</summary>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MF.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MF.InitModel">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MF.Train">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MF.Iterate">
            <summary>Iterate once over the data</summary>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MF.AddFeedback(System.Collections.Generic.ICollection{System.Tuple{System.Int32,System.Int32}})">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MF.RemoveFeedback(System.Collections.Generic.ICollection{System.Tuple{System.Int32,System.Int32}})">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MF.RetrainUser(System.Int32)">
            <summary>Retrain the latent factors of a given user</summary>
            <param name="user_id">the user ID</param>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MF.RetrainItem(System.Int32)">
            <summary>Retrain the latent factors of a given item</summary>
            <param name="item_id">the item ID</param>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MF.AddUser(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MF.AddItem(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MF.RemoveUser(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MF.RemoveItem(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MF.ComputeObjective">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MF.Predict(System.Int32,System.Int32)">
            <summary>Predict the weight for a given user-item combination</summary>
            <remarks>
            If the user or the item are not known to the recommender, zero is returned.
            To avoid this behavior for unknown entities, use CanPredict() to check before.
            </remarks>
            <param name="user_id">the user ID</param>
            <param name="item_id">the item ID</param>
            <returns>the predicted weight</returns>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MF.SaveModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MF.LoadModel(System.String)">
            
        </member>
        <member name="T:MyMediaLite.ItemRecommendation.MostPopular">
            <summary>Most-popular item recommender</summary>
            <remarks>
              <para>
                Items are weighted by how often they have been seen in the past.
              </para>
              <para>
                This method is not personalized.
              </para>
              <para>
                This recommender supports incremental updates.
              </para>
            </remarks>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.MostPopular.ByUser">
            <summary>
            If true, the popularity of an item is measured by the number of unique users that have accessed it.
            If false, the popularity is measured by the number of accesses to the item.
            </summary>
        </member>
        <member name="F:MyMediaLite.ItemRecommendation.MostPopular.view_count">
            <summary>View count</summary>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MostPopular.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MostPopular.Train">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MostPopular.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MostPopular.AddItem(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MostPopular.RemoveItem(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MostPopular.RemoveUser(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MostPopular.AddFeedback(System.Collections.Generic.ICollection{System.Tuple{System.Int32,System.Int32}})">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MostPopular.RemoveFeedback(System.Collections.Generic.ICollection{System.Tuple{System.Int32,System.Int32}})">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MostPopular.SaveModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MostPopular.LoadModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MostPopular.ToString">
            
        </member>
        <member name="T:MyMediaLite.ItemRecommendation.Random">
            <summary>Random item recommender for use as experimental baseline</summary>
            <remarks>
            It would not be necessary for Random to inherit from ItemRecommender, but it is done nonetheless for convenience.
            </remarks>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.Random.Train">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.Random.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.Random.SaveModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.Random.LoadModel(System.String)">
            
        </member>
        <member name="T:MyMediaLite.ItemRecommendation.UserAttributeKNN">
            <summary>k-nearest neighbor (kNN) user-based collaborative filtering using the correlation of the user attibutes</summary>
            <remarks>
            This recommender does NOT support incremental updates.
            </remarks>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.UserAttributeKNN.DataMatrix">
            
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.UserAttributeKNN.UserAttributes">
            
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.UserAttributeKNN.NumUserAttributes">
            
        </member>
        <member name="T:MyMediaLite.ItemRecommendation.UserKNN">
            <summary>k-nearest neighbor user-based collaborative filtering</summary>
            <remarks>
            This recommender supports incremental updates for the BinaryCosine and Cooccurrence similarities.
            </remarks>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.UserKNN.DataMatrix">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.UserKNN.Train">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.UserKNN.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.UserKNN.GetUserSimilarity(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.UserKNN.GetMostSimilarUsers(System.Int32,System.UInt32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.UserKNN.FoldIn(System.Collections.Generic.IList{System.Int32})">
            <summary>Fold in one user, identified by their items</summary>
            <returns>a vector containing the similarities to all users</returns>
            <param name='items'>the items representing the user</param>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.UserKNN.ScoreItems(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.UserKNN.AddFeedback(System.Collections.Generic.ICollection{System.Tuple{System.Int32,System.Int32}})">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.UserKNN.RemoveFeedback(System.Collections.Generic.ICollection{System.Tuple{System.Int32,System.Int32}})">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.UserKNN.AddUser(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.UserKNN.Update(System.Collections.Generic.ICollection{System.Tuple{System.Int32,System.Int32}})">
            <summary>Update the correlation matrix for the given feedback</summary>
            <param name='feedback'>the feedback (user-item tuples)</param>
        </member>
        <member name="T:MyMediaLite.ItemRecommendation.WRMF">
            <summary>Weighted matrix factorization method proposed by Hu et al. and Pan et al.</summary>
            <remarks>
              <para>
                We use the fast learning method proposed by Hu et al. (alternating least squares, ALS),
                and we use a global parameter to give observed values higher weights.
              </para>
              <para>
                Literature:
                <list type="bullet">
                  <item><description>
                    Y. Hu, Y. Koren, C. Volinsky: Collaborative filtering for implicit feedback datasets.
                    ICDM 2008.
                    http://research.yahoo.net/files/HuKorenVolinsky-ICDM08.pdf
                  </description></item>
                  <item><description>
                    R. Pan, Y. Zhou, B. Cao, N. N. Liu, R. M. Lukose, M. Scholz, Q. Yang:
                    One-class collaborative filtering,
                    ICDM 2008.
                    http://www.hpl.hp.com/techreports/2008/HPL-2008-48R1.pdf
                  </description></item>
                </list>
              </para>
              <para>
                This recommender supports incremental updates.
              </para>
            </remarks>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.WRMF.Alpha">
            <summary>parameter for the weight/confidence that is put on positive observations</summary>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.WRMF.Regularization">
            <summary>Regularization parameter</summary>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.WRMF.#ctor">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.WRMF.Iterate">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.WRMF.Optimize(MyMediaLite.DataType.IBooleanMatrix,MyMediaLite.DataType.Matrix{System.Single},MyMediaLite.DataType.Matrix{System.Single})">
            <summary>Optimizes the specified data</summary>
            <param name="data">data</param>
            <param name="W">W</param>
            <param name="H">H</param>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.WRMF.RetrainUser(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.WRMF.RetrainItem(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.WRMF.ComputeObjective">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.WRMF.ToString">
            
        </member>
        <member name="T:MyMediaLite.ItemRecommendation.Zero">
            <summary>Constant item recommender for use as experimental baseline. Always predicts a score of zero</summary>
            <remarks>
            This recommender can be used for debugging, e.g. to detect non-random orderings in item lists.
            </remarks>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.Zero.Train">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.Zero.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.Zero.SaveModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.Zero.LoadModel(System.String)">
            
        </member>
        <member name="T:MyMediaLite.ItemRecommendation.IncrementalItemRecommender">
            <summary>
            Base class for item recommenders that support incremental updates
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.IncrementalItemRecommender.UpdateUsers">
            
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.IncrementalItemRecommender.UpdateItems">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.IncrementalItemRecommender.AddFeedback(System.Collections.Generic.ICollection{System.Tuple{System.Int32,System.Int32}})">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.IncrementalItemRecommender.RemoveFeedback(System.Collections.Generic.ICollection{System.Tuple{System.Int32,System.Int32}})">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.IncrementalItemRecommender.AddUser(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.IncrementalItemRecommender.AddItem(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.IncrementalItemRecommender.RemoveUser(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.IncrementalItemRecommender.RemoveItem(System.Int32)">
            
        </member>
        <member name="T:MyMediaLite.ItemRecommendation.IIncrementalItemRecommender">
            <summary>Interface for item recommenders</summary>
            <remarks>
              <para>
                Item prediction or item recommendation is the task of predicting items (movies, books, products, videos, jokes)
                that a user may like, based on past user behavior (and possibly other information).
              </para>
              <para>
                See also http://recsyswiki/wiki/Item_prediction
              </para>
            </remarks>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.IIncrementalItemRecommender.AddFeedback(System.Collections.Generic.ICollection{System.Tuple{System.Int32,System.Int32}})">
            <summary>Add positive feedback events and perform incremental training</summary>
            <param name='feedback'>collection of user id - item id tuples</param>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.IIncrementalItemRecommender.RemoveFeedback(System.Collections.Generic.ICollection{System.Tuple{System.Int32,System.Int32}})">
            <summary>Remove all feedback events by the given user-item combinations</summary>
            <param name='feedback'>collection of user id - item id tuples</param>
        </member>
        <member name="T:MyMediaLite.ItemRecommendation.Extensions">
            <summary>Class that contains static methods for item prediction</summary>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.Extensions.WritePredictions(MyMediaLite.IRecommender,MyMediaLite.Data.IPosOnlyFeedback,System.Collections.Generic.IList{System.Int32},System.Int32,System.String,System.Collections.Generic.IList{System.Int32},MyMediaLite.Data.IMapping,MyMediaLite.Data.IMapping,System.Boolean)">
            <summary>Write item predictions (scores) to a file</summary>
            <param name="recommender">the <see cref="T:MyMediaLite.IRecommender"/> to use for making the predictions</param>
            <param name="train">a user-wise <see cref="T:MyMediaLite.Data.IPosOnlyFeedback"/> containing the items already observed</param>
            <param name="candidate_items">list of candidate items</param>
            <param name="num_predictions">number of items to return per user, -1 if there should be no limit</param>
            <param name="filename">the name of the file to write to</param>
            <param name="users">a list of users to make recommendations for</param>
            <param name="user_mapping">an <see cref="T:MyMediaLite.Data.IMapping"/> object for the user IDs</param>
            <param name="item_mapping">an <see cref="T:MyMediaLite.Data.IMapping"/> object for the item IDs</param>
            <param name="repeated_items">true if items that a user has already accessed shall also be predicted</param>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.Extensions.WritePredictions(MyMediaLite.IRecommender,MyMediaLite.Data.IPosOnlyFeedback,System.Collections.Generic.ICollection{System.Int32},System.Int32,System.IO.TextWriter,System.Collections.Generic.IList{System.Int32},MyMediaLite.Data.IMapping,MyMediaLite.Data.IMapping,System.Boolean)">
            <summary>Write item predictions (scores) to a TextWriter object</summary>
            <param name="recommender">the <see cref="T:MyMediaLite.IRecommender"/> to use for making the predictions</param>
            <param name="train">a user-wise <see cref="T:MyMediaLite.Data.IPosOnlyFeedback"/> containing the items already observed</param>
            <param name="candidate_items">list of candidate items</param>
            <param name="num_predictions">number of items to return per user, -1 if there should be no limit</param>
            <param name="writer">the <see cref="T:System.IO.TextWriter"/> to write to</param>
            <param name="users">a list of users to make recommendations for; if null, all users in train will be provided with recommendations</param>
            <param name="user_mapping">an <see cref="T:MyMediaLite.Data.IMapping"/> object for the user IDs</param>
            <param name="item_mapping">an <see cref="T:MyMediaLite.Data.IMapping"/> object for the item IDs</param>
            <param name="repeated_items">true if items that a user has already accessed shall also be predicted</param>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.Extensions.WritePredictions(MyMediaLite.IRecommender,System.Int32,System.Collections.Generic.ICollection{System.Int32},System.Collections.Generic.ICollection{System.Int32},System.Int32,System.IO.TextWriter,MyMediaLite.Data.IMapping,MyMediaLite.Data.IMapping)">
            <summary>Write item predictions (scores) for a given user to a TextWriter object</summary>
            <param name="recommender">the <see cref="T:MyMediaLite.IRecommender"/> to use for making the predictions</param>
            <param name="user_id">ID of the user to make recommendations for</param>
            <param name="candidate_items">list of candidate items</param>
            <param name="ignore_items">list of items for which no predictions should be made</param>
            <param name="num_predictions">the number of items to return per user, -1 if there should be no limit</param>
            <param name="writer">the <see cref="T:System.IO.TextWriter"/> to write to</param>
            <param name="user_mapping">an <see cref="T:MyMediaLite.Data.IMapping"/> object for the user IDs</param>
            <param name="item_mapping">an <see cref="T:MyMediaLite.Data.IMapping"/> object for the item IDs</param>
        </member>
        <member name="T:MyMediaLite.ItemRecommendation.MultiCoreBPRMF">
            <summary>Matrix factorization for BPR on multiple cores</summary>
            <remarks>
            This recommender supports incremental updates, however they are currently not performed on multiple cores.
            </remarks>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.MultiCoreBPRMF.MaxThreads">
            <summary>the maximum number of threads to use</summary>
            <remarks>
              Determines the number of sections the users and items will be divided into.
            </remarks>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MultiCoreBPRMF.#ctor">
            <summary>default constructor</summary>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MultiCoreBPRMF.Train">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MultiCoreBPRMF.IterateWithoutReplacementUniformPair">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MultiCoreBPRMF.ToString">
            
        </member>
        <member name="T:MyMediaLite.ItemRecommendation.SoftMarginRankingMF">
             <summary>
             Matrix factorization model for item prediction optimized for a soft margin (hinge) ranking loss,
             using stochastic gradient descent (as in BPR-MF).
             </summary>
             <remarks>
             Literature:
             <list type="bullet">
               <item><description>
                 Steffen Rendle:
                 Context-Aware Ranking with Factorization Models.
                 Studies in Computational Intelligence. Springer 2011.
                 http://www.springer.com/engineering/computational+intelligence+and+complexity/book/978-3-642-16897-0
               </description></item>
               <item><description>
                 Markus Weimer, Alexandros Karatzoglou, Alex Smola:
                 Improving Maximum Margin Matrix Factorization.
                 Machine Learning Journal 2008.
               </description></item>
               <item><description>
                 Steffen Rendle, Christoph Freudenthaler, Zeno Gantner, Lars Schmidt-Thieme:
                 BPR: Bayesian Personalized Ranking from Implicit Feedback.
                 UAI 2009.
                 http://www.ismll.uni-hildesheim.de/pub/pdfs/Rendle_et_al2009-Bayesian_Personalized_Ranking.pdf
               </description></item>
             </list>
            
             This recommender supports incremental updates.
             </remarks>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.SoftMarginRankingMF.UpdateFactors(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Update latent factors according to the stochastic gradient descent update rule</summary>
            <param name="u">the user ID</param>
            <param name="i">the ID of the first item</param>
            <param name="j">the ID of the second item</param>
            <param name="update_u">if true, update the user latent factors</param>
            <param name="update_i">if true, update the latent factors of the first item</param>
            <param name="update_j">if true, update the latent factors of the second item</param>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.SoftMarginRankingMF.ComputeObjective">
            <summary>Compute approximate loss</summary>
            <returns>the approximate loss</returns>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.SoftMarginRankingMF.ToString">
            
        </member>
        <member name="T:MyMediaLite.ItemRecommendation.WeightedBPRMF">
            <summary>Weigthed BPR-MF with frequency-adjusted sampling</summary>
            <remarks>
            Zeno Gantner, Lucas Drumond, Christoph Freudenthaler, Lars Schmidt-Thieme:
            Bayesian Personalized Ranking for Non-Uniformly Sampled Items.
            KDD Cup Workshop 2011
            </remarks>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.WeightedBPRMF.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.WeightedBPRMF.Train">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.WeightedBPRMF.SampleTriple(System.Int32@,System.Int32@,System.Int32@)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.WeightedBPRMF.ToString">
            
        </member>
        <member name="T:MyMediaLite.ItemRecommendation.IFoldInItemRecommender">
            <summary>Item recommender that allows folding in new users</summary>
            <remarks>
              <para>
                The process of folding in is computing a predictive model for a new user based on their feedback
                and the existing recommender, without modifying the parameters of the existing recommender.
              </para>
              <para>
                Literature:
                <list type="bullet">
                  <item><description>
                    Badrul Sarwar and George Karypis, Joseph Konstan, John Riedl:
                    Incremental singular value decomposition algorithms for highly scalable recommender systems.
                    Fifth International Conference on Computer and Information Science, 2002.
                    http://grouplens.org/papers/pdf/sarwar_SVD.pdf
                  </description></item>
                  </list>
              </para>
            </remarks>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.IFoldInItemRecommender.ScoreItems(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>Score a list of items given a list of items that represent a new user</summary>
            <returns>a list of int and float pairs, representing item IDs and predicted scores</returns>
            <param name='accessed_items'>the ratings (item IDs and rating values) representing the new user</param>
            <param name='candidate_items'>the items to be rated</param>
        </member>
        <member name="T:MyMediaLite.ItemRecommendation.ITransductiveItemRecommender">
            <summary>Interface for item recommenders that take into account some test data for training</summary>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.ITransductiveItemRecommender.AdditionalFeedback">
            <summary>user-item combinations that are known to be queried</summary>
        </member>
        <member name="T:MyMediaLite.ItemRecommendation.MostPopularByAttributes">
            <summary>Recommend most popular items by attribute</summary>
            <remarks>
            <para>This method is similar to the "same artist -greatest hits" baseline in the paper below.</para>
            <para>
              Literature:
              <list type="bullet">
                <item><description>
                  Brian McFee, Thierry Bertin-Mahieux, Daniel P.W. Ellis, Gert R.G. Lanckriet:
                  The Million Song Dataset Challenge.
                  ADMIRE 2012.
                  http://www.columbia.edu/~tb2332/Papers/admire12.pdf
                </description></item>
              </list>
            </para>
            <para>
              This recommender does NOT support incremental updates.
            </para>
            </remarks>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.MostPopularByAttributes.ItemAttributes">
            
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.MostPopularByAttributes.NumItemAttributes">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MostPopularByAttributes.Train">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MostPopularByAttributes.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MostPopularByAttributes.SaveModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.MostPopularByAttributes.LoadModel(System.String)">
            
        </member>
        <member name="T:MyMediaLite.ItemRecommendation.BPRSLIM">
             <summary>Sparse Linear Methods (SLIM) for item prediction (ranking) optimized for BPR-Opt optimization criterion </summary>
             <remarks>
             This implementation differs from the algorithm in the original SLIM paper since the model here is optimized for BPR-Opt
             instead of the elastic net loss. The optmization algorithm used is the Sotchastic Gradient Ascent.
            
             Literature:
             <list type="bullet">
               <item><description>
                 Steffen Rendle, Christoph Freudenthaler, Zeno Gantner, Lars Schmidt-Thieme:
                 BPR: Bayesian Personalized Ranking from Implicit Feedback.
                 UAI 2009.
                 http://www.ismll.uni-hildesheim.de/pub/pdfs/Rendle_et_al2009-Bayesian_Personalized_Ranking.pdf
               </description></item>
               <item><description>
                 X. Ning, G. Karypis: Slim: Sparse linear methods for top-n recommender systems.
                ICDM 2011.
                http://glaros.dtc.umn.edu/gkhome/fetch/papers/SLIM2011icdm.pdf
               </description></item>
             </list>
            
             Different sampling strategies are configurable by setting the UniformUserSampling and WithReplacement accordingly.
             To get the strategy from the original paper, set UniformUserSampling=false and WithReplacement=false.
             WithReplacement=true (default) gives you usually a slightly faster convergence, and UniformUserSampling=true (default)
             (approximately) optimizes the average AUC over all users.
            
             This recommender supports incremental updates.
             </remarks>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.BPRSLIM.WithReplacement">
            <summary>Sample positive observations with (true) or without (false) replacement</summary>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.BPRSLIM.UniformUserSampling">
            <summary>Sample uniformly from users</summary>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.BPRSLIM.LearnRate">
            <summary>Learning rate alpha</summary>
        </member>
        <member name="F:MyMediaLite.ItemRecommendation.BPRSLIM.learn_rate">
            <summary>Learning rate alpha</summary>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.BPRSLIM.RegI">
            <summary>Regularization parameter for positive item weights</summary>
        </member>
        <member name="F:MyMediaLite.ItemRecommendation.BPRSLIM.reg_i">
            <summary>Regularization parameter for positive item weights</summary>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.BPRSLIM.RegJ">
            <summary>Regularization parameter for negative item weights</summary>
        </member>
        <member name="F:MyMediaLite.ItemRecommendation.BPRSLIM.reg_j">
            <summary>Regularization parameter for negative item weights</summary>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.BPRSLIM.UpdateJ">
            <summary>If set (default), update factors for negative sampled items during learning</summary>
        </member>
        <member name="F:MyMediaLite.ItemRecommendation.BPRSLIM.update_j">
            <summary>If set (default), update factors for negative sampled items during learning</summary>
        </member>
        <member name="F:MyMediaLite.ItemRecommendation.BPRSLIM.random">
            <summary>Random number generator</summary>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRSLIM.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRSLIM.InitModel">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRSLIM.Train">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRSLIM.Iterate">
            <summary>Perform one iteration of stochastic gradient ascent over the training data</summary>
            <remarks>
            One iteration is samples number of positive entries in the training matrix times
            </remarks>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRSLIM.SampleOtherItem(System.Int32,System.Int32,System.Int32@)">
            <summary>Sample another item, given the first one and the user</summary>
            <param name="u">the user ID</param>
            <param name="i">the ID of the given item</param>
            <param name="j">the ID of the other item</param>
            <returns>true if the given item was already seen by user u</returns>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRSLIM.SampleItemPair(System.Int32,System.Int32@,System.Int32@)">
            <summary>Sample a pair of items, given a user</summary>
            <param name="u">the user ID</param>
            <param name="i">the ID of the first item</param>
            <param name="j">the ID of the second item</param>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRSLIM.SampleUser">
            <summary>Sample a user that has viewed at least one and not all items</summary>
            <returns>the user ID</returns>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRSLIM.SampleTriple(System.Int32@,System.Int32@,System.Int32@)">
            <summary>Sample a triple for BPR learning</summary>
            <param name="u">the user ID</param>
            <param name="i">the ID of the first item</param>
            <param name="j">the ID of the second item</param>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRSLIM.UpdateFactors(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Update latent factors according to the stochastic gradient descent update rule</summary>
            <param name="u">the user ID</param>
            <param name="i">the ID of the first item</param>
            <param name="j">the ID of the second item</param>
            <param name="update_u">if true, update the user latent factors</param>
            <param name="update_i">if true, update the latent factors of the first item</param>
            <param name="update_j">if true, update the latent factors of the second item</param>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRSLIM.AddUser(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRSLIM.AddItem(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRSLIM.RemoveItem(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRSLIM.RetrainItem(System.Int32)">
            <summary>Retrain the latent factors of a given item</summary>
            <param name="item_id">the item ID</param>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRSLIM.ComputeObjective">
            <summary>Compute the fit (AUC on training data)</summary>
            <returns>the fit</returns>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRSLIM.PredictWithDifference(System.Int32,System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRSLIM.SaveModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRSLIM.LoadModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BPRSLIM.ToString">
            
        </member>
        <member name="T:MyMediaLite.ItemRecommendation.SLIM">
            <summary>Abstract class for SLIM based item predictors proposed by Ning and Karypis</summary>
            <remarks>
              <para>
                This class only implements the prediction model presented in the original paper.
              </para>
              <para>
                Literature:
                <list type="bullet">
                  <item><description>
                    X. Ning, G. Karypis: Slim: Sparse linear methods for top-n recommender systems.
                    ICDM 2011.
                    http://glaros.dtc.umn.edu/gkhome/fetch/papers/SLIM2011icdm.pdf
                  </description></item>
            	</list>
              </para>
            </remarks>
        </member>
        <member name="F:MyMediaLite.ItemRecommendation.SLIM.item_weights">
            <summary>Item weight matrix (the W matrix in the original paper)</summary>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.SLIM.InitMean">
            <summary>Mean of the normal distribution used to initialize the latent factors</summary>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.SLIM.InitStdDev">
            <summary>Standard deviation of the normal distribution used to initialize the latent factors</summary>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.SLIM.NumIter">
            <summary>Number of iterations over the training data</summary>
        </member>
        <member name="F:MyMediaLite.ItemRecommendation.SLIM.itemKNN">
            <summary>The item KNN used in the feature selection step</summary>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.SLIM.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.SLIM.InitModel">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.SLIM.Train">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.SLIM.Iterate">
            <summary>Iterate once over the data</summary>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.SLIM.ComputeObjective">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.SLIM.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.SLIM.SaveModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.SLIM.LoadModel(System.String)">
            
        </member>
        <member name="T:MyMediaLite.ItemRecommendation.LeastSquareSLIM">
            <summary>Sparse Linear Methods (SLIM) for item prediction (ranking) optimized for the elastic net loss  </summary>
            <remarks>
              <para>
                The model is learned using a coordinate descent algorithm with soft thresholding
                (Friedman et al. 2010).
              </para>
              <para>
                Literature:
              <list type="bullet">
                <item><description>
                  X. Ning, G. Karypis: Slim: Sparse linear methods for top-n recommender systems.
                 ICDM 2011.
                 http://glaros.dtc.umn.edu/gkhome/fetch/papers/SLIM2011icdm.pdf
                </description></item>
                <item><description>
                  J. Friedman, T. Hastie, R. Tibshirani: Regularization Paths for Generalized Linear Models via Coordinate Descent.
                 Journal of Statistical Software 2010.
                 http://www.jstatsoft.org/v33/i01/paper
                </description></item>
               </list>
              </para>
              <para>
                This recommender supports incremental updates.
              </para>
            </remarks>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.LeastSquareSLIM.RegL1">
            <summary>Regularization parameter for the L1 regularization term (lambda in the original paper)</summary>
        </member>
        <member name="F:MyMediaLite.ItemRecommendation.LeastSquareSLIM.reg_l1">
            <summary>Regularization parameter for the L1 regularization term (lambda in the original paper)</summary>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.LeastSquareSLIM.RegL2">
            <summary>Regularization parameter for the L2 regularization term (beta/2 in the original paper)</summary>
        </member>
        <member name="F:MyMediaLite.ItemRecommendation.LeastSquareSLIM.reg_l2">
            <summary>Regularization parameter for the L2 regularization term (beta/2 in the original paper)</summary>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.LeastSquareSLIM.K">
            <summary>How many neighbors to use in the kNN feature selection</summary>
        </member>
        <member name="F:MyMediaLite.ItemRecommendation.LeastSquareSLIM.neighbors">
            <summary>How many neighbors to use in the kNN feature selection</summary>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.LeastSquareSLIM.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.LeastSquareSLIM.InitModel">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.LeastSquareSLIM.Train">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.LeastSquareSLIM.Train(System.Int32)">
            <summary>Learns the set of parameters for a given item</summary>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.LeastSquareSLIM.Iterate(System.Int32)">
            <summary>Perform one iteration of coordinate descent for a given set of item parameters over the training data</summary>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.LeastSquareSLIM.Iterate">
            <summary>
            Iterate this instance.
            </summary>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.LeastSquareSLIM.UpdateParameters(System.Int32,System.Int32)">
            <summary>Update item parameters according to the coordinate descent update rule</summary>
            <param name="item_id">the ID of the first item</param>
            <param name="other_item_id">the ID of the second item</param>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.LeastSquareSLIM.Predict(System.Int32,System.Int32,System.Int32)">
            <summary>
            Predict the specified user_id, item_id without taking exclude_item_id
            into consideration. This is needed for the coordinate descent update rule (equation 5 from
            Friedman et al. (2010)).
            </summary>
            <param name='user_id'>
            User_id.
            </param>
            <param name='item_id'>
            Item_id.
            </param>
            <param name='exclude_item_id'>
            Current item ID which shouldn't .
            </param>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.LeastSquareSLIM.AddUser(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.LeastSquareSLIM.AddItem(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.LeastSquareSLIM.RemoveUser(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.LeastSquareSLIM.RemoveItem(System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.LeastSquareSLIM.RetrainItem(System.Int32)">
            <summary>Retrain the latent factors of a given item</summary>
            <param name="item_id">the item ID</param>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.LeastSquareSLIM.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.LeastSquareSLIM.ComputeObjective">
            <summary>Compute the regularized loss (regularized squared error on training data)</summary>
            <returns>the objective</returns>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.LeastSquareSLIM.SaveModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.LeastSquareSLIM.LoadModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.LeastSquareSLIM.ToString">
            
        </member>
        <member name="T:MyMediaLite.ItemRecommendation.ExternalItemRecommender">
            <summary>Uses externally computed predictions</summary>
            <remarks>
            <para>
              This recommender is for loading predictions made by external (non-MyMediaLite) recommenders,
              so that we can use MyMediaLite's evaluation framework to evaluate their accuracy.
            </para>
            <para>
              This recommender does NOT support incremental updates.
            </para>
            </remarks>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.ExternalItemRecommender.PredictionFile">
            <summary>the file with the stored ratings</summary>
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.ExternalItemRecommender.UserMapping">
            
        </member>
        <member name="P:MyMediaLite.ItemRecommendation.ExternalItemRecommender.ItemMapping">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.ExternalItemRecommender.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.ExternalItemRecommender.Train">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.ExternalItemRecommender.CanPredict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.ExternalItemRecommender.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.ExternalItemRecommender.SaveModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.ExternalItemRecommender.LoadModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.ExternalItemRecommender.ToString">
            
        </member>
        <member name="T:MyMediaLite.ItemRecommendation.BigramRules">
            <summary> Recommender based on bigram association rules (item1 -&gt; item2)</summary>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BigramRules.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BigramRules.Train">
            
        </member>
        <member name="M:MyMediaLite.ItemRecommendation.BigramRules.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="T:MyMediaLite.IO.AttributeData">
            <summary>Class that offers static methods to read (binary) attribute data into IBooleanMatrix objects</summary>
            <remarks>
            The expected (sparse) line format is:
            ENTITY_ID SEPARATOR ATTRIBUTE_ID
            for attributes that are set.
            SEPARATOR can be space, tab, or comma.
            </remarks>
        </member>
        <member name="M:MyMediaLite.IO.AttributeData.Read(System.String,MyMediaLite.Data.IMapping)">
            <summary>Read binary attribute data from a file</summary>
            <remarks>
            The expected (sparse) line format is:
            ENTITY_ID tab/space/comma ATTRIBUTE_ID
            for the relations that hold.
            </remarks>
            <param name="filename">the name of the file to be read from</param>
            <param name="mapping">the mapping object for the given entity type</param>
            <returns>the attribute data</returns>
        </member>
        <member name="M:MyMediaLite.IO.AttributeData.Read(System.IO.StreamReader,MyMediaLite.Data.IMapping)">
            <summary>Read binary attribute data from a StreamReader</summary>
            <remarks>
            The expected (sparse) line format is:
            ENTITY_ID tab/space/comma ATTRIBUTE_ID
            for the relations that hold.
            </remarks>
            <param name="reader">a StreamReader to be read from</param>
            <param name="mapping">the mapping object for the given entity type</param>
            <returns>the attribute data</returns>
        </member>
        <member name="M:MyMediaLite.IO.AttributeData.Read(System.Data.IDataReader,MyMediaLite.Data.IMapping)">
            <summary>Read binary attribute data from an IDataReader, e.g. a database via DbDataReader</summary>
            <param name="reader">an IDataReader to be read from</param>
            <param name="mapping">the mapping object for the given entity type</param>
            <returns>the attribute data</returns>
        </member>
        <member name="T:MyMediaLite.IO.RatingFileFormat">
            <summary>Represents different rating file formats</summary>
        </member>
        <member name="F:MyMediaLite.IO.RatingFileFormat.DEFAULT">
            <summary>The default tab/comma separated rating format (e.g. MovieLens 100K, Apache Mahout)</summary>
        </member>
        <member name="F:MyMediaLite.IO.RatingFileFormat.IGNORE_FIRST_LINE">
            <summary>Like the default format, but ignore the first line</summary>
        </member>
        <member name="F:MyMediaLite.IO.RatingFileFormat.MOVIELENS_1M">
            <summary>The MovieLens 1M/10M format (fields separated by "::")</summary>
        </member>
        <member name="F:MyMediaLite.IO.RatingFileFormat.KDDCUP_2011">
            <summary>The KDD Cup 2011 rating format</summary>
        </member>
        <member name="T:MyMediaLite.IO.TestRatingFileFormat">
            <summary>Distinguish between test files with and without rating column</summary>
        </member>
        <member name="F:MyMediaLite.IO.TestRatingFileFormat.WITH_RATINGS">
            <summary>Just like the training file format, with rating values</summary>
        </member>
        <member name="F:MyMediaLite.IO.TestRatingFileFormat.WITHOUT_RATINGS">
            <summary>Without a rating column</summary>
        </member>
        <member name="T:MyMediaLite.IO.ItemDataFileFormat">
            <summary>Represents different rating file formats</summary>
        </member>
        <member name="F:MyMediaLite.IO.ItemDataFileFormat.DEFAULT">
            <summary>The default tab/comma separated rating format (e.g. MovieLens 100K, Apache Mahout)</summary>
        </member>
        <member name="F:MyMediaLite.IO.ItemDataFileFormat.IGNORE_FIRST_LINE">
            <summary>Like the default format, but ignore the first line</summary>
        </member>
        <member name="T:MyMediaLite.IO.ItemData">
            <summary>Class that contains static methods for reading in implicit feedback data for ItemRecommender</summary>
        </member>
        <member name="M:MyMediaLite.IO.ItemData.Read(System.String,MyMediaLite.Data.IMapping,MyMediaLite.Data.IMapping,System.Boolean)">
            <summary>Read in implicit feedback data from a file</summary>
            <param name="filename">name of the file to be read from</param>
            <param name="user_mapping">user <see cref="T:MyMediaLite.Data.IMapping"/> object</param>
            <param name="item_mapping">item <see cref="T:MyMediaLite.Data.IMapping"/> object</param>
            <param name="ignore_first_line">if true, ignore the first line</param>
            <returns>a <see cref="T:MyMediaLite.Data.IPosOnlyFeedback"/> object with the user-wise collaborative data</returns>
        </member>
        <member name="M:MyMediaLite.IO.ItemData.Read(System.IO.TextReader,MyMediaLite.Data.IMapping,MyMediaLite.Data.IMapping,System.Boolean)">
            <summary>Read in implicit feedback data from a TextReader</summary>
            <param name="reader">the TextReader to be read from</param>
            <param name="user_mapping">user <see cref="T:MyMediaLite.Data.IMapping"/> object</param>
            <param name="item_mapping">item <see cref="T:MyMediaLite.Data.IMapping"/> object</param>
            <param name="ignore_first_line">if true, ignore the first line</param>
            <returns>a <see cref="T:MyMediaLite.Data.IPosOnlyFeedback"/> object with the user-wise collaborative data</returns>
        </member>
        <member name="M:MyMediaLite.IO.ItemData.Read(System.Data.IDataReader,MyMediaLite.Data.IMapping,MyMediaLite.Data.IMapping)">
            <summary>Read in implicit feedback data from an IDataReader, e.g. a database via DbDataReader</summary>
            <param name="reader">the IDataReader to be read from</param>
            <param name="user_mapping">user <see cref="T:MyMediaLite.Data.IMapping"/> object</param>
            <param name="item_mapping">item <see cref="T:MyMediaLite.Data.IMapping"/> object</param>
            <returns>a <see cref="T:MyMediaLite.Data.IPosOnlyFeedback"/> object with the user-wise collaborative data</returns>
        </member>
        <member name="T:MyMediaLite.IO.ItemDataRatingThreshold">
            <summary>Class that contains static methods for reading in implicit feedback data for ItemRecommender, derived from rating data</summary>
        </member>
        <member name="M:MyMediaLite.IO.ItemDataRatingThreshold.Read(System.String,System.Single,MyMediaLite.Data.IMapping,MyMediaLite.Data.IMapping,System.Boolean)">
            <summary>Read in rating data which will be interpreted as implicit feedback data from a file</summary>
            <param name="filename">name of the file to be read from</param>
            <param name="rating_threshold">the minimum rating value needed to be accepted as positive feedback</param>
            <param name="user_mapping">user <see cref="T:MyMediaLite.Data.IMapping"/> object</param>
            <param name="item_mapping">item <see cref="T:MyMediaLite.Data.IMapping"/> object</param>
            <param name="ignore_first_line">if true, ignore the first line</param>
            <returns>a <see cref="T:MyMediaLite.Data.IPosOnlyFeedback"/> object with the user-wise collaborative data</returns>
        </member>
        <member name="M:MyMediaLite.IO.ItemDataRatingThreshold.Read(System.IO.TextReader,System.Single,MyMediaLite.Data.IMapping,MyMediaLite.Data.IMapping,System.Boolean)">
            <summary>Read in rating data which will be interpreted as implicit feedback data from a TextReader</summary>
            <param name="reader">the TextReader to be read from</param>
            <param name="rating_threshold">the minimum rating value needed to be accepted as positive feedback</param>
            <param name="user_mapping">user <see cref="T:MyMediaLite.Data.IMapping"/> object</param>
            <param name="item_mapping">item <see cref="T:MyMediaLite.Data.IMapping"/> object</param>
            <param name="ignore_first_line">if true, ignore the first line</param>
            <returns>a <see cref="T:MyMediaLite.Data.IPosOnlyFeedback"/> object with the user-wise collaborative data</returns>
        </member>
        <member name="M:MyMediaLite.IO.ItemDataRatingThreshold.Read(System.Data.IDataReader,System.Single,MyMediaLite.Data.IMapping,MyMediaLite.Data.IMapping)">
            <summary>Read in rating data which will be interpreted as implicit feedback data from an IDataReader, e.g. a database via DbDataReader</summary>
            <param name="reader">the IDataReader to be read from</param>
            <param name="rating_threshold">the minimum rating value needed to be accepted as positive feedback</param>
            <param name="user_mapping">user <see cref="T:MyMediaLite.Data.IMapping"/> object</param>
            <param name="item_mapping">item <see cref="T:MyMediaLite.Data.IMapping"/> object</param>
            <returns>a <see cref="T:MyMediaLite.Data.IPosOnlyFeedback"/> object with the user-wise collaborative data</returns>
        </member>
        <member name="T:MyMediaLite.IO.Model">
            <summary>Class containing static routines for reading and writing recommender models</summary>
        </member>
        <member name="M:MyMediaLite.IO.Model.Save(MyMediaLite.IRecommender,System.String)">
            <summary>Save the model parameters of a recommender to a file</summary>
            <remarks>
            Does not save if filename is an empty string.
            </remarks>
            <param name="recommender">the recommender to store</param>
            <param name="filename">the filename (may include relative paths)</param>
        </member>
        <member name="M:MyMediaLite.IO.Model.Save(MyMediaLite.IRecommender,System.String,System.Int32)">
            <summary>Save the model parameters of a recommender (in a given iteration of the training) to a file</summary>
            <remarks>
            Does not save if filename is an empty string.
            </remarks>
            <param name="recommender">the <see cref="T:MyMediaLite.IRecommender"/> to save</param>
            <param name="filename">the filename template</param>
            <param name="iteration">the iteration (will be appended to the filename)</param>
        </member>
        <member name="M:MyMediaLite.IO.Model.Load(MyMediaLite.IRecommender,System.String)">
            <summary>Load the model parameters of a recommender from a file</summary>
            <param name="recommender">the <see cref="T:MyMediaLite.IRecommender"/> to load</param>
            <param name="filename">the filename template</param>
        </member>
        <member name="M:MyMediaLite.IO.Model.Load(System.String)">
            <summary>Load a recommender from a file, including object creation</summary>
            <param name="filename">the name of the model file</param>
            <returns>the recommender loaded from the file</returns>
        </member>
        <member name="M:MyMediaLite.IO.Model.GetReader(System.String,System.Type)">
            <summary>Get a reader object to read in model parameters of a recommender</summary>
            <param name="filename">the filename of the model file</param>
            <param name="recommender_type">the expected recommender type</param>
            <returns>a <see cref="T:System.IO.StreamReader"/></returns>
        </member>
        <member name="M:MyMediaLite.IO.Model.GetWriter(System.String,System.Type,System.String)">
            <summary>Get a writer object to save the model parameters of a recommender</summary>
            <param name="filename">the filename of the model file</param>
            <param name="recommender_type">the recommender type</param>
            <param name="version">the version string (for backwards compatibility)</param>
            <returns>a <see cref="T:System.IO.StreamWriter"/></returns>
        </member>
        <member name="T:MyMediaLite.IO.MovieLensRatingData">
            <summary>Class that offers static methods for reading in MovieLens 1M and 10M rating data</summary>
            <remarks>
            See http://www.grouplens.org/node/73#attachments and http://recsyswiki.com/wiki/MovieLens
            </remarks>
        </member>
        <member name="M:MyMediaLite.IO.MovieLensRatingData.Read(System.String,MyMediaLite.Data.IMapping,MyMediaLite.Data.IMapping,MyMediaLite.IO.TestRatingFileFormat)">
            <summary>Read in rating data from a file</summary>
            <param name="filename">the name of the file to read from</param>
            <param name="user_mapping">mapping object for user IDs</param>
            <param name="item_mapping">mapping object for item IDs</param>
            <param name="test_rating_format">whether there is a rating column in each line or not</param>
            <returns>the rating data</returns>
        </member>
        <member name="M:MyMediaLite.IO.MovieLensRatingData.Read(System.IO.TextReader,MyMediaLite.Data.IMapping,MyMediaLite.Data.IMapping,MyMediaLite.IO.TestRatingFileFormat)">
            <summary>Read in rating data from a TextReader</summary>
            <param name="reader">the <see cref="T:System.IO.TextReader"/> to read from</param>
            <param name="user_mapping">mapping object for user IDs</param>
            <param name="item_mapping">mapping object for item IDs</param>
            <param name="test_rating_format">whether there is a rating column in each line or not</param>
            <returns>the rating data</returns>
        </member>
        <member name="T:MyMediaLite.IO.RatingData">
            <summary>Class that offers methods for reading in rating data</summary>
        </member>
        <member name="M:MyMediaLite.IO.RatingData.Read(System.String,MyMediaLite.Data.IMapping,MyMediaLite.Data.IMapping,System.Boolean)">
            <summary>Read in rating data from a file</summary>
            <param name="filename">the name of the file to read from</param>
            <param name="user_mapping">mapping object for user IDs</param>
            <param name="item_mapping">mapping object for item IDs</param>
            <param name="ignore_first_line">if true, ignore the first line</param>
            <returns>the rating data</returns>
        </member>
        <member name="M:MyMediaLite.IO.RatingData.Read(System.IO.TextReader,MyMediaLite.Data.IMapping,MyMediaLite.Data.IMapping,System.Boolean)">
            <summary>Read in rating data from a TextReader</summary>
            <param name="reader">the <see cref="T:System.IO.TextReader"/> to read from</param>
            <param name="user_mapping">mapping object for user IDs</param>
            <param name="item_mapping">mapping object for item IDs</param>
            <param name="ignore_first_line">if true, ignore the first line</param>
            <returns>the rating data</returns>
        </member>
        <member name="M:MyMediaLite.IO.RatingData.Read(System.Data.IDataReader,MyMediaLite.Data.IMapping,MyMediaLite.Data.IMapping)">
            <summary>Read in rating data from an IDataReader, e.g. a database via DbDataReader</summary>
            <param name="reader">the <see cref="T:System.Data.IDataReader"/> to read from</param>
            <param name="user_mapping">mapping object for user IDs</param>
            <param name="item_mapping">mapping object for item IDs</param>
            <returns>the rating data</returns>
        </member>
        <member name="T:MyMediaLite.IO.RelationData">
            <summary>Class that offers static methods to read (binary) relation over entities into IBooleanMatrix objects</summary>
        </member>
        <member name="M:MyMediaLite.IO.RelationData.Read(System.String,MyMediaLite.Data.IMapping)">
            <summary>Read binary relations from file</summary>
            <remarks>
            The expected (sparse) line format is:
            ENTITY_ID space/tab/comma ENTITY_ID
            for the relations that hold.
            </remarks>
            <param name="filename">the name of the file to be read from</param>
            <param name="mapping">the mapping object for the given entity type</param>
            <returns>the relation data</returns>
        </member>
        <member name="M:MyMediaLite.IO.RelationData.Read(System.IO.StreamReader,MyMediaLite.Data.IMapping)">
            <summary>Read binary relation data from file</summary>
            <remarks>
            The expected (sparse) line format is:
            ENTITY_ID space/tab/comma ENTITY_ID
            for the relations that hold.
            </remarks>
            <param name="reader">a StreamReader to be read from</param>
            <param name="mapping">the mapping object for the given entity type</param>
            <returns>the relation data</returns>
        </member>
        <member name="M:MyMediaLite.IO.RelationData.Read(System.Data.IDataReader,MyMediaLite.Data.IMapping)">
            <summary>Read binary relation data from an IDataReader, e.g. a database via DbDataReader</summary>
            <param name="reader">an IDataReader to be read from</param>
            <param name="mapping">the mapping object for the given entity type</param>
            <returns>the relation data</returns>
        </member>
        <member name="T:MyMediaLite.IO.StaticRatingData">
            <summary>Class that offers methods for reading in static rating data</summary>
        </member>
        <member name="M:MyMediaLite.IO.StaticRatingData.Read(System.String,MyMediaLite.Data.IMapping,MyMediaLite.Data.IMapping,MyMediaLite.Data.RatingType,MyMediaLite.IO.TestRatingFileFormat,System.Boolean)">
            <summary>Read in static rating data from a file</summary>
            <param name="filename">the name of the file to read from</param>
            <param name="user_mapping">mapping object for user IDs</param>
            <param name="item_mapping">mapping object for item IDs</param>
            <param name="rating_type">the data type to be used for storing the ratings</param>
            <param name="test_rating_format">whether there is a rating column in each line or not</param>
            <param name="ignore_first_line">if true, ignore the first line</param>
            <returns>the rating data</returns>
        </member>
        <member name="M:MyMediaLite.IO.StaticRatingData.Read(System.IO.TextReader,System.Int32,MyMediaLite.Data.IMapping,MyMediaLite.Data.IMapping,MyMediaLite.Data.RatingType,MyMediaLite.IO.TestRatingFileFormat,System.Boolean)">
            <summary>Read in static rating data from a TextReader</summary>
            <param name="reader">the <see cref="T:System.IO.TextReader"/> to read from</param>
            <param name="size">the number of ratings in the file</param>
            <param name="user_mapping">mapping object for user IDs</param>
            <param name="item_mapping">mapping object for item IDs</param>
            <param name="rating_type">the data type to be used for storing the ratings</param>
            <param name="test_rating_format">whether there is a rating column in each line or not</param>
            <param name="ignore_first_line">if true, ignore the first line</param>
            <returns>the rating data</returns>
        </member>
        <member name="T:MyMediaLite.IO.Constants">
            <summary>Static class containing constants used by the MyMediaLite Input/Output routines</summary>
        </member>
        <member name="F:MyMediaLite.IO.Constants.SPLIT_CHARS">
            <summary>Characters used for splitting tab/space/comma separated lines</summary>
        </member>
        <member name="T:MyMediaLite.IO.TimedRatingData">
            <summary>Class that offers methods for reading in rating data with time information</summary>
        </member>
        <member name="M:MyMediaLite.IO.TimedRatingData.Read(System.String,MyMediaLite.Data.IMapping,MyMediaLite.Data.IMapping,MyMediaLite.IO.TestRatingFileFormat,System.Boolean)">
            <summary>Read in rating data from a file</summary>
            <param name="filename">the name of the file to read from</param>
            <param name="user_mapping">mapping object for user IDs</param>
            <param name="item_mapping">mapping object for item IDs</param>
            <param name="test_rating_format">whether there is a rating column in each line or not</param>
            <param name="ignore_first_line">if true, ignore the first line</param>
            <returns>the rating data</returns>
        </member>
        <member name="M:MyMediaLite.IO.TimedRatingData.Read(System.IO.TextReader,MyMediaLite.Data.IMapping,MyMediaLite.Data.IMapping,MyMediaLite.IO.TestRatingFileFormat,System.Boolean)">
            <summary>Read in rating data from a TextReader</summary>
            <param name="reader">the <see cref="T:System.IO.TextReader"/> to read from</param>
            <param name="user_mapping">mapping object for user IDs</param>
            <param name="item_mapping">mapping object for item IDs</param>
            <param name="test_rating_format">whether there is a rating column in each line or not</param>
            <param name="ignore_first_line">if true, ignore the first line</param>
            <returns>the rating data</returns>
        </member>
        <member name="T:MyMediaLite.IO.VectorExtensions">
            <summary>Extensions for vector-like data</summary>
        </member>
        <member name="M:MyMediaLite.IO.VectorExtensions.WriteVector(System.IO.TextWriter,System.Collections.Generic.ICollection{System.Double})">
            <summary>Write a collection of doubles to a TextWriter</summary>
            <param name="writer">a <see cref="T:System.IO.TextWriter"/></param>
            <param name="vector">a collection of double values</param>
        </member>
        <member name="M:MyMediaLite.IO.VectorExtensions.WriteVector(System.IO.TextWriter,System.Collections.Generic.ICollection{System.Single})">
            <summary>Write a collection of floats to a TextWriter</summary>
            <param name="writer">a <see cref="T:System.IO.TextWriter"/></param>
            <param name="vector">a collection of float values</param>
        </member>
        <member name="M:MyMediaLite.IO.VectorExtensions.ReadVector(System.IO.TextReader)">
            <summary>Read a collection of floats from a TextReader object</summary>
            <param name="reader">the <see cref="T:System.IO.TextReader"/> to read from</param>
            <returns>a list of double values</returns>
        </member>
        <member name="M:MyMediaLite.IO.VectorExtensions.WriteVector(System.IO.TextWriter,System.Collections.Generic.ICollection{System.Int32})">
            <summary>Write a collection of ints to a streamwriter</summary>
            <param name="writer">a <see cref="T:System.IO.StreamWriter"/></param>
            <param name="vector">a collection of int values</param>
        </member>
        <member name="M:MyMediaLite.IO.VectorExtensions.ReadIntVector(System.IO.TextReader)">
            <summary>Read a collection of ints from a TextReader object</summary>
            <param name="reader">the <see cref="T:System.IO.TextReader"/> to read from</param>
            <returns>a list of int values</returns>
        </member>
        <member name="T:MyMediaLite.IO.KDDCup2011.Items">
            <summary>Routines for reading in the item taxonomy of the KDD Cup 2011 data</summary>
        </member>
        <member name="M:MyMediaLite.IO.KDDCup2011.Items.Read(System.String,System.String,System.String,System.String,System.UInt32)">
            <summary>Read in the item data from several files</summary>
            <param name="tracks_filename">name of the tracks file</param>
            <param name="albums_filename">name of the album/record file</param>
            <param name="artists_filename">name of the artists file</param>
            <param name="genres_filename">name of the genre file</param>
            <param name="track_no">1 or 2</param>
            <returns>the rating data</returns>
        </member>
        <member name="M:MyMediaLite.IO.KDDCup2011.Items.ReadTracks(System.IO.TextReader,MyMediaLite.Data.KDDCupItems)">
            <summary>Read the track data</summary>
            <param name="reader">a reader object to read the data from</param>
            <param name="items">the <see cref="T:MyMediaLite.Data.KDDCupItems"/> object</param>
        </member>
        <member name="M:MyMediaLite.IO.KDDCup2011.Items.ReadAlbums(System.IO.TextReader,MyMediaLite.Data.KDDCupItems)">
            <summary>Read the album data</summary>
            <param name="reader">a reader object to read the data from</param>
            <param name="items">the <see cref="T:MyMediaLite.Data.KDDCupItems"/> object</param>
        </member>
        <member name="M:MyMediaLite.IO.KDDCup2011.Items.ReadArtists(System.IO.TextReader,MyMediaLite.Data.KDDCupItems)">
            <summary>Read the artist data</summary>
            <param name="reader">a reader object to read the data from</param>
            <param name="items">the <see cref="T:MyMediaLite.Data.KDDCupItems"/> object</param>
        </member>
        <member name="M:MyMediaLite.IO.KDDCup2011.Items.ReadGenres(System.IO.TextReader,MyMediaLite.Data.KDDCupItems)">
            <summary>Read the genre data</summary>
            <param name="reader">a reader object to read the data from</param>
            <param name="items">the <see cref="T:MyMediaLite.Data.KDDCupItems"/> object</param>
        </member>
        <member name="T:MyMediaLite.IO.KDDCup2011.Ratings">
            <summary>Class that offers static methods for reading in rating data from the KDD Cup 2011 files</summary>
        </member>
        <member name="M:MyMediaLite.IO.KDDCup2011.Ratings.Read(System.String)">
            <summary>Read in rating data from a file</summary>
            <param name="filename">the name of the file to read from</param>
            <returns>the rating data</returns>
        </member>
        <member name="M:MyMediaLite.IO.KDDCup2011.Ratings.Read(System.IO.StreamReader)">
            <summary>Read in rating data from a TextReader</summary>
            <param name="reader">the <see cref="T:System.IO.StreamReader"/> to read from</param>
            <returns>the rating data</returns>
        </member>
        <member name="M:MyMediaLite.IO.KDDCup2011.Ratings.ReadTest(System.String)">
            <summary>Read in test rating data (Track 1) from a file</summary>
            <param name="filename">the name of the file to read from</param>
            <returns>the rating data</returns>
        </member>
        <member name="M:MyMediaLite.IO.KDDCup2011.Ratings.ReadTest(System.IO.StreamReader)">
            <summary>Read in rating test data (Track 1) from a TextReader</summary>
            <param name="reader">the <see cref="T:System.IO.StreamReader"/> to read from</param>
            <returns>the rating data</returns>
        </member>
        <member name="M:MyMediaLite.IO.KDDCup2011.Ratings.Read80Plus(System.String)">
            <summary>Read in rating data from a file</summary>
            <param name="filename">the name of the file to read from</param>
            <returns>the rating data</returns>
        </member>
        <member name="M:MyMediaLite.IO.KDDCup2011.Ratings.Read80Plus(System.IO.StreamReader)">
            <summary>Read in rating data from a TextReader</summary>
            <param name="reader">the <see cref="T:System.IO.StreamReader"/> to read from</param>
            <returns>the rating data</returns>
        </member>
        <member name="T:MyMediaLite.IO.KDDCup2011.Track2Items">
            <summary>Class that offers static methods for reading in test data from the KDD Cup 2011 files</summary>
        </member>
        <member name="M:MyMediaLite.IO.KDDCup2011.Track2Items.Read(System.String)">
            <summary>Read track 2 candidates from a file</summary>
            <param name="filename">the name of the file to read from</param>
            <returns>the candidates</returns>
        </member>
        <member name="M:MyMediaLite.IO.KDDCup2011.Track2Items.Read(System.IO.TextReader)">
            <summary>Read track 2 candidates from a TextReader</summary>
            <param name="reader">the <see cref="T:System.IO.TextReader"/> to read from</param>
            <returns>the candidates</returns>
        </member>
        <member name="T:MyMediaLite.IO.DataReaderExtensions">
            <summary>Extension methods for IDataReader objects</summary>
        </member>
        <member name="M:MyMediaLite.IO.DataReaderExtensions.GetStringGetter(System.Data.IDataReader,System.Int32)">
            <summary>Get a getter function for (usually user or item) IDs from an IDataReader</summary>
            <returns>a function returning a string</returns>
            <param name='reader'>the reader object</param>
            <param name='i'>index of the field to access</param>
            <exception cref='T:System.FormatException'>
              thrown if field i is not of type String, Int32, or Int64
            </exception>
        </member>
        <member name="M:MyMediaLite.IO.DataReaderExtensions.GetFloatGetter(System.Data.IDataReader,System.Int32)">
            <summary>Get a getter function for ratings from an IDataReader</summary>
            <returns>a function returning a float</returns>
            <param name='reader'>the reader object</param>
            <param name='i'>index of the field to access</param>
            <exception cref='T:System.FormatException'>
              thrown if field i is not of type Float, Double, Int32, or Int64
            </exception>
        </member>
        <member name="T:MyMediaLite.IO.MatrixExtensions">
            <summary>Utilities to work with matrices</summary>
        </member>
        <member name="M:MyMediaLite.IO.MatrixExtensions.WriteMatrix(System.IO.TextWriter,MyMediaLite.DataType.IMatrix{System.Single})">
            <summary>Write a matrix of floats to a StreamWriter object</summary>
            <param name="writer">a <see cref="T:System.IO.StreamWriter"/></param>
            <param name="matrix">the matrix of floats to write out</param>
        </member>
        <member name="M:MyMediaLite.IO.MatrixExtensions.WriteSparseMatrix(System.IO.TextWriter,MyMediaLite.DataType.SparseMatrix{System.Single})">
            <summary>Write a sparse matrix of floats to a StreamWriter object</summary>
            <param name="writer">a <see cref="T:System.IO.StreamWriter"/></param>
            <param name="matrix">the matrix of floats to write out</param>
        </member>
        <member name="M:MyMediaLite.IO.MatrixExtensions.WriteSparseMatrix(System.IO.TextWriter,MyMediaLite.DataType.SparseMatrix{System.Int32})">
            <summary>Write a sparse matrix of integers to a StreamWriter object</summary>
            <param name="writer">a <see cref="T:System.IO.StreamWriter"/></param>
            <param name="matrix">the matrix of doubles to write out</param>
        </member>
        <member name="M:MyMediaLite.IO.MatrixExtensions.ReadMatrix(System.IO.TextReader,MyMediaLite.DataType.IMatrix{System.Single})">
            <summary>Read a matrix from a TextReader object</summary>
            <param name="reader">the <see cref="T:System.IO.TextReader"/> object to read from</param>
            <param name="example_matrix">matrix of the type of matrix to create</param>
            <returns>a matrix of float</returns>
        </member>
        <member name="M:MyMediaLite.IO.MatrixExtensions.ReadMatrix(System.IO.TextReader,MyMediaLite.DataType.IMatrix{System.Int32})">
            <summary>Read a matrix of integers from a TextReader object</summary>
            <param name="reader">the <see cref="T:System.IO.TextReader"/> object to read from</param>
            <param name="example_matrix">matrix of the type of matrix to create</param>
            <returns>a matrix of integers</returns>
        </member>
        <member name="M:MyMediaLite.IO.MatrixExtensions.normalize(MyMediaLite.DataType.SparseMatrix{System.Double},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Normalize this instance.
            </summary>
        </member>
        <member name="T:MyMediaLite.IO.EntityMappingExtensions">
            <summary>I/O routines for classes implementing the IEntityMapping interface</summary>
        </member>
        <member name="M:MyMediaLite.IO.EntityMappingExtensions.SaveMapping(MyMediaLite.Data.IMapping,System.String)">
            <summary>Save the mappings to a file</summary>
            <param name='mapping'>the mapping object to store</param>
            <param name='filename'>the name of the file</param>
        </member>
        <member name="M:MyMediaLite.IO.EntityMappingExtensions.LoadMapping(System.String)">
            <summary>Load entity mappings from a file</summary>
            <param name='filename'>the name of the file</param>
            <returns>an object of type EntityMapping</returns>
        </member>
        <member name="T:MyMediaLite.IO.FileSerializer">
            <summary>Static class for serializing objects to binary files</summary>
        </member>
        <member name="M:MyMediaLite.IO.FileSerializer.Should(MyMediaLite.Data.IMapping,MyMediaLite.Data.IMapping)">
            <summary>Determine from the mapping objects whether we should serialize the data or not</summary>
            <returns><c>true</c> if we should serialize; otherwise, <c>false</c></returns>
            <param name='user_mapping'>user ID mapping</param>
            <param name='item_mapping'>item ID mapping</param>
        </member>
        <member name="M:MyMediaLite.IO.FileSerializer.CanWrite(System.String)">
            <summary>Determine whether we can write our data to the disk</summary>
            <returns><c>true</c> if we can write to filename; otherwise, <c>false</c></returns>
            <param name='filename'>name of the file to write to</param>
        </member>
        <member name="M:MyMediaLite.IO.FileSerializer.Serialize(System.Runtime.Serialization.ISerializable,System.String)">
            <summary>Serialize the specified object to a binary file</summary>
            <param name='object_to_serialize'>object to serialize</param>
            <param name='filename'>name of the file to save to</param>
        </member>
        <member name="M:MyMediaLite.IO.FileSerializer.Deserialize(System.String)">
            <summary>Deserialize an object from a binary file</summary>
            <param name='filename'>name of the file to load from</param>
        </member>
        <member name="T:MyMediaLite.IO.FileSystem">
            <summary>File-system related helper functions</summary>
        </member>
        <member name="M:MyMediaLite.IO.FileSystem.RunningOnUnix">
            <summary>
            Check whether the program runs on Unix or not
            </summary>
            <returns>
            true if it runs on Unix (including MacOS X, false otherwise)
            </returns>
        </member>
        <member name="M:MyMediaLite.IO.FileSystem.CreateUnixAppendStreamWriter(System.String)">
            <summary>
            Creates a StreamWriter which will be appended to
            </summary>
            <returns>
            a StreamWriter to a file that was opened with the append flag
            </returns>
            <param name='filename'>
            the name of the file
            </param>
        </member>
        <member name="M:MyMediaLite.IO.FileSystem.CreateStreamWriter(System.String)">
            <summary>
            Given a file name, create a StreamWriter
            </summary>
            <returns>
            a StreamWriter that will write to the file
            </returns>
            <param name='filename'>
            name of the file to be written to
            </param>
        </member>
        <member name="T:MyMediaLite.Eval.Items">
            <summary>Evaluation class for item recommendation</summary>
        </member>
        <member name="P:MyMediaLite.Eval.Items.Measures">
            <summary>the evaluation measures for item prediction offered by the class</summary>
            <remarks>
            The evaluation measures currently are:
            <list type="bullet">
              <item><term>AUC</term><description>area under the ROC curve</description></item>
              <item><term>prec@5</term><description>precision at 5</description></item>
              <item><term>prec@10</term><description>precision at 10</description></item>
              <item><term>MAP</term><description>mean average precision</description></item>
              <item><term>recall@5</term><description>recall at 5</description></item>
              <item><term>recall@10</term><description>recall at 10</description></item>
              <item><term>NDCG</term><description>normalizad discounted cumulative gain</description></item>
              <item><term>MRR</term><description>mean reciprocal rank</description></item>
            </list>
            An item recommender is better than another according to one of those measures its score is higher.
            </remarks>
        </member>
        <member name="M:MyMediaLite.Eval.Items.Candidates(System.Collections.Generic.IList{System.Int32},MyMediaLite.Eval.CandidateItems,MyMediaLite.Data.IPosOnlyFeedback,MyMediaLite.Data.IPosOnlyFeedback)">
            <param name="candidate_items">a list of integers with all candidate items</param>
            <param name="candidate_item_mode">the mode used to determine the candidate items</param>
            <param name="test">test cases</param>
            <param name="training">training data</param>
        </member>
        <member name="M:MyMediaLite.Eval.Items.Evaluate(MyMediaLite.IRecommender,MyMediaLite.Data.IPosOnlyFeedback,MyMediaLite.Data.IPosOnlyFeedback,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},MyMediaLite.Eval.CandidateItems,MyMediaLite.Eval.RepeatedEvents,System.Int32)">
             <summary>Evaluation for rankings of items</summary>
             <remarks>
             User-item combinations that appear in both sets are ignored for the test set, and thus in the evaluation,
             except the boolean argument repeated_events is set.
            
             The evaluation measures are listed in the Measures property.
             Additionally, 'num_users' and 'num_items' report the number of users that were used to compute the results
             and the number of items that were taken into account.
            
             Literature:
             <list type="bullet">
               <item><description>
               C. Manning, P. Raghavan, H. Schütze: Introduction to Information Retrieval, Cambridge University Press, 2008
               </description></item>
             </list>
            
             On multi-core/multi-processor systems, the routine tries to use as many cores as possible,
             which should to an almost linear speed-up.
             </remarks>
             <param name="recommender">item recommender</param>
             <param name="test">test cases</param>
             <param name="training">training data</param>
             <param name="test_users">a list of integers with all test users; if null, use all users in the test cases</param>
             <param name="candidate_items">a list of integers with all candidate items</param>
             <param name="candidate_item_mode">the mode used to determine the candidate items</param>
             <param name="repeated_events">allow repeated events in the evaluation (i.e. items accessed by a user before may be in the recommended list)</param>
             <param name="n">length of the item list to evaluate -- if set to -1 (default), use the complete list, otherwise compute evaluation measures on the top n items</param>
             <returns>a dictionary containing the evaluation results (default is false)</returns>
        </member>
        <member name="M:MyMediaLite.Eval.Items.ComputeFit(MyMediaLite.ItemRecommendation.ItemRecommender,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},MyMediaLite.Eval.CandidateItems)">
            <summary>Computes the AUC fit of a recommender on the training data</summary>
            <returns>the AUC on the training data</returns>
            <param name='recommender'>the item recommender to evaluate</param>
            <param name="test_users">a list of integers with all test users; if null, use all users in the test cases</param>
            <param name="candidate_items">a list of integers with all candidate items</param>
            <param name="candidate_item_mode">the mode used to determine the candidate items</param>
        </member>
        <member name="T:MyMediaLite.Eval.Ratings">
            <summary>Evaluation class for rating prediction</summary>
        </member>
        <member name="P:MyMediaLite.Eval.Ratings.Measures">
            <summary>the evaluation measures for rating prediction offered by the class</summary>
            <remarks>
            See http://recsyswiki.com/wiki/Root_mean_square_error and http://recsyswiki.com/wiki/Mean_absolute_error
            </remarks>
        </member>
        <member name="M:MyMediaLite.Eval.Ratings.Evaluate(MyMediaLite.RatingPrediction.IRatingPredictor,MyMediaLite.Data.IRatings,MyMediaLite.Data.IRatings)">
            <summary>Evaluates a rating predictor for RMSE, (N)MAE, and CBD</summary>
            <remarks>
              <para>
                See http://recsyswiki.com/wiki/Root_mean_square_error and http://recsyswiki.com/wiki/Mean_absolute_error
              </para>
              <para>
                For NMAE, see the paper by Goldberg et al.
              </para>
              <para>
                For CBD (capped binomial deviance), see http://www.kaggle.com/c/ChessRatings2/Details/Evaluation
              </para>
              <para>
                If the recommender can take time into account, and the rating dataset provides rating times,
                this information will be used for making rating predictions.
              </para>
              <para>
                Literature:
                <list type="bullet">
                  <item><description>
                    Ken Goldberg, Theresa Roeder, Dhruv Gupta, and Chris Perkins:
                    Eigentaste: A Constant Time Collaborative Filtering Algorithm.
                    nformation Retrieval Journal 2001.
                    http://goldberg.berkeley.edu/pubs/eigentaste.pdf
                  </description></item>
                </list>
              </para>
            </remarks>
            <param name="recommender">rating predictor</param>
            <param name="test_ratings">test cases</param>
            <param name="training_ratings">the training examples</param>
            <returns>a Dictionary containing the evaluation results</returns>
        </member>
        <member name="M:MyMediaLite.Eval.Ratings.ComputeCBD(System.Double,System.Double,System.Double,System.Double)">
            <summary>Compute the capped binomial deviation (CBD)</summary>
            <remarks>
              http://www.kaggle.com/c/ChessRatings2/Details/Evaluation
            </remarks>
            <returns>The CBD of a given rating and a prediction</returns>
            <param name='actual_rating'>the actual rating</param>
            <param name='prediction'>the predicted rating</param>
            <param name='min_rating'>the lower bound of the rating scale</param>
            <param name='max_rating'>the upper bound of the rating scale</param>
        </member>
        <member name="M:MyMediaLite.Eval.Ratings.ComputeFit(MyMediaLite.RatingPrediction.RatingPredictor)">
            <summary>Computes the RMSE fit of a recommender on the training data</summary>
            <returns>the RMSE on the training data</returns>
            <param name='recommender'>the rating predictor to evaluate</param>
        </member>
        <member name="T:MyMediaLite.Eval.Measures.PrecisionAndRecall">
            <summary>Precision and recall at different positions in the list</summary>
            <remarks>
              <para>
                Precision and recall are classical evaluation measures from information retrieval.
              </para>
              <para>
                This class contains methods for computing precision and recall up to different positions
                in the recommendation list, and the average precision (AP).
              </para>
              <para>
                The mean of the AP over different users is called mean average precision (MAP)
              </para>
            </remarks>
        </member>
        <member name="M:MyMediaLite.Eval.Measures.PrecisionAndRecall.AP(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.ICollection{System.Int32})">
            <summary>Compute the average precision (AP) of a list of ranked items</summary>
            <remarks>See p. 147 of Introduction to Information Retrieval by Manning, Raghavan, Schütze.</remarks>
            <param name="ranked_items">a list of ranked item IDs, the highest-ranking item first</param>
            <param name="correct_items">a collection of positive/correct item IDs</param>
            <returns>the AP for the given list</returns>
        </member>
        <member name="M:MyMediaLite.Eval.Measures.PrecisionAndRecall.PrecisionAt(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.ICollection{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>Compute the precision at N of a list of ranked items at several N</summary>
            <param name="ranked_items">a list of ranked item IDs, the highest-ranking item first</param>
            <param name="correct_items">a collection of positive/correct item IDs</param>
            <param name="ns">the cutoff positions in the list</param>
            <returns>the precision at N for the given data at the different positions N</returns>
        </member>
        <member name="M:MyMediaLite.Eval.Measures.PrecisionAndRecall.PrecisionAt(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.ICollection{System.Int32},System.Int32)">
            <summary>Compute the precision at N of a list of ranked items</summary>
            <param name="ranked_items">a list of ranked item IDs, the highest-ranking item first</param>
            <param name="correct_items">a collection of positive/correct item IDs</param>
            <param name="n">the cutoff position in the list</param>
            <returns>the precision at N for the given data</returns>
        </member>
        <member name="M:MyMediaLite.Eval.Measures.PrecisionAndRecall.RecallAt(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.ICollection{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>Compute the recall at N of a list of ranked items at several N</summary>
            <param name="ranked_items">a list of ranked item IDs, the highest-ranking item first</param>
            <param name="correct_items">a collection of positive/correct item IDs</param>
            <param name="ns">the cutoff positions in the list</param>
            <returns>the recall at N for the given data at the different positions N</returns>
        </member>
        <member name="M:MyMediaLite.Eval.Measures.PrecisionAndRecall.RecallAt(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.ICollection{System.Int32},System.Int32)">
            <summary>Compute the recall at N of a list of ranked items</summary>
            <param name="ranked_items">a list of ranked item IDs, the highest-ranking item first</param>
            <param name="correct_items">a collection of positive/correct item IDs</param>
            <param name="n">the cutoff position in the list</param>
            <returns>the recall at N for the given data</returns>
        </member>
        <member name="M:MyMediaLite.Eval.Measures.PrecisionAndRecall.HitsAt(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.ICollection{System.Int32},System.Int32)">
            <summary>Compute the number of hits until position N of a list of ranked items</summary>
            <param name="ranked_items">a list of ranked item IDs, the highest-ranking item first</param>
            <param name="correct_items">a collection of positive/correct item IDs</param>
            <param name="n">the cutoff position in the list</param>
            <returns>the hits at N for the given data</returns>
        </member>
        <member name="T:MyMediaLite.Eval.Measures.NDCG">
            <summary>Normalized discounted cumulative gain (NDCG) of a list of ranked items</summary>
            <remarks>
            See http://recsyswiki.com/wiki/Discounted_Cumulative_Gain
            </remarks>
        </member>
        <member name="M:MyMediaLite.Eval.Measures.NDCG.Compute(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.ICollection{System.Int32})">
            <summary>Compute the normalized discounted cumulative gain (NDCG) of a list of ranked items</summary>
            <remarks>
            See http://recsyswiki.com/wiki/Discounted_Cumulative_Gain
            </remarks>
            <param name="ranked_items">a list of ranked item IDs, the highest-ranking item first</param>
            <param name="correct_items">a collection of positive/correct item IDs</param>
            <returns>the NDCG for the given data</returns>
        </member>
        <member name="M:MyMediaLite.Eval.Measures.NDCG.ComputeIDCG(System.Int32)">
            <summary>Computes the ideal DCG given the number of positive items.</summary>
            <remarks>
            See http://recsyswiki.com/wiki/Discounted_Cumulative_Gain
            </remarks>
            <returns>the ideal DCG</returns>
            <param name='n'>the number of positive items</param>
        </member>
        <member name="T:MyMediaLite.Eval.Measures.ReciprocalRank">
             <summary>The reciprocal rank of a list of ranked items</summary>
             <remarks>
               <para>
                 See http://en.wikipedia.org/wiki/Mean_reciprocal_rank
               </para>
            
               <para>
                 Literature:
                 <list type="bullet">
                   <item><description>
                     E.M. Voorhees "Proceedings of the 8th Text Retrieval Conference". TREC-8 Question Answering Track Report. 1999.
                     http://gate.ac.uk/sale/dd/related-work/qa/TREC+1999+TREC-8+QA+Report.pdf
                   </description></item>
                 </list>
               </para>
             </remarks>
        </member>
        <member name="M:MyMediaLite.Eval.Measures.ReciprocalRank.Compute(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.ICollection{System.Int32})">
            <summary>Compute the reciprocal rank of a list of ranked items</summary>
            <remarks>
            See http://en.wikipedia.org/wiki/Mean_reciprocal_rank
            </remarks>
            <param name="ranked_items">a list of ranked item IDs, the highest-ranking item first</param>
            <param name="correct_items">a collection of positive/correct item IDs</param>
            <returns>the mean reciprocal rank for the given data</returns>
        </member>
        <member name="T:MyMediaLite.Eval.Measures.AUC">
            <summary>Area under the ROC curve (AUC) of a list of ranked items</summary>
            <remarks>
            See http://recsyswiki.com/wiki/Area_Under_the_ROC_Curve
            </remarks>
        </member>
        <member name="M:MyMediaLite.Eval.Measures.AUC.Compute(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.ICollection{System.Int32},System.Int32)">
            <summary>Compute the area under the ROC curve (AUC) of a list of ranked items</summary>
            <remarks>
            See http://recsyswiki.com/wiki/Area_Under_the_ROC_Curve
            </remarks>
            <param name="ranked_items">a list of ranked item IDs, the highest-ranking item first</param>
            <param name="relevant_items">a collection of positive/correct item IDs</param>
            <param name="num_dropped_items">the number of items that were not ranked (considered to be ranked below all ranked_items)</param>
            <returns>the AUC for the given data</returns>
        </member>
        <member name="T:MyMediaLite.Eval.Measures.RMSE">
            <summary>Utility functions for the root mean square error (RMSE)</summary>
        </member>
        <member name="M:MyMediaLite.Eval.Measures.RMSE.ComputeSquaredErrorSum(MyMediaLite.RatingPrediction.IRatingPredictor,MyMediaLite.Data.IRatings)">
            <summary>Computes the squared error sum</summary>
            <returns>the squared error sum</returns>
            <param name='recommender'>the recommender to make predictions with</param>
            <param name='ratings'>the actual ratings</param>
        </member>
        <member name="T:MyMediaLite.Eval.Measures.MAE">
            <summary>Utility functions for the mean absolute error</summary>
        </member>
        <member name="M:MyMediaLite.Eval.Measures.MAE.ComputeAbsoluteErrorSum(MyMediaLite.RatingPrediction.IRatingPredictor,MyMediaLite.Data.IRatings)">
            <summary>Computes the absolute error sum</summary>
            <returns>the absolute error sum</returns>
            <param name='recommender'>the recommender to make predictions with</param>
            <param name='ratings'>the actual ratings</param>
        </member>
        <member name="T:MyMediaLite.Eval.Measures.LogisticLoss">
            <summary>Utility functions for the logistic loss</summary>
        </member>
        <member name="M:MyMediaLite.Eval.Measures.LogisticLoss.ComputeSum(MyMediaLite.RatingPrediction.IRatingPredictor,MyMediaLite.Data.IRatings,System.Single,System.Single)">
            <summary>Computes the logistic loss sum</summary>
            <returns>the logistic loss sum</returns>
            <param name='recommender'>the recommender to make predictions with</param>
            <param name='ratings'>the actual ratings</param>
            <param name='min_rating'>the minimal rating</param>
            <param name='rating_range_size'>the size of the rating range: max_rating - min_rating</param>
        </member>
        <member name="T:MyMediaLite.Eval.ItemsOnline">
            <summary>Online evaluation for rankings of items</summary>
        </member>
        <member name="M:MyMediaLite.Eval.ItemsOnline.EvaluateOnline(MyMediaLite.IRecommender,MyMediaLite.Data.IPosOnlyFeedback,MyMediaLite.Data.IPosOnlyFeedback,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},MyMediaLite.Eval.CandidateItems)">
            <summary>Online evaluation for rankings of items</summary>
            <remarks>
            The evaluation protocol works as follows:
            For every test user, evaluate on the test items, and then add the those test items to the training set and perform an incremental update.
            The sequence of users is random.
            </remarks>
            <param name="recommender">the item recommender to be evaluated</param>
            <param name="test">test cases</param>
            <param name="training">training data (must be connected to the recommender's training data)</param>
            <param name="test_users">a list of all test user IDs</param>
            <param name="candidate_items">a list of all candidate item IDs</param>
            <param name="candidate_item_mode">the mode used to determine the candidate items</param>
            <returns>a dictionary containing the evaluation results (averaged by user)</returns>
        </member>
        <member name="T:MyMediaLite.Eval.RatingsOnline">
            <summary>Online evaluation for rating prediction</summary>
        </member>
        <member name="M:MyMediaLite.Eval.RatingsOnline.EvaluateOnline(MyMediaLite.RatingPrediction.IRatingPredictor,MyMediaLite.Data.IRatings)">
            <summary>Online evaluation for rating prediction</summary>
            <remarks>
            Every rating that is tested is added to the training set afterwards.
            </remarks>
            <param name="recommender">rating predictor</param>
            <param name="ratings">Test cases</param>
            <returns>a Dictionary containing the evaluation results</returns>
        </member>
        <member name="T:MyMediaLite.Eval.ItemsCrossValidation">
            <summary>Cross-validation for item recommendation</summary>
        </member>
        <member name="M:MyMediaLite.Eval.ItemsCrossValidation.DoCrossValidation(MyMediaLite.IRecommender,System.UInt32,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},MyMediaLite.Eval.CandidateItems,System.Boolean,System.Boolean)">
            <summary>Evaluate on the folds of a dataset split</summary>
            <param name="recommender">an item recommender</param>
            <param name="num_folds">the number of folds</param>
            <param name="test_users">a collection of integers with all test users</param>
            <param name="candidate_items">a collection of integers with all candidate items</param>
            <param name="candidate_item_mode">the mode used to determine the candidate items</param>
            <param name="compute_fit">if set to true measure fit on the training data as well</param>
            <param name="show_results">set to true to print results to STDERR</param>
            <returns>a dictionary containing the average results over the different folds of the split</returns>
        </member>
        <member name="M:MyMediaLite.Eval.ItemsCrossValidation.DoCrossValidation(MyMediaLite.IRecommender,MyMediaLite.Data.ISplit{MyMediaLite.Data.IPosOnlyFeedback},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},MyMediaLite.Eval.CandidateItems,System.Boolean,System.Boolean)">
            <summary>Evaluate on the folds of a dataset split</summary>
            <param name="recommender">an item recommender</param>
            <param name="split">a dataset split</param>
            <param name="test_users">a collection of integers with all test users</param>
            <param name="candidate_items">a collection of integers with all candidate items</param>
            <param name="candidate_item_mode">the mode used to determine the candidate items</param>
            <param name="compute_fit">if set to true measure fit on the training data as well</param>
            <param name="show_results">set to true to print results to STDERR</param>
            <returns>a dictionary containing the average results over the different folds of the split</returns>
        </member>
        <member name="M:MyMediaLite.Eval.ItemsCrossValidation.DoIterativeCrossValidation(MyMediaLite.IRecommender,System.UInt32,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},MyMediaLite.Eval.CandidateItems,MyMediaLite.Eval.RepeatedEvents,System.UInt32,System.UInt32,System.Boolean)">
            <summary>Evaluate an iterative recommender on the folds of a dataset split, display results on STDOUT</summary>
            <param name="recommender">an item recommender</param>
            <param name="num_folds">the number of folds</param>
            <param name="test_users">a collection of integers with all test users</param>
            <param name="candidate_items">a collection of integers with all candidate items</param>
            <param name="candidate_item_mode">the mode used to determine the candidate items</param>
            <param name="repeated_events">allow repeated events in the evaluation (i.e. items accessed by a user before may be in the recommended list)</param>
            <param name="max_iter">the maximum number of iterations</param>
            <param name="find_iter">the report interval</param>
            <param name="show_fold_results">if set to true to print per-fold results to STDERR</param>
        </member>
        <member name="M:MyMediaLite.Eval.ItemsCrossValidation.DoIterativeCrossValidation(MyMediaLite.IRecommender,MyMediaLite.Data.ISplit{MyMediaLite.Data.IPosOnlyFeedback},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},MyMediaLite.Eval.CandidateItems,MyMediaLite.Eval.RepeatedEvents,System.UInt32,System.UInt32,System.Boolean)">
            <summary>Evaluate an iterative recommender on the folds of a dataset split, display results on STDOUT</summary>
            <param name="recommender">an item recommender</param>
            <param name="split">a positive-only feedback dataset split</param>
            <param name="test_users">a collection of integers with all test users</param>
            <param name="candidate_items">a collection of integers with all candidate items</param>
            <param name="candidate_item_mode">the mode used to determine the candidate items</param>
            <param name="repeated_events">allow repeated events in the evaluation (i.e. items accessed by a user before may be in the recommended list)</param>
            <param name="max_iter">the maximum number of iterations</param>
            <param name="find_iter">the report interval</param>
            <param name="show_fold_results">if set to true to print per-fold results to STDERR</param>
        </member>
        <member name="T:MyMediaLite.Eval.RatingsCrossValidation">
            <summary>Cross-validation for rating prediction</summary>
        </member>
        <member name="M:MyMediaLite.Eval.RatingsCrossValidation.DoCrossValidation(MyMediaLite.RatingPrediction.RatingPredictor,System.UInt32,System.Boolean,System.Boolean)">
            <summary>Evaluate on the folds of a dataset split</summary>
            <param name="recommender">a rating predictor</param>
            <param name="num_folds">the number of folds</param>
            <param name="compute_fit">if set to true measure fit on the training data as well</param>
            <param name="show_fold_results">if set to true to print per-fold results to STDERR</param>
            <returns>a dictionary containing the average results over the different folds of the split</returns>
        </member>
        <member name="M:MyMediaLite.Eval.RatingsCrossValidation.DoCrossValidation(MyMediaLite.RatingPrediction.RatingPredictor,MyMediaLite.Data.ISplit{MyMediaLite.Data.IRatings},System.Boolean,System.Boolean)">
            <summary>Evaluate on the folds of a dataset split</summary>
            <param name="recommender">a rating predictor</param>
            <param name="split">a rating dataset split</param>
            <param name="compute_fit">if set to true measure fit on the training data as well</param>
            <param name="show_fold_results">set to true to print per-fold results to STDERR</param>
            <returns>a dictionary containing the average results over the different folds of the split</returns>
        </member>
        <member name="M:MyMediaLite.Eval.RatingsCrossValidation.DoIterativeCrossValidation(MyMediaLite.RatingPrediction.RatingPredictor,System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
            <summary>Evaluate an iterative recommender on the folds of a dataset split, display results on STDOUT</summary>
            <param name="recommender">a rating predictor</param>
            <param name="num_folds">the number of folds</param>
            <param name="max_iter">the maximum number of iterations</param>
            <param name="find_iter">the report interval</param>
            <param name="show_fold_results">if set to true to print per-fold results to STDERR</param>
        </member>
        <member name="M:MyMediaLite.Eval.RatingsCrossValidation.DoIterativeCrossValidation(MyMediaLite.RatingPrediction.RatingPredictor,MyMediaLite.Data.ISplit{MyMediaLite.Data.IRatings},System.UInt32,System.UInt32,System.Boolean)">
            <summary>Evaluate an iterative recommender on the folds of a dataset split, display results on STDOUT</summary>
            <param name="recommender">a rating predictor</param>
            <param name="split">a rating dataset split</param>
            <param name="max_iter">the maximum number of iterations</param>
            <param name="find_iter">the report interval</param>
            <param name="show_fold_results">if set to true to print per-fold results to STDERR</param>
        </member>
        <member name="T:MyMediaLite.Eval.CandidateItems">
            <summary>Different modes for choosing candiate items in item recommender evaluation</summary>
        </member>
        <member name="F:MyMediaLite.Eval.CandidateItems.TRAINING">
            <summary>use all items in the training set</summary>
        </member>
        <member name="F:MyMediaLite.Eval.CandidateItems.TEST">
            <summary>use all items in the test set</summary>
        </member>
        <member name="F:MyMediaLite.Eval.CandidateItems.OVERLAP">
            <summary>use all items that are both in the training and the test set</summary>
        </member>
        <member name="F:MyMediaLite.Eval.CandidateItems.UNION">
            <summary>use all items present in the training and test set</summary>
        </member>
        <member name="F:MyMediaLite.Eval.CandidateItems.EXPLICIT">
            <summary>use items provided in a list given by the user</summary>
        </member>
        <member name="T:MyMediaLite.Eval.ItemRecommendationEvaluationResults">
            <summary>Item recommendation evaluation results</summary>
            <remarks>
            This class is basically a Dictionary with a custom-made ToString() method.
            </remarks>
        </member>
        <member name="P:MyMediaLite.Eval.ItemRecommendationEvaluationResults.DefaultMeasuresToShow">
            <summary>
            Default for MeasuresToShow
            </summary>
        </member>
        <member name="M:MyMediaLite.Eval.ItemRecommendationEvaluationResults.#ctor">
            <summary>default constructor</summary>
        </member>
        <member name="M:MyMediaLite.Eval.ItemRecommendationEvaluationResults.#ctor(System.Collections.Generic.IList{System.Collections.Generic.Dictionary{System.String,System.Single}})">
            
        </member>
        <member name="T:MyMediaLite.Eval.RatingPredictionEvaluationResults">
            <summary>Rating prediction evaluation results</summary>
            <remarks>
            This class is basically a Dictionary with a custom-made ToString() method.
            </remarks>
        </member>
        <member name="P:MyMediaLite.Eval.RatingPredictionEvaluationResults.DefaultMeasuresToShow">
            <summary>
            Default for MeasuresToShow
            </summary>
        </member>
        <member name="P:MyMediaLite.Eval.RatingPredictionEvaluationResults.NewUserResults">
            <summary>results for users without ratings in the training data</summary>
        </member>
        <member name="P:MyMediaLite.Eval.RatingPredictionEvaluationResults.NewItemResults">
            <summary>results for items without ratings in the training data</summary>
        </member>
        <member name="P:MyMediaLite.Eval.RatingPredictionEvaluationResults.NewUserNewItemResults">
            <summary>results for rating predictions where neither the user nor the item has ratings in the training data</summary>
        </member>
        <member name="M:MyMediaLite.Eval.RatingPredictionEvaluationResults.#ctor">
            <summary>default constructor</summary>
        </member>
        <member name="M:MyMediaLite.Eval.RatingPredictionEvaluationResults.#ctor(System.Collections.Generic.Dictionary{System.String,System.Single})">
            
        </member>
        <member name="M:MyMediaLite.Eval.RatingPredictionEvaluationResults.#ctor(System.Collections.Generic.IList{System.Collections.Generic.Dictionary{System.String,System.Single}})">
            
        </member>
        <member name="M:MyMediaLite.Eval.RatingPredictionEvaluationResults.ToString">
            <summary>Format rating prediction results</summary>
            <remarks>
            See http://recsyswiki.com/wiki/Root_mean_square_error and http://recsyswiki.com/wiki/Mean_absolute_error
            </remarks>
            <returns>a string containing the results</returns>
        </member>
        <member name="T:MyMediaLite.Eval.FoldIn">
            <summary>Fold-in evaluation</summary>
        </member>
        <member name="M:MyMediaLite.Eval.FoldIn.EvaluateFoldIn(MyMediaLite.RatingPrediction.IFoldInRatingPredictor,MyMediaLite.Data.IRatings,MyMediaLite.Data.IRatings)">
            <summary>Performs user-wise fold-in evaluation</summary>
            <returns>the evaluation results</returns>
            <param name='recommender'>a rating predictor capable of performing a user fold-in</param>
            <param name='update_data'>the rating data used to represent the users</param>
            <param name='eval_data'>the evaluation data</param>
        </member>
        <member name="M:MyMediaLite.Eval.FoldIn.EvaluateFoldInCompleteRetraining(MyMediaLite.RatingPrediction.RatingPredictor,MyMediaLite.Data.IRatings,MyMediaLite.Data.IRatings)">
            <summary>Performs user-wise fold-in evaluation, but instead of folding in perform a complete re-training with the new data</summary>
            <remarks>
            This method can be quite slow.
            </remarks>
            <returns>the evaluation results</returns>
            <param name='recommender'>a rating predictor capable of performing a user fold-in</param>
            <param name='update_data'>the rating data used to represent the users</param>
            <param name='eval_data'>the evaluation data</param>
        </member>
        <member name="M:MyMediaLite.Eval.FoldIn.EvaluateFoldInIncrementalTraining(MyMediaLite.RatingPrediction.IncrementalRatingPredictor,MyMediaLite.Data.IRatings,MyMediaLite.Data.IRatings)">
            <summary>Performs user-wise fold-in evaluation, but instead of folding in perform incremental training with the new data</summary>
            <remarks>
            </remarks>
            <returns>the evaluation results</returns>
            <param name='recommender'>a rating predictor capable of performing a user fold-in</param>
            <param name='update_data'>the rating data used to represent the users</param>
            <param name='eval_data'>the evaluation data</param>
        </member>
        <member name="T:MyMediaLite.Eval.RepeatedEvents">
            <summary>
            Enum type to determine whether repeated events should be assumed/supported or not.
            </summary>
        </member>
        <member name="F:MyMediaLite.Eval.RepeatedEvents.No">
            <summary>Do not allow repeated events</summary>
        </member>
        <member name="F:MyMediaLite.Eval.RepeatedEvents.Yes">
            <summary>Allow/assume repeated events</summary>
        </member>
        <member name="T:MyMediaLite.Eval.EvaluationResults">
            <summary>
            Class for representing evaluation results
            </summary>
        </member>
        <member name="P:MyMediaLite.Eval.EvaluationResults.MeasuresToShow">
            <summary>
            List of strings representing the evaluation measures which will be shown by the ToString() method
            </summary>
            <remarks>
            All strings must be keys of the dictionary.
            </remarks>
        </member>
        <member name="P:MyMediaLite.Eval.EvaluationResults.IntsToShow">
            <summary>
            List of strings representing the integer values (like number of users) which will be shown by the ToString() method
            </summary>
            <remarks>
            All strings must be keys of the dictionary.
            </remarks>
        </member>
        <member name="P:MyMediaLite.Eval.EvaluationResults.FloatingPointFormat">
            <summary>
            The format string used to display floating point numbers
            </summary>
        </member>
        <member name="M:MyMediaLite.Eval.EvaluationResults.#ctor">
            <summary> Constructor</summary>
        </member>
        <member name="M:MyMediaLite.Eval.EvaluationResults.#ctor(System.Collections.Generic.IList{System.Collections.Generic.Dictionary{System.String,System.Single}})">
            <summary>Create averaged results</summary>
            <param name='result_list'>the list of results to average</param>
        </member>
        <member name="M:MyMediaLite.Eval.EvaluationResults.#ctor(System.Collections.Generic.Dictionary{System.String,System.Single})">
            <summary>initialize with given results</summary>
            <param name='results'>a dictionary containing results</param>
        </member>
        <member name="M:MyMediaLite.Eval.EvaluationResults.ToString">
            <summary>Format item prediction results</summary>
            <returns>a string containing the results</returns>
        </member>
        <member name="T:MyMediaLite.Eval.RatingBasedRankingCrossValidation">
            <summary>Cross-validation for rating-based ranking</summary>
        </member>
        <member name="M:MyMediaLite.Eval.RatingBasedRankingCrossValidation.DoRatingBasedRankingCrossValidation(MyMediaLite.RatingPrediction.RatingPredictor,System.UInt32,System.Collections.Generic.IList{System.Int32},MyMediaLite.Eval.CandidateItems,System.Boolean,System.Boolean)">
            <summary>Evaluate on the folds of a dataset split</summary>
            <param name="recommender">an item recommender</param>
            <param name="num_folds">the number of folds</param>
            <param name="candidate_items">a collection of integers with all candidate items</param>
            <param name="candidate_item_mode">the mode used to determine the candidate items</param>
            <param name="compute_fit">if set to true measure fit on the training data as well</param>
            <param name="show_results">set to true to print results to STDERR</param>
            <returns>a dictionary containing the average results over the different folds of the split</returns>
        </member>
        <member name="M:MyMediaLite.Eval.RatingBasedRankingCrossValidation.DoRatingBasedRankingCrossValidation(MyMediaLite.RatingPrediction.RatingPredictor,MyMediaLite.Data.ISplit{MyMediaLite.Data.IRatings},System.Collections.Generic.IList{System.Int32},MyMediaLite.Eval.CandidateItems,System.Boolean,System.Boolean)">
            <summary>Evaluate on the folds of a dataset split</summary>
            <param name="recommender">an item recommender</param>
            <param name="split">a dataset split</param>
            <param name="candidate_items">a collection of integers with all candidate items</param>
            <param name="candidate_item_mode">the mode used to determine the candidate items</param>
            <param name="compute_fit">if set to true measure fit on the training data as well</param>
            <param name="show_results">set to true to print results to STDERR</param>
            <returns>a dictionary containing the average results over the different folds of the split</returns>
        </member>
        <member name="M:MyMediaLite.Eval.RatingBasedRankingCrossValidation.DoRatingBasedRankingIterativeCrossValidation(MyMediaLite.RatingPrediction.RatingPredictor,System.UInt32,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},MyMediaLite.Eval.CandidateItems,MyMediaLite.Eval.RepeatedEvents,System.UInt32,System.UInt32,System.Boolean)">
            <summary>Evaluate an iterative recommender on the folds of a dataset split, display results on STDOUT</summary>
            <param name="recommender">an item recommender</param>
            <param name="num_folds">the number of folds</param>
            <param name="test_users">a collection of integers with all test users</param>
            <param name="candidate_items">a collection of integers with all candidate items</param>
            <param name="candidate_item_mode">the mode used to determine the candidate items</param>
            <param name="repeated_events">allow repeated events in the evaluation (i.e. items accessed by a user before may be in the recommended list)</param>
            <param name="max_iter">the maximum number of iterations</param>
            <param name="find_iter">the report interval</param>
            <param name="show_fold_results">if set to true to print per-fold results to STDERR</param>
        </member>
        <member name="M:MyMediaLite.Eval.RatingBasedRankingCrossValidation.DoRatingBasedRankingIterativeCrossValidation(MyMediaLite.RatingPrediction.RatingPredictor,MyMediaLite.Data.ISplit{MyMediaLite.Data.IRatings},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},MyMediaLite.Eval.CandidateItems,MyMediaLite.Eval.RepeatedEvents,System.UInt32,System.UInt32,System.Boolean)">
            <summary>Evaluate an iterative recommender on the folds of a dataset split, display results on STDOUT</summary>
            <param name="recommender">an item recommender</param>
            <param name="split">a positive-only feedback dataset split</param>
            <param name="test_users">a collection of integers with all test users</param>
            <param name="candidate_items">a collection of integers with all candidate items</param>
            <param name="candidate_item_mode">the mode used to determine the candidate items</param>
            <param name="repeated_events">allow repeated events in the evaluation (i.e. items accessed by a user before may be in the recommended list)</param>
            <param name="max_iter">the maximum number of iterations</param>
            <param name="find_iter">the report interval</param>
            <param name="show_fold_results">if set to true to print per-fold results to STDERR</param>
        </member>
        <member name="P:MyMediaLite.Eval.ItemsWeatherItemRecommender.Measures">
            <summary>the evaluation measures for item prediction offered by the class</summary>
            <remarks>
            The evaluation measures currently are:
            <list type="bullet">
              <item><term>AUC</term><description>area under the ROC curve</description></item>
              <item><term>prec@5</term><description>precision at 5</description></item>
              <item><term>prec@10</term><description>precision at 10</description></item>
              <item><term>MAP</term><description>mean average precision</description></item>
              <item><term>recall@5</term><description>recall at 5</description></item>
              <item><term>recall@10</term><description>recall at 10</description></item>
              <item><term>NDCG</term><description>normalizad discounted cumulative gain</description></item>
              <item><term>MRR</term><description>mean reciprocal rank</description></item>
            </list>
            An item recommender is better than another according to one of those measures its score is higher.
            </remarks>
        </member>
        <member name="M:MyMediaLite.Eval.ItemsWeatherItemRecommender.Evaluate(MyMediaLite.IRecommender,MyMediaLite.Data.ITimedRatings,MyMediaLite.Data.ITimedRatings,System.String,System.Int32,System.Double)">
             <summary>Evaluation for rankings of items</summary>
             <remarks>
             User-item combinations that appear in both sets are ignored for the test set, and thus in the evaluation,
             except the boolean argument repeated_events is set.
            
             The evaluation measures are listed in the Measures property.
             Additionally, 'num_users' and 'num_items' report the number of users that were used to compute the results
             and the number of items that were taken into account.
            
             Literature:
             <list type="bullet">
               <item><description>
               C. Manning, P. Raghavan, H. Schütze: Introduction to Information Retrieval, Cambridge University Press, 2008
               </description></item>
             </list>
            
             On multi-core/multi-processor systems, the routine tries to use as many cores as possible,
             which should to an almost linear speed-up.
             </remarks>
             <param name="recommender">item recommender</param>
             <param name="test">test cases</param>
             <param name="training">training data</param>
             <param name="n">length of the item list to evaluate -- if set to -1 (default), use the complete list, otherwise compute evaluation measures on the top n items</param>
             <returns>a dictionary containing the evaluation results (default is false)</returns>
        </member>
        <member name="T:MyMediaLite.Diversification.SequentialDiversification">
            <summary>Sequential diversification</summary>
            <remarks>
            Literature:
            <list type="bullet">
              <item><description>
              Cai-Nicolas Ziegler, Sean McNee, Joseph A. Konstan, Georg Lausen:
              Improving Recommendation Lists Through Topic Diversification.
              WWW 2005
              </description></item>
            </list>
            </remarks>
        </member>
        <member name="M:MyMediaLite.Diversification.SequentialDiversification.#ctor(MyMediaLite.Correlation.SymmetricCorrelationMatrix)">
            <summary>Constructor</summary>
            <param name="item_correlation">the similarity measure to use for diversification</param>
        </member>
        <member name="M:MyMediaLite.Diversification.SequentialDiversification.DiversifySequential(System.Collections.Generic.IList{System.Int32},System.Single)">
            <summary>Diversify an item list</summary>
            <param name="item_list">a list of items</param>
            <param name="diversification_parameter">the diversification parameter (higher means more diverse)</param>
            <returns>a list re-ordered to ensure maximum diversity at the top of the list</returns>
        </member>
        <member name="M:MyMediaLite.Diversification.SequentialDiversification.Similarity(System.Int32,System.Collections.Generic.ICollection{System.Int32},MyMediaLite.Correlation.SymmetricCorrelationMatrix)">
            <summary>Compute similarity between one item and a collection of items</summary>
            <param name="item_id">the item ID</param>
            <param name="items">a collection of items</param>
            <param name="item_correlation">the similarity measure to use</param>
            <returns>the similarity between the item and the collection</returns>
        </member>
        <member name="M:MyMediaLite.Diversification.SequentialDiversification.Similarity(System.Collections.Generic.ICollection{System.Int32},MyMediaLite.Correlation.SymmetricCorrelationMatrix)">
            <summary>Compute the intra-set similarity of an item collection</summary>
            <param name="items">a collection of items</param>
            <param name="item_correlation">the similarity measure to use</param>
            <returns>the intra-set similarity of the collection</returns>
        </member>
        <member name="T:MyMediaLite.HyperParameter.NelderMead">
            <summary>Nealder-Mead algorithm for finding suitable hyperparameters</summary>
        </member>
        <member name="M:MyMediaLite.HyperParameter.NelderMead.FindMinimum(System.String,MyMediaLite.RatingPrediction.RatingPredictor)">
            <summary>Find best hyperparameter (according to an error measure) using Nelder-Mead search</summary>
            <param name="error_measure">an error measure (lower is better)</param>
            <param name="recommender">a rating predictor (will be set to best hyperparameter combination)</param>
            <returns>the estimated error of the best hyperparameter combination</returns>
        </member>
        <member name="M:MyMediaLite.HyperParameter.NelderMead.FindMinimum(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{MathNet.Numerics.LinearAlgebra.Double.DenseVector},MyMediaLite.RatingPrediction.RatingPredictor,MyMediaLite.Data.ISplit{MyMediaLite.Data.IRatings})">
            <summary>Find the the parameters resulting in the minimal results for a given evaluation measure</summary>
            <remarks>The recommender will be set to the best parameter value after calling this method.</remarks>
            <param name="evaluation_measure">the name of the evaluation measure</param>
            <param name="hp_names">the names of the hyperparameters to optimize</param>
            <param name="initial_hp_values">the values of the hyperparameters to try out first</param>
            <param name="recommender">the recommender</param>
            <param name="split">the dataset split to use</param>
            <returns>the best (lowest) average value for the hyperparameter</returns>
        </member>
        <member name="T:MyMediaLite.HyperParameter.GridSearch">
            <summary>Grid search for finding suitable hyperparameters</summary>
        </member>
        <member name="M:MyMediaLite.HyperParameter.GridSearch.FindMinimum(System.String,System.String,System.Double[],MyMediaLite.RatingPrediction.RatingPredictor,MyMediaLite.Data.ISplit{MyMediaLite.Data.IRatings})">
            <summary>Find the the parameters resulting in the minimal results for a given evaluation measure (1D)</summary>
            <remarks>The recommender will be set to the best parameter value after calling this method.</remarks>
            <param name="evaluation_measure">the name of the evaluation measure</param>
            <param name="hyperparameter_name">the name of the hyperparameter to optimize</param>
            <param name="hyperparameter_values">the values of the hyperparameter to try out</param>
            <param name="recommender">the recommender</param>
            <param name="split">the dataset split to use</param>
            <returns>the best (lowest) average value for the hyperparameter</returns>
        </member>
        <member name="M:MyMediaLite.HyperParameter.GridSearch.FindMinimum(System.String,System.String,System.String,System.Double[],System.Double[],MyMediaLite.RatingPrediction.RatingPredictor,MyMediaLite.Data.ISplit{MyMediaLite.Data.IRatings})">
            <summary>Find the the parameters resulting in the minimal results for a given evaluation measure (2D)</summary>
            <remarks>The recommender will be set to the best parameter value after calling this method.</remarks>
            <param name="evaluation_measure">the name of the evaluation measure</param>
            <param name="hp_name1">the name of the first hyperparameter to optimize</param>
            <param name="hp_values1">the values of the first hyperparameter to try out</param>
            <param name="hp_name2">the name of the second hyperparameter to optimize</param>
            <param name="hp_values2">the values of the second hyperparameter to try out</param>
            <param name="recommender">the recommender</param>
            <param name="split">the dataset split to use</param>
            <returns>the best (lowest) average value for the hyperparameter</returns>
        </member>
        <member name="M:MyMediaLite.HyperParameter.GridSearch.FindMinimumExponential(System.String,System.String,System.String,System.Double[],System.Double[],System.Double,MyMediaLite.RatingPrediction.RatingPredictor,MyMediaLite.Data.ISplit{MyMediaLite.Data.IRatings})">
            <summary>Find the the parameters resulting in the minimal results for a given evaluation measure (2D)</summary>
            <remarks>The recommender will be set to the best parameter value after calling this method.</remarks>
            <param name="evaluation_measure">the name of the evaluation measure</param>
            <param name="hp_name1">the name of the first hyperparameter to optimize</param>
            <param name="hp_values1">the logarithm values of the first hyperparameter to try out</param>
            <param name="hp_name2">the name of the second hyperparameter to optimize</param>
            <param name="hp_values2">the logarithm values of the second hyperparameter to try out</param>
            <param name="basis">the basis to use for the logarithms</param>
            <param name="recommender">the recommender</param>
            <param name="split">the dataset split to use</param>
            <returns>the best (lowest) average value for the hyperparameter</returns>
        </member>
        <member name="M:MyMediaLite.HyperParameter.GridSearch.FindMinimumExponential(System.String,System.String,System.Double[],System.Double,MyMediaLite.RatingPrediction.RatingPredictor,MyMediaLite.Data.ISplit{MyMediaLite.Data.IRatings})">
            <summary>Find the the parameters resulting in the minimal results for a given evaluation measure (1D)</summary>
            <remarks>The recommender will be set to the best parameter value after calling this method.</remarks>
            <param name="evaluation_measure">the name of the evaluation measure</param>
            <param name="hp_name">the name of the hyperparameter to optimize</param>
            <param name="hp_values">the logarithms of the values of the hyperparameter to try out</param>
            <param name="basis">the basis to use for the logarithms</param>
            <param name="recommender">the recommender</param>
            <param name="split">the dataset split to use</param>
            <returns>the best (lowest) average value for the hyperparameter</returns>
        </member>
        <member name="M:MyMediaLite.HyperParameter.GridSearch.FindMinimum(System.String,System.String,System.Double[],MyMediaLite.RatingPrediction.RatingPredictor,System.UInt32)">
            <summary>Find the the parameters resulting in the minimal results for a given evaluation measure using k-fold cross-validation</summary>
            <remarks>The recommender will be set to the best parameter value after calling this method.</remarks>
            <param name="evaluation_measure">the name of the evaluation measure</param>
            <param name="hyperparameter_name">the name of the hyperparameter to optimize</param>
            <param name="hyperparameter_values">the values of the hyperparameter to try out</param>
            <param name="recommender">the recommender</param>
            <param name="k">the number of folds to be used for cross-validation</param>
            <returns>the best (lowest) average value for the hyperparameter</returns>
        </member>
        <member name="T:MyMediaLite.HyperParameter.IHyperParameterSearch">
            <summary>Interface for classes that perform hyper-parameter search</summary>
        </member>
        <member name="P:MyMediaLite.HyperParameter.IHyperParameterSearch.EvalJob">
            <summary>the delegate used to compute</summary>
        </member>
        <member name="P:MyMediaLite.HyperParameter.IHyperParameterSearch.Recommender">
            <summary>the recommender to find the hyperparameters for</summary>
        </member>
        <member name="P:MyMediaLite.HyperParameter.IHyperParameterSearch.Parameters">
            <summary>list of (hyper-)parameters to optimize</summary>
        </member>
        <member name="P:MyMediaLite.HyperParameter.IHyperParameterSearch.Measure">
            <summary>the evaluation measure to optimize</summary>
        </member>
        <member name="P:MyMediaLite.HyperParameter.IHyperParameterSearch.Maximize">
            <summary>true if evaluation measure is to be maximized, false if it is to be minimized</summary>
        </member>
        <member name="P:MyMediaLite.HyperParameter.IHyperParameterSearch.EpochSize">
            <summary>size of the current epoch of the hyper-parameter search</summary>
        </member>
        <member name="P:MyMediaLite.HyperParameter.IHyperParameterSearch.NumberOfStepsComputed">
            <summary>the number of steps computed so far in this hyper-parameter search</summary>
        </member>
        <member name="P:MyMediaLite.HyperParameter.IHyperParameterSearch.BestResult">
            <summary>the best result so far</summary>
        </member>
        <member name="P:MyMediaLite.HyperParameter.IHyperParameterSearch.BestParameterValues">
            <summary>the (hyper-)parameter values of the best result so far</summary>
        </member>
        <member name="M:MyMediaLite.HyperParameter.IHyperParameterSearch.ComputeNextStep">
            <summary>compute the next step in the current epoch</summary>
        </member>
        <member name="M:MyMediaLite.HyperParameter.IHyperParameterSearch.ComputeNextEpoch">
            <summary>complete the current epoch</summary>
        </member>
        <member name="T:MyMediaLite.IIncrementalRecommender">
            <summary>
            Interface for recommenders that support incremental model updates.
            </summary>
        </member>
        <member name="M:MyMediaLite.IIncrementalRecommender.RemoveUser(System.Int32)">
            <summary>Remove all feedback by one user</summary>
            <param name='user_id'>the user ID</param>
        </member>
        <member name="M:MyMediaLite.IIncrementalRecommender.RemoveItem(System.Int32)">
            <summary>Remove all feedback by one item</summary>
            <param name='item_id'>the item ID</param>
        </member>
        <member name="P:MyMediaLite.IIncrementalRecommender.UpdateUsers">
            <summary>true if users shall be updated when doing incremental updates</summary>
            <remarks>
            Default should be true.
            Set to false if you do not want any updates to the user model parameters when doing incremental updates.
            </remarks>
        </member>
        <member name="P:MyMediaLite.IIncrementalRecommender.UpdateItems">
            <summary>true if items shall be updated when doing incremental updates</summary>
            <remarks>
            Set to false if you do not want any updates to the item model parameters when doing incremental updates.
            </remarks>
        </member>
        <member name="T:MyMediaLite.Random">
            <summary>Random number generator singleton class</summary>
        </member>
        <member name="M:MyMediaLite.Random.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:MyMediaLite.Random.#ctor(System.Int32)">
            <summary>Creates a Random object initialized with a seed</summary>
            <param name="seed">An integer for initializing the random number generator</param>
        </member>
        <member name="P:MyMediaLite.Random.Seed">
            <summary>the random seed</summary>
        </member>
        <member name="M:MyMediaLite.Random.GetInstance">
            <summary>Gets the instance. If it does not exist yet, it will be created.</summary>
            <returns>the singleton instance</returns>
        </member>
        <member name="M:MyMediaLite.Random.Init">
            <summary>(Re-)initialize the instance</summary>
        </member>
        <member name="T:MyMediaLite.RecommenderParameters">
            <summary>Class for key-value pair string processing</summary>
        </member>
        <member name="M:MyMediaLite.RecommenderParameters.#ctor(System.String)">
            <summary>Create a CommandLineParameters object</summary>
            <param name="arg_string">a string that contains the command line parameters</param>
        </member>
        <member name="M:MyMediaLite.RecommenderParameters.#ctor(System.Collections.Generic.IList{System.String},System.Int32)">
            <summary>Create a RecommenderParameters object</summary>
            <param name="args">a list of strings that contains the command line parameters</param>
            <param name="start">ignore all parameters before this position</param>
        </member>
        <member name="M:MyMediaLite.RecommenderParameters.CheckForLeftovers">
            <summary>Check for parameters that have not been processed yet</summary>
            <returns>true if there are leftovers</returns>
        </member>
        <member name="M:MyMediaLite.RecommenderParameters.GetRemoveInt32(System.String)">
            <summary>Get the value of an integer parameter from the collection and remove the corresponding key-value pair</summary>
            <param name="key">the name of the parameter</param>
            <returns>the value of the parameter if it exists, 0 otherwise</returns>
        </member>
        <member name="M:MyMediaLite.RecommenderParameters.GetRemoveInt32(System.String,System.Int32)">
            <summary>Get the value of an integer parameter from the collection and remove the corresponding key-value pair</summary>
            <param name="key">the name of the parameter</param>
            <param name="dvalue">the default value of the parameter</param>
            <returns>the value of the parameter if it exists, the default otherwise</returns>
        </member>
        <member name="M:MyMediaLite.RecommenderParameters.GetRemoveInt32List(System.String)">
            <summary>Get the values of an integer list parameter from the collection and remove the corresponding key-value pair</summary>
            <param name="key">the name of the parameter</param>
            <returns>the values of the parameter if it exists, an empty list otherwise</returns>
        </member>
        <member name="M:MyMediaLite.RecommenderParameters.GetRemoveInt32List(System.String,System.Char)">
            <summary>Get the values of an integer list parameter from the collection and remove the corresponding key-value pair</summary>
            <param name="key">the name of the parameter</param>
            <param name="sep">the separator character used to split the string representation of the list</param>
            <returns>the values of the parameter if it exists, the default otherwise</returns>
        </member>
        <member name="M:MyMediaLite.RecommenderParameters.GetRemoveUInt32(System.String)">
            <summary>Get and remove an unsigned integer</summary>
            <param name="key">the parameter name</param>
            <returns>the value of the unsigned integer parameter, zero if it is not found</returns>
        </member>
        <member name="M:MyMediaLite.RecommenderParameters.GetRemoveUInt32(System.String,System.UInt32)">
            <summary>Get and remove an unsigned integer</summary>
            <param name="key">the parameter name</param>
            <param name="dvalue">the default value of the parameter</param>
            <returns>the value of the unsigned integer parameter, dvalue if it is not found</returns>
        </member>
        <member name="M:MyMediaLite.RecommenderParameters.GetRemoveDouble(System.String)">
            <summary>Get a double value from the parameters</summary>
            <param name="key">the parameter name</param>
            <returns>the value of the parameter, 0 if no parameter of the given name found</returns>
        </member>
        <member name="M:MyMediaLite.RecommenderParameters.GetRemoveDouble(System.String,System.Double)">
            <summary>Get a double value from the parameters</summary>
            <param name="key">the parameter name</param>
            <param name="dvalue">the default value if parameter of the given name is not found</param>
            <returns>the value of the parameter if it is found, the default value otherwise</returns>
        </member>
        <member name="M:MyMediaLite.RecommenderParameters.GetRemoveFloat(System.String)">
            <summary>Get a float value from the parameters</summary>
            <param name="key">the parameter name</param>
            <returns>the value of the parameter, 0 if no parameter of the given name found</returns>
        </member>
        <member name="M:MyMediaLite.RecommenderParameters.GetRemoveFloat(System.String,System.Single)">
            <summary>Get a float value from the parameters</summary>
            <param name="key">the parameter name</param>
            <param name="dvalue">the default value if parameter of the given name is not found</param>
            <returns>the value of the parameter if it is found, the default value otherwise</returns>
        </member>
        <member name="M:MyMediaLite.RecommenderParameters.GetRemoveString(System.String)">
            <summary>Get a string parameter</summary>
            <param name="key">the name of the parameter</param>
            <returns>the parameter value related to key, an empty string if it does not exist</returns>
        </member>
        <member name="M:MyMediaLite.RecommenderParameters.GetRemoveString(System.String,System.String)">
            <summary>Get a string parameter</summary>
            <param name="key">the name of the parameter</param>
            <param name="dvalue">the default value</param>
            <returns>the parameter value related to key, the default value if it does not exist</returns>
        </member>
        <member name="M:MyMediaLite.RecommenderParameters.GetRemoveBool(System.String)">
            <summary>Get the value of a boolean parameter from the collection and remove the corresponding key-value pair</summary>
            <param name="key">the name of the parameter</param>
            <returns>the value of the parameter if it exists, false otherwise</returns>
        </member>
        <member name="M:MyMediaLite.RecommenderParameters.GetRemoveBool(System.String,System.Boolean)">
            <summary>Get the value of a boolean parameter from the collection and remove the corresponding key-value pair</summary>
            <param name="key">the name of the parameter</param>
            <param name="dvalue">the default value of the parameter</param>
            <returns>the value of the parameter if it exists, the default otherwise</returns>
        </member>
        <member name="T:MyMediaLite.Handlers">
            <summary>Class containing handler functions, e.g. exception handlers</summary>
        </member>
        <member name="M:MyMediaLite.Handlers.UnhandledExceptionHandler(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>React to an unhandled exceptions</summary>
            <remarks>
            Give out the error message and the stack trace, then terminate the program.
            FileNotFoundExceptions get special treatment.
            </remarks>
            <param name="sender">the sender of the exception</param>
            <param name="unhandled_event">the arguments of the unhandled exception</param>
        </member>
        <member name="T:MyMediaLite.Memory">
            <summary>Memory-related tools</summary>
        </member>
        <member name="P:MyMediaLite.Memory.Usage">
            <summary>the total memory usage in MB</summary>
            <value>the total memory usage in MB</value>
        </member>
        <member name="T:MyMediaLite.MultiCore">
            <summary>Utility routines for multi-core algorithms</summary>
        </member>
        <member name="M:MyMediaLite.MultiCore.PartitionUsersAndItems(MyMediaLite.Data.IDataSet,System.Int32)">
            <summary>Partition dataset user- and item-wise for parallel processing</summary>
            <remarks>
            Literature:
            <list type="bullet">
              <item><description>
                Rainer Gemulla, Peter J. Haas, Erik Nijkamp, Yannis Sismanis:
                Large-Scale Matrix Factorization with Distributed Stochastic Gradient Descent.
                KDD 2011.
                http://www.mpi-inf.mpg.de/~rgemulla/publications/gemulla11dsgd.pdf
              </description></item>
            </list>
            </remarks>
            <returns>a two-dimensional array of index lists, each entry corresponds to one block entry</returns>
            <param name='dataset'>a feedback dataset</param>
            <param name='num_groups'>the number of groups both users and items are partitioned into</param>
        </member>
        <member name="M:MyMediaLite.MultiCore.PartitionIndices(MyMediaLite.Data.IDataSet,System.Int32)">
            <summary>Partition the indices of a dataset into groups</summary>
            <returns>the grouped indices</returns>
            <param name='dataset'>a dataset</param>
            <param name='num_groups'>the number of groups</param>
        </member>
        <member name="T:MyMediaLite.Wrap">
            <summary>Static methods to wrap around other code.</summary>
        </member>
        <member name="M:MyMediaLite.Wrap.MeasureTime(System.Action)">
            <summary>Measure how long an action takes</summary>
            <param name="t">An <see cref="T:System.Action"/> defining the action to be measured</param>
            <returns>The <see cref="T:System.TimeSpan"/> it takes to perform the action</returns>
        </member>
        <member name="M:MyMediaLite.Wrap.FormatException(System.String,System.Action)">
            <summary>Catch FormatException and re-throw it including filename</summary>
            <param name='filename'>the name of the file processed inside t</param>
            <param name='t'>the task to be performed</param>
            <exception cref='M:MyMediaLite.Wrap.FormatException(System.String,System.Action)'>
            Represents errors caused by passing incorrectly formatted arguments or invalid format specifiers to methods.
            </exception>
        </member>
        <member name="M:MyMediaLite.Wrap.FormatException``1(System.String,System.Func{``0})">
            <summary>Catch FormatException and re-throw it including filename; generic version</summary>
            <param name='filename'>the name of the file processed inside t</param>
            <param name='t'>the task to be performed</param>
            <exception cref='M:MyMediaLite.Wrap.FormatException(System.String,System.Action)'>
            Represents errors caused by passing incorrectly formatted arguments or invalid format specifiers to methods.
            </exception>
        </member>
        <member name="T:MyMediaLite.Utils">
            <summary>Class containing utility functions</summary>
        </member>
        <member name="M:MyMediaLite.Utils.Memoize``2(System.Func{``0,``1})">
            <summary>Memoize a function</summary>
            <param name="f">The function to memoize</param>
            <returns>a version of the function that remembers past function results</returns>
        </member>
        <member name="M:MyMediaLite.Utils.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>Shuffle a list in-place</summary>
            <remarks>
            Fisher-Yates shuffle, see
            http://en.wikipedia.org/wiki/Fisher–Yates_shuffle
            </remarks>
        </member>
        <member name="M:MyMediaLite.Utils.GetTypes(System.String)">
            <summary>Get all types in a namespace</summary>
            <param name="name_space">a string describing the namespace</param>
            <returns>a list of Type objects</returns>
        </member>
        <member name="M:MyMediaLite.Utils.NextGaussian(MyMediaLite.Random,System.Double,System.Double)">
            <summary>
              Generates normally distributed numbers. Each operation makes two Gaussians for the price of one, and apparently they can be cached or something for better performance, but who cares.
            </summary>
            <param name="r"></param>
            <param name = "mu">Mean of the distribution</param>
            <param name = "sigma">Standard deviation</param>
            <returns></returns>
        </member>
        <member name="T:MyMediaLite.Recommender">
            <summary>
            Abstract recommender class implementing default behaviors
            </summary>
        </member>
        <member name="P:MyMediaLite.Recommender.MaxUserID">
            <summary>Maximum user ID</summary>
        </member>
        <member name="P:MyMediaLite.Recommender.MaxItemID">
            <summary>Maximum item ID</summary>
        </member>
        <member name="M:MyMediaLite.Recommender.Clone">
            <summary>create a shallow copy of the object</summary>
        </member>
        <member name="M:MyMediaLite.Recommender.Predict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.Recommender.CanPredict(System.Int32,System.Int32)">
            
        </member>
        <member name="M:MyMediaLite.Recommender.Recommend(System.Int32,System.Int32,System.Collections.Generic.ICollection{System.Int32},System.Collections.Generic.ICollection{System.Int32})">
            
        </member>
        <member name="M:MyMediaLite.Recommender.Train">
            
        </member>
        <member name="M:MyMediaLite.Recommender.LoadModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.Recommender.SaveModel(System.String)">
            
        </member>
        <member name="M:MyMediaLite.Recommender.ToString">
            
        </member>
        <member name="T:MyMediaLite.Extensions">
            <summary>Helper class with utility methods for handling recommenders</summary>
            <remarks>
            Contains methods for creating and configuring recommender objects, as well as listing recommender classes.
            </remarks>
        </member>
        <member name="M:MyMediaLite.Extensions.Configure``1(``0,System.String,System.Action{System.String})">
            <summary>Configure a recommender</summary>
            <param name="recommender">the recommender to configure</param>
            <param name="parameters">a string containing the parameters as key-value pairs</param>
            <param name="report_error">void function that takes a string for error reporting</param>
            <returns>the configured recommender</returns>
        </member>
        <member name="M:MyMediaLite.Extensions.Configure``1(``0,System.String)">
            <summary>Configure a recommender</summary>
            <param name="recommender">the recommender to configure</param>
            <param name="parameters">a string containing the parameters as key-value pairs</param>
        </member>
        <member name="M:MyMediaLite.Extensions.Configure``1(``0,System.Collections.Generic.Dictionary{System.String,System.String},System.Action{System.String})">
            <summary>Configure a recommender</summary>
            <param name="recommender">the recommender to configure</param>
            <param name="parameters">a dictionary containing the parameters as key-value pairs</param>
            <param name="report_error">void function that takes a string for error reporting</param>
            <returns>the configured recommender</returns>
        </member>
        <member name="M:MyMediaLite.Extensions.SetProperty``1(``0,System.String,System.String)">
            <summary>Sets a property of a MyMediaLite recommender</summary>
            <param name="recommender">An <see cref="T:MyMediaLite.IRecommender"/></param>
            <param name="key">the name of the property (case insensitive)</param>
            <param name="val">the string representation of the value</param>
        </member>
        <member name="M:MyMediaLite.Extensions.SetProperty``1(``0,System.String,System.String,System.Action{System.String})">
            <summary>Sets a property of a MyMediaLite recommender</summary>
            <param name="recommender">An <see cref="T:MyMediaLite.IRecommender"/></param>
            <param name="key">the name of the property (case insensitive)</param>
            <param name="val">the string representation of the value</param>
            <param name="report_error">delegate to report errors</param>
        </member>
        <member name="M:MyMediaLite.Extensions.CreateRatingPredictor(System.String)">
            <summary>Create a rating predictor from the type name</summary>
            <param name="typename">a string containing the type name</param>
            <returns>a rating recommender object of type typename if the recommender type is found, null otherwise</returns>
        </member>
        <member name="M:MyMediaLite.Extensions.CreateRecommender(System.String)">
            <summary>Create recommender</summary>
            <param name='typename'>the type name</param>
            <returns>a recommender of the given type name</returns>
        </member>
        <member name="M:MyMediaLite.Extensions.CreateRatingPredictor(System.Type)">
            <summary>Create a rating predictor from a type object</summary>
            <param name="type">the type object</param>
            <returns>a rating recommender object of type type</returns>
        </member>
        <member name="M:MyMediaLite.Extensions.CreateItemRecommender(System.String)">
            <summary>Create an item recommender from the type name</summary>
            <param name="typename">a string containing the type name</param>
            <returns>an item recommender object of type typename if the recommender type is found, null otherwise</returns>
        </member>
        <member name="M:MyMediaLite.Extensions.CreateItemRecommender(System.Type)">
            <summary>Create an item recommender from a type object</summary>
            <param name="type">the type object</param>
            <returns>an item recommender object of type type</returns>
        </member>
        <member name="M:MyMediaLite.Extensions.Needs(MyMediaLite.IRecommender)">
            <summary>Describes the kind of data needed by this recommender</summary>
            <param name="recommender">a recommender</param>
            <returns>a string containing the additional data file arguments needed for training this recommender</returns>
        </member>
        <member name="M:MyMediaLite.Extensions.Supports(MyMediaLite.IRecommender)">
            <summary>Describes the kind of arguments supported by this recommender</summary>
            <param name="recommender">a recommender</param>
            <returns>a string containing the additional arguments supported by this recommender</returns>
        </member>
        <member name="M:MyMediaLite.Extensions.ListRecommenders(System.String)">
            <summary>List all recommenders in a given namespace</summary>
            <param name="prefix">a string representing the namespace</param>
            <returns>an array of strings containing the recommender descriptions</returns>
        </member>
        <member name="T:MyMediaLite.INeedsMappings">
            <summary>
            Interface for classes that need user and item ID mappings, e.g. for recommenders that read data
            from external sources and thus need to know which IDs are used externally.
            </summary>
        </member>
        <member name="P:MyMediaLite.INeedsMappings.UserMapping">
            <summary>the user mapping</summary>
        </member>
        <member name="P:MyMediaLite.INeedsMappings.ItemMapping">
            <summary>the item mapping</summary>
        </member>
    </members>
</doc>
